<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[配置owncloud私有云（Centos）]]></title>
      <url>http://penguin858.com/2017/07/18/%E9%85%8D%E7%BD%AEowncloud%E7%A7%81%E6%9C%89%E4%BA%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="零-平台说明"><a href="#零、平台说明" class="headerlink" title="零、平台说明"></a>零、平台说明</h2><p>我配置owncloud所使用的服务器是阿里云的学生版服务器，以下许多服务也是基于阿里云提供的服务，不同的地方大多可以通过百度解决。<br>这篇文章所描述的是刚购买来的服务器，在这之前还没有进行过apache等服务的配置，所以其中会有一些与owncloud无关的配置过程。</p>
<a id="more"></a>
<h2 id="一-安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1预装软件包"><a href="#1-预装软件包" class="headerlink" title="1.预装软件包"></a>1.预装软件包</h3><p>这一步需要安装apache、php、mysql等软件，他们都是lamp的一部分。（下面脚本的安装不包括php，要安装php的话请参考<a href="http://blog.csdn.net/dxywx/article/details/50609137">这里</a>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum update</div><div class="line">yum install httpd mariadb-server mariadb sqlite wget vim mod_ssl</div></pre></td></tr></table></figure></p>
<h3 id="2安装owncloud"><a href="#2-安装owncloud" class="headerlink" title="2.安装owncloud"></a>2.安装owncloud</h3><p>我安装的版本是<a href="http://download.owncloud.org/download/repositories/10.0/owncloud/">10.0</a>，不过官方的稳定版本通常发布在<a href="https://download.owncloud.org/download/repositories/stable/owncloud/">这个页面</a>，根据对应版本下面的提示进行下载即可。</p>
<h3 id="3配置mysql"><a href="#3-配置mysql" class="headerlink" title="3.配置mysql"></a>3.配置mysql</h3><p>接下来需要在数据库中创建owncloud所使用的账号。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">mysql&gt; create database owncloud;</div><div class="line">mysql&gt; create user 'owncloud'@'localhost' identified by 'MyOwncloudName';</div><div class="line">mysql&gt; grand all on owncloud.* to 'owncloud'@'localhost';</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; quit;</div></pre></td></tr></table></figure></p>
<p>之后打开浏览器，访问 ‘<your_server_name>/owncloud’，将页面内的信息补充完整之后便可使用得到的有管理员权限的账号访问owncloud了。（访问使用<code>&lt;your_server_name&gt;/owncloud</code>）</your_server_name></p>
<h2 id="二-通过域名访问owncloud"><a href="#二、通过域名访问owncloud" class="headerlink" title="二、通过域名访问owncloud"></a>二、通过域名访问owncloud</h2><p>现在owncloud能用了，但是还只能通过ip地址访问，这对我想和朋友分享的时候会造成很大的不便，所以我想注册一个域名来帮助我解决这个问题，并且为以后添加新的服务做准备。<br>这里需要注意的是，在中国，如果想要通过http访问一个网站，那么必须去备案，我觉得这个过程太麻烦了= =!，所以自己的网站现在只能通过https访问，下面的配置中也主要会讲https服务器的配置。</p>
<h3 id="1申请证书"><a href="#1-申请证书" class="headerlink" title="1.申请证书"></a>1.申请证书</h3><p>阿里云提供了证书服务，也有免费的证书（赛门铁克）可供申请。如果不想申请证书，自签名可以参考<a href="http://www.centoscn.com/CentosSecurity/CentosSafe/2013/0729/785.html">这里</a><br>在阿里云申请赛门铁克的证书时需要在域名管理系统里添加两个条目。第一个是证书提供商测试使用的，要根据证书提供商的要求设置一个TXT类型的解析记录，记录值和主机记录可在<code>证书服务-进度</code>处查看。第二个条目便是自己想要使用的域名的信息了，记录类型为A，记录值是自己服务器的ip地址，主机记录是域名的前缀。</p>
<p>等到证书下发后，将证书上传到服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp  -r local_dir username@servername:remote_dir</div></pre></td></tr></table></figure></p>
<h3 id="2配置https服务器"><a href="#2-配置https服务器" class="headerlink" title="2.配置https服务器"></a>2.配置https服务器</h3><p>这块网上流传最多的便是找到配置文件里注释的一句话并删掉<code>#</code>，如果没有这条注释就说明apache缺少<code>mod_ssl</code>模块。这个说法是有问题的。有这个注释的版本应该是比较早的版本了，新版本的注释并没有这样一条- -。要验证自己的apache到底有没有安装<code>mod_ssl</code>，只需要打开apache安装目录下的<code>modules</code>文件夹，看看里面有没有<code>mod_ssl.so</code>就可以了。（一开始被误导浪费了不少时间- -，阿里云上的说明也是和网上的这些说明一样- -非常坑= =！）。<br>个人觉得比较方便的一种方法是创建一个新的虚拟主机。找到apache的安装目录<code>/etc/httpd</code>，打开<code>conf</code>里的<code>httpd.conf</code>文件，在文件末尾（创建一个新文件亦可）添加如下内容:</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;VirtualHost *:443&gt;</span></div><div class="line"> <span class="attribute"><span class="nomarkup">ServerName</span></span> owncloud.xzping.top</div><div class="line"> <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"your_path_to_owncloud"</span></div><div class="line"> <span class="attribute">SSLEngine</span> <span class="literal">on</span></div><div class="line"> <span class="attribute">SSLCertificateFile</span> your_certificate_path/public.pem</div><div class="line"> <span class="attribute">SSLCertificateKeyFile</span> your_certificate_path/your_private_key.key</div><div class="line"> <span class="attribute">SSLCertificateChainFile</span> your_certificate_path/chain.pem</div><div class="line"> <span class="attribute"><span class="nomarkup">Header</span></span> always set Strict-Transport-Security <span class="string">"max-age=63072000"</span></div><div class="line"><span class="section">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure>
<p>这途中碰到了一个问题。owncloud需要把域名添加到可信任列表里才能通过域名来访问，然而我在这么设置了之后不能直接通过点击那个buttom完成，点击之后会404- -。这时我就采用了直接修改配置文件<code>config.php</code>直接将域名添加信任就完成了。</p>
<h3 id="3防火墙设置"><a href="#3-防火墙设置" class="headerlink" title="3.防火墙设置"></a>3.防火墙设置</h3><p>我的服务器没有启用防火墙，而是利用了阿里云提供的安全组策略。不过不管采用什么方法，都需要开启443端口。</p>
<p>这样一来便可以通过https访问owncloud了！</p>
<h2 id="三-优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><p>实际上owncloud的默认配置并不是其最优配置，所以我们在成功启用owncloud以后还可以对其进行一定的调整。一些警告可以在用管理员账号登陆后进入<code>设置-常规</code>看到，下面我们来消除警告。</p>
<h3 id="1启用cron"><a href="#1-启用cron" class="headerlink" title="1.启用cron"></a>1.启用cron</h3><h4 id="cron简介"><a href="#cron简介" class="headerlink" title="cron简介"></a>cron简介</h4><p>cron 是linux系统提供的一个会根据命令和执行时间来按时来调用度工作任务的工具</p>
<p><strong>命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</div><div class="line">crontab -l //列出某个用户cron服务的详细内容</div><div class="line">crontab -r //删除某个用户的cron服务</div><div class="line">crontab -e //编辑某个用户的cron服务</div></pre></td></tr></table></figure></p>
<h4 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h4><p>这里搬运一下配置文件<code>/etc/crontab</code>中的注释来说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># For details see man 4 crontabs</div><div class="line"></div><div class="line"># Example of job definition:</div><div class="line"># .---------------- minute (0 - 59)</div><div class="line"># |  .------------- hour (0 - 23)</div><div class="line"># |  |  .---------- day of month (1 - 31)</div><div class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</div><div class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</div><div class="line"># |  |  |  |  |</div><div class="line"># *  *  *  *  * user-name  command to be executed</div></pre></td></tr></table></figure></p>
<p>表达式中的特殊符号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*：表示匹配该域的任意值，假如在Minutes域使用*, 即表示每分钟都会触发事件</div><div class="line">/:表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次</div></pre></td></tr></table></figure></p>
<p>更详细的可以参考这个：<a href="http://www.cnblogs.com/junrong624/p/4239517.html">cron表达式详解</a></p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>其实明白了crontab的工作原理，就很清楚应该怎么设置了。owncloud提供了一个任务计划<code>cron.php</code>，只需要设置定时用php去执行这个任务计划就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ crontab -u root -e</div><div class="line">*/15 * * * * /usr/bin/php -f your_owncloud_path/cron.php</div></pre></td></tr></table></figure></p>
<p>最后打开浏览器访问一下<code>http[s]://&lt;domain-of-your-server&gt;/owncloud/cron.php</code>配置就成功了。</p>
<h3 id="2事务文件锁定transactional-file-locking与memcache"><a href="#2-事务文件锁定-Transactional-File-Locking-与memcache" class="headerlink" title="2.事务文件锁定(Transactional File Locking)与memcache"></a>2.事务文件锁定(Transactional File Locking)与memcache</h3><h4 id="tfl介绍"><a href="#TFL介绍" class="headerlink" title="TFL介绍"></a>TFL介绍</h4><p>TFL系统是为了保证正常操作中不会出现文件的问题而设计的。owncloud默认的是通过基于数据库的锁系统来支持TFL，但这一方案性能很差。如果修改为基于内存的存储方式则性能会提高很多，为了支持这一点，需要安装一个memcache系统（还可以加快访问速度）。我选择的是redis。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install redis php56w-pecl-redis</div><div class="line">systemctl start redis</div></pre></td></tr></table></figure>
<p>安装并启动完成以后，打开owncloud的配置文件，在最后加入如下内容：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">'memcache.local'</span> =&gt; <span class="string">'\OC\Memcache\Redis'</span>,</div><div class="line">  <span class="string">'redis'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">        <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</div><div class="line">        <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</div><div class="line">  ),</div><div class="line"><span class="string">'memcache.locking'</span> =&gt; <span class="string">'OC\Memcache\Redis'</span></div></pre></td></tr></table></figure></p>
<p>这样一来就配置好了。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[基于opencv的人脸识别]]></title>
      <url>http://penguin858.com/2017/06/08/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#step1配置环境-安装opencv">step1:配置环境-安装opencv</a><ul>
<li><a href="#mac-os上的安装过程">mac os上的安装过程</a><ul>
<li><a href="#1利用homebrew安装相关包">1.利用homebrew安装相关包</a></li>
<li><a href="#2设置pkg-config">2.设置pkg-config</a></li>
<li><a href="#3测试">3.测试</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#step2实验概述">step2:实验概述</a><ul>
<li><a href="#0opencv">0.OpenCV</a></li>
<li><a href="#1准备数据">1.准备数据</a></li>
<li><a href="#2特征脸法">2.特征脸法</a><ul>
<li><a href="#算法原理">算法原理:</a></li>
<li><a href="#算法内容">算法内容</a></li>
<li><a href="#理论基础">理论基础</a></li>
<li><a href="#代码实现">代码实现</a></li>
</ul>
</li>
<li><a href="#3fisherfaces">3.Fisherfaces</a><ul>
<li><a href="#算法原理">算法原理</a></li>
<li><a href="#公式推导">公式推导</a></li>
<li><a href="#代码实现-1">代码实现</a></li>
</ul>
</li>
<li><a href="#4local-binary-patterns-histograms">4.Local Binary Patterns Histograms</a><ul>
<li><a href="#算法思想">算法思想</a></li>
<li><a href="#算法改进">算法改进</a><ul>
<li><a href="#1圆形lbp算子">1.圆形LBP算子</a></li>
<li><a href="#2lbp等价模式">2.LBP等价模式</a></li>
</ul>
</li>
<li><a href="#代码框架">代码框架</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#step3得出实验结果">step3:得出实验结果</a></li>
<li><a href="#step4应用性别识别">step4:应用——性别识别</a></li>
<li><a href="#appendix附录">Appendix附录</a><ul>
<li><a href="#1数据库结构">1.数据库结构</a></li>
<li><a href="#2转换为csv采用的python脚本">2.转换为CSV采用的python脚本</a></li>
</ul>
</li>
<li><a href="#reference参考">Reference参考</a></li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<p>这是我与同学合作完成的课程大作业项目。<br><a href="https://github.com/penguin858/Face-Recognition-with-OpenCV.git">项目的github地址</a>  (目前文档还未完善)</p>
<h2 id="step1配置环境-安装opencv"><a href="#step1-配置环境-安装opencv" class="headerlink" title="step1:配置环境-安装opencv"></a>step1:配置环境-安装opencv</h2><p>按照官方网站上的指示完全没法安装 <strong>-_-!!!</strong></p>
<h3 id="mac-os上的安装过程"><a href="#mac-os上的安装过程" class="headerlink" title="mac os上的安装过程"></a>mac os上的安装过程</h3><p><a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation">linux上的安装方法可以参见这个</a><br>但是只按照官网的教程来操作并不能够直接运行，可以参看<a href="http://blog.csdn.net/qccz123456/article/details/52351831">这个博客</a>配置相应的环境变量</p>
<h4 id="1利用homebrew安装相关包"><a href="#1-利用homebrew安装相关包" class="headerlink" title="1.利用homebrew安装相关包"></a>1.利用homebrew安装相关包</h4><p>按照官网上的要求，我们需要安装<code>pkg-config</code>、<code>cmake</code>、<code>g++\gcc</code><br>在电脑上安装好<strong>homebrew</strong>的情况下，我们可以通过它来安装上述插件，比如要安装cmake时，只需要使用以下命令：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>search cmake</div></pre></td></tr></table></figure></p>
<p>根据反馈来看看有没有这个包/名字有没有写错，没有的话则可使用以下命令安装：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>cmake</div></pre></td></tr></table></figure></p>
<p>在安装好上述插件以后，就可以安装opencv了（直接使用homebrew安装比到官网上下载编译要容易）：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>tap homebrew/science</div><div class="line"><span class="keyword">brew </span>install opencv</div></pre></td></tr></table></figure></p>
<h4 id="2设置pkg-config"><a href="#2-设置pkg-config" class="headerlink" title="2.设置pkg-config"></a>2.设置pkg-config</h4><p>安装完成以后，在<code>/usr/local/Cellar</code>下就会出现一个新的文件夹<code>opencv</code>。接下来打开<code>.bash_profile</code>配置<code>pkg-config</code>的环境变量：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">open</span> -e .bash_profile</div></pre></td></tr></table></figure></p>
<p>在打开的文档中加入：(具体路径要根据实际安装情况而定)<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span><span class="symbol">:/usr/local/Cellar/opencv/</span><span class="number">2.4</span>.<span class="number">13.2</span>/lib/pkgconfig</div><div class="line">export PKG_CONFIG_PATH</div><div class="line"></div><div class="line">export LD_LIBRARY_PATH=<span class="regexp">/usr/local</span><span class="regexp">/Cellar/opencv</span><span class="regexp">/2.4.13.2/bin</span><span class="symbol">:SLD_LIBRARY_PATH</span></div><div class="line">export PATH=<span class="variable">$&#123;</span>PATH&#125;<span class="symbol">:/usr/local/Cellar/opencv/</span><span class="number">2.4</span>.<span class="number">13.2</span>/lib</div></pre></td></tr></table></figure></p>
<p>保存，然后让环境变量生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure></p>
<p>然后输入以下命令：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pkg-config <span class="comment">--libs opencv</span></div><div class="line">pkg-config <span class="comment">--cflags opencv</span></div></pre></td></tr></table></figure></p>
<p>如果显示类似以下，则说明配置已经成功：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">~ apple$ pkg-config --libs opencv</div><div class="line"></div><div class="line">-L/usr/local/Cellar/opencv/<span class="number">2.4</span>.<span class="number">13.2</span>/<span class="class"><span class="keyword">lib</span> -<span class="title">lopencv_calib3d</span> -<span class="title">lopencv_contrib</span> -<span class="title">lopencv_core</span> -<span class="title">lopencv_features2d</span> -<span class="title">lopencv_flann</span> -<span class="title">lopencv_gpu</span> -<span class="title">lopencv_highgui</span> -<span class="title">lopencv_imgproc</span> -<span class="title">lopencv_legacy</span> -<span class="title">lopencv_ml</span> -<span class="title">lopencv_nonfree</span> -<span class="title">lopencv_objdetect</span> -<span class="title">lopencv_ocl</span> -<span class="title">lopencv_photo</span> -<span class="title">lopencv_stitching</span> -<span class="title">lopencv_superres</span> -<span class="title">lopencv_ts</span> -<span class="title">lopencv_video</span> -<span class="title">lopencv_videostab</span></span></div><div class="line"></div><div class="line">~ apple$ pkg-config --cflags opencv</div><div class="line"></div><div class="line">-I/usr/local/Cellar/opencv/<span class="number">2.4</span>.<span class="number">13.2</span>/<span class="keyword">include</span>/opencv -I/usr/local/Cellar/opencv/<span class="number">2.4</span>.<span class="number">13.2</span>/<span class="keyword">include</span></div></pre></td></tr></table></figure></p>
<h4 id="3测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p>以下是一个可供测试用的程序，该程序将同一文件夹内的名为<code>image.jpg</code>的文件复制并生成文件<code>image_copy.png</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;   </div><div class="line">    <span class="comment">// Load an image from file - change this based on your image name</span></div><div class="line">    Mat img = imread(<span class="string">"image.jpg"</span>, CV_LOAD_IMAGE_UNCHANGED);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(img.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to load input image\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// this is just to show, that you won't have to pre-alloc</span></div><div class="line">    <span class="comment">// result-images with c++ any more..</span></div><div class="line">    Mat gray;</div><div class="line">    cvtColor(img,gray,CV_BGR2GRAY);</div><div class="line"></div><div class="line">    <span class="comment">// Write the image to a file with a different name,</span></div><div class="line">    <span class="comment">// using a different image format -- .png instead of .jpg</span></div><div class="line">    <span class="keyword">if</span>( ! imwrite(<span class="string">"image_copy.png"</span>, img) )</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to write image file\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    imshow(<span class="string">"Display Image"</span>, img);</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// no need to release anything with c++ !   </span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>makefile文件如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">test</span>:<span class="keyword">test</span>.cpp</div><div class="line">	<span class="keyword">g</span>++ -o <span class="keyword">test</span> <span class="keyword">test</span>.cpp `pkg-config --libs opencv` `pkg-config --cflags opencv` </div><div class="line"></div><div class="line">clean:</div><div class="line">	<span class="keyword">rm</span> <span class="keyword">test</span></div></pre></td></tr></table></figure></p>
<p>make之后运行即可。</p>
<h2 id="step2实验概述"><a href="#step2-实验概述" class="headerlink" title="step2:实验概述"></a>step2:实验概述</h2><h3 id="0opencv"><a href="#0-OpenCV" class="headerlink" title="0.OpenCV"></a>0.OpenCV</h3><p>opencv(open source computer vision)是一个由intel发起的基于bsd许可开源发行的跨平台计算机视觉库。这是一个由c函数和少量c++类构成的库，由于我们的培养方案大多围绕c/c++来展开，所以使用这个库也是比较方便的。<br>opencv2.4加入的新类<code>FaceRecognizer</code>为我们实现了许多人脸识别的算法，本次project的目的就是采用不同的算法来对部分数据库中的图像进行处理，比较不同算法的性能差别，并探究背后的原理。</p>
<p>主要包括的人脸识别算法有：</p>
<ul>
<li>特征脸法(Eigenfaces）</li>
<li>Fisherfaces</li>
<li>局部二进制模式直方图(Local Binary Patterns Histograms) ——这是我自己起的名字</li>
</ul>
<p>开始我们采用的数据库是<a href="http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html">AT&amp;T Facedatabase</a></p>
<h3 id="1准备数据"><a href="#1-准备数据" class="headerlink" title="1.准备数据"></a>1.准备数据</h3><p>要运用算法来处理图像，我们需要将所有的图像文件的清单处理成一种特殊的<code>CSV</code>格式，便于读取。我们这里的表示将用每一行代表一个文件，前面是一个包含路径的文件名，后面是一个<code>;</code>作为分隔符，最后跟着一个标签（一个整数，代表所属人），例如<code>/path/to/image.ext;0</code></p>
<p>我们所采用的数据库的结构以及处理用的python脚本见附录，转换输出的结果如下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/Users/</span>apple<span class="regexp">/Downloads/</span>orl_faces<span class="regexp">/s1/</span><span class="number">1</span>.pgm;<span class="number">0</span></div><div class="line">···</div><div class="line"><span class="regexp">/Users/</span>apple<span class="regexp">/Downloads/</span>orl_faces<span class="regexp">/s1/</span><span class="number">10</span>.pgm;<span class="number">0</span></div></pre></td></tr></table></figure></p>
<h3 id="2特征脸法"><a href="#2-特征脸法" class="headerlink" title="2.特征脸法"></a>2.特征脸法</h3><p>特征脸法(Eigenfaces)是基于主成分分析法(Principal Component Analysis，PCA)的一种人脸识别的算法。特征脸法采用整体面部识别的方法:把面部图像看作一个向量，把图像的每一个像素点看作向量的一维。一个$pxq$的图像将被表示成一个$m = pxq$维的向量， (简单地把每一个像素点按照行或者列的方式依次排列而成) 然而如此产生的向量是巨大的，事实上这些高维向量可以被一些本质的、低维的向量所表示，主成分分析法正是用来达到这一目的。 </p>
<h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理:"></a>算法原理:</h4><p>主成分分析是一种分析、简化数据集的技术，经常用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。其方法主要是通过对协方差矩阵进行特征分解，以得出数据的主成分(即特征向量)与它们的权值(即特征值)，其结果可以理解为对原数据中的方差做出解释:哪一个方向上的数据值对方差的影响最大?直观上，对方差影响越大的方向上对数据的影响越重要。</p>
<h4 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h4><p>1、获得包含M张人脸的图像集合S，按照上述方法将每一张人脸图像转化为一个N维向量:<br>$S = \lbrace \Gamma_1,\Gamma_2,\Gamma_3,…,\Gamma_M \rbrace $<br>2.计算平均图像(均值)$ψ$，并计算每张图像与平均图像的差值$Φ_i$:<br>$\Psi = \frac{1}{M}\sum\limits_{n = 1}^{M}\Gamma_n$<br>$\Phi_i = \Gamma_i - \Psi$<br>3.求解协方差矩阵C的特征值$λ_i$和单位正交特征向量$u_i$:<br>$C = \frac{1}{M}\sum\limits_{n = 1}^{M}\Phi_n\Phi_n^\mathrm{T} = AA^\mathrm{T}$<br>$A = \lbrace \Phi_1,\Phi_2,…,\Phi_n \rbrace$<br>每个特征向量也都是N维向量，转化为图像之后看上去也像是一张“脸”，因而被称为特征脸。通常上我们只取最大的前k个特征值所对应的特征向量作为抓取出的“特征”。<br>4、识别人脸。考虑待识别人脸，按照同样的方式转化为N维向量Γ，用特正脸去表征它:<br>$\omega_k = u_k^\mathrm{T}(\Gamma - \Phi)$<br>$\omega_i$表示Γ在特征脸$u_i$下的权值，M个权重可以构成一个向量:<br>$\Omega^\mathrm{T} = [\omega_1,\omega_2,…,\omega_n]$<br>Ω就是Γ在特征脸下的表征，同理S中每张脸都可以用同样的方式表征，计算二者的“差别”，<br>通常使用欧氏距离表征这个差别:<br>$\epsilon_k = \parallel\Omega - \Omega_k\parallel^2$<br>设定两个阈值ε1和ε2:若εk&lt;ε1，认为Γ和Γk同属一个人;若ε1&lt;εk&lt;ε2，认为Γ也是一张脸，但可能不属于S;若εk&gt;ε2，认为Γ不是一张人脸。 </p>
<h4 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h4><p>I、为何PCA要寻求协方差矩阵的特征向量? 我们从二维的简单情形入手。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_1.png" width="35%"><br>PCA的目的是降维，直观上，希望可以用一维来表示二维的点以降低维度。一维即使一条直线，相当于二维的点向直线上做投影。为了使变换丢失最少的信息，应该让这些点投影后彼此相隔“越远越好”，也就是彼此有区别(否则若两个点重合在一起，就无法区分这两个点，也就是丢失了”信息“)。上图中，直观上认为向u1方向投影应该是一个不错的选择，而向u2这个方向投影就会有很多店重合在一起。 为讨论方便，我们把每个点都减去均值μ，只考虑偏差的部分，这样做也使点分布在原点附近。在这里只用了五个点示意。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_2.png" width="35%"><br>我们先选取一个方向u1，并向这个方向做投影，我们发现各个点之间区别很大，如果向这个方 向降维，应该是不错的选择。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_3.png" width="35%"><br>如果我们换一个方向u2，会发现没有第一次选择效果好。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_4.png" width="35%"><br>那么如何选择向量u，才能使各个点彼此区分，也即上述“使方差最大化”呢? 每个点都可以用一个向量来表示，记为$X_i$，i = 1，2，……，m，选择的降维的方向(向量)记为u。那么$X_i$在u上的投影(原点到投影点的距离)即为$X_i^\mathrm{T}u$，求使方差最大化的方向u也即求u使得<br>$max \frac{1}{m}\sum\limits_{i=1}^{m}( X_i^\mathrm{T}u)^2 = max \frac{1}{m}\sum\limits_{i=1}^{m} u^\mathrm{T}X_i X_i^\mathrm{T}u = max$ $u^\mathrm{T}(\frac{1}{m}\sum\limits_{i=1}^{m}X_i X_i^\mathrm{T})u$</p>
<p>注意到我们预处理时令每个向量$X_i$都减去了均值μ，因而事实上<br>$S = \frac{1}{m}\sum\limits_{i=1}^{m}X_iX_i^\mathrm{T}$ 就是关于X的协方差矩阵</p>
<p>(补充线性代数知识:设实对称矩阵$A_{nxn}$的全部特征值(非负实数)按照从大到小排列为λ1 ≧ λ2 ≧ …… ≧ λn ≧ 0，对于任意的n维单位向量α，都有λn ≦ $α^\mathrm{T}A_α$ ≦ λ1。)</p>
<p>令$\parallel u \parallel$ = 1，即规定u为单位向量，则使上式达到最大值也即求关于X的协方差矩阵S的(单位)特征量u。<br>用类似的思路可以将结论拓展到多维情况。我们希望用尽量少的维度代表尽可能全部的信息，因而所选取的k个方向u1、u2、……、uk要保证没有“冗余”信息，也即它们是正交的，并选取最大的前k个特征值所对应的特征向量。 </p>
<p>II、其他一些线性代数知识<br>1、实对称矩阵一定可以对角化(有n个线性无关的特征向量)，且特征根都是非负实数。<br>2、属于不同特征值的特征向量是正交的，属于一个特征值的特征向量可以施密特正交化为正交向量。<br>3、矩阵$A_{sxn}$和$B_{nxs}$，AB和BA有相同的非零特征值，且特征值的重数相等。设α是AB属于特征值λ的一个特征向量，则Bα是BA属于特征值λ的一个特征向量:ABα = λα =&gt; B(ABα) = B(λα) =&gt; BA(Bα) = λ(Bα)。<br>利用上定理，可以简化上述第3部中的计算，当M &lt;&lt; N时，可以显著的简化运算和存储 (N x N的矩阵与M x M的矩阵)。<br>4、若选取特征向量时，只取最大的前k个特征值所对应的特征向量，分别记为u1、u2、……、uk，令W =(u1，u2，……，uk)，记$P = W^\mathrm{T}A$，其中$A =(Φ_1，Φ_2，……， Φ_M)$，记$P =(v_1，v_2，……，v_M)$，则$v_k = W^\mathrm{T}Φ_k$，可见P是A降维后的向量组，这也正是 PCA降维的体现。因为我们取的u1、u2、……、uk是单位正交矩阵，故有$WW^\mathrm{T} = I$，从而$Φ_k = Wv_k$，也即我们可以从低维的$v_k$得到高维的$Φ_k$。 </p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/contrib/contrib.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * read_csv - Read images from files and divide them into training set and test</div><div class="line"> * set according to the number of iamges of per person in the training set</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; train_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator = <span class="string">';'</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * norm_0_255 - Create and return normalized image</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src);</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</div><div class="line">&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">     * check for legal command line argument</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(argc != <span class="number">3</span>)&#123;</div><div class="line">        cout &lt;&lt; <span class="string">"usage: ./"</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">" &lt;csv.ext&gt;  &lt;number&gt;"</span> &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * get the path of CSV and the number of images of per person in</div><div class="line">     * the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> fn_csv = <span class="keyword">string</span>(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">int</span> trian_number = atoi(argv[<span class="number">2</span>]);</div><div class="line">    vector&lt;Mat&gt; trian_images, test_images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; trian_labels, test_labels;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">0</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * read in the data which can fail if no valid</div><div class="line">     */</div><div class="line">    <span class="built_in">try</span>&#123;</div><div class="line">        test_number = read_csv(fn_csv, trian_images, trian_labels,</div><div class="line">        	                   test_images, test_labels, trian_number);</div><div class="line">    &#125;<span class="built_in">catch</span> (cv::Exception&amp; e) &#123;</div><div class="line">        cerr &lt;&lt; <span class="string">"Error opening file \""</span> &lt;&lt; fn_csv &lt;&lt; <span class="string">"\". Reason: "</span></div><div class="line">             &lt;&lt; e.msg &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * note the number of images predicted correctly</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> correctcnt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>*test_number; i++)&#123;</div><div class="line">    	<span class="comment">/*</span></div><div class="line">         * select testsample from the test set</div><div class="line">         */</div><div class="line">    	Mat testSample = test_images[i];</div><div class="line">        <span class="keyword">int</span> testLabel = test_labels[i];</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * create an Eigenfaces model with the traing set</div><div class="line">         * full PCA here </div><div class="line">         */</div><div class="line">        Ptr&lt;FaceRecognizer&gt; model = createEigenFaceRecognizer();</div><div class="line">        model-&gt;train(trian_images, trian_labels);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * predicts the label of the test samplle and compare it with</div><div class="line">         * its true label</div><div class="line">         * note the confidence in the meanwhile</div><div class="line">         */</div><div class="line">        <span class="keyword">int</span> predictedLabel = model-&gt;predict(testSample);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * note and output the result</div><div class="line">         */</div><div class="line">        <span class="keyword">string</span> rst = format(<span class="string">"Predicted / Actual = %d / %d."</span>, </div><div class="line">        	predictedLabel, testLabel);</div><div class="line">        cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">        <span class="built_in">if</span>(predictedLabel == testLabel)</div><div class="line">        	correctcnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> correctrate = (<span class="keyword">double</span>)correctcnt / (<span class="number">40</span>*test_number);</div><div class="line">    <span class="keyword">string</span> rst = format(<span class="string">"Correct rate = %d / %d = %lf"</span>,</div><div class="line">    	                correctcnt, <span class="number">40</span>*test_number, correctrate);</div><div class="line">    cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">	<span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; trian_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator)</div><div class="line">&#123;</div><div class="line">	std::ifstream file(filename.c_str(), ifstream::in);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * check for legal filename</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span> (!file) &#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"No valid input file."</span>;</div><div class="line">        CV_Error(CV_StsBadArg, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * divide images into training set and test set according to the</div><div class="line">     * number of images of per person in the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> <span class="built_in">line</span>, path, classlabel;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">10</span>-trian_number;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 40 person in total</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> trian[<span class="number">40</span>];</div><div class="line">    memset(trian, <span class="number">0</span> ,<span class="keyword">sizeof</span>(trian));</div><div class="line">    <span class="built_in">while</span> (getline(file, <span class="built_in">line</span>)) &#123;</div><div class="line">        stringstream liness(<span class="built_in">line</span>);</div><div class="line">        getline(liness, path, separator);</div><div class="line">        getline(liness, classlabel);</div><div class="line">        <span class="built_in">if</span>(!path.empty() &amp;&amp; !classlabel.empty()) &#123;</div><div class="line">        	<span class="keyword">int</span> tmplabel = atoi(classlabel.c_str());</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to triang set</div><div class="line">        	 */</div><div class="line">        	<span class="built_in">if</span>(trian[tmplabel] &lt; trian_number)&#123;</div><div class="line">        		trian_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                trian_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">                trian[tmplabel]++;</div><div class="line">        	&#125;</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to test set</div><div class="line">        	 */</div><div class="line">            <span class="built_in">else</span>&#123;</div><div class="line">            	test_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                test_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> test_number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src)</div><div class="line">&#123;</div><div class="line">	Mat src = _src.getMat();</div><div class="line">    <span class="comment">/* </span></div><div class="line">     * Create and return normalized image</div><div class="line">     */</div><div class="line">    Mat dst;</div><div class="line">    <span class="built_in">switch</span>(src.channels()) &#123;</div><div class="line">    <span class="built_in">case</span> <span class="number">1</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC1);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">case</span> <span class="number">3</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC3);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">default</span>:</div><div class="line">        src.copyTo(dst);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3fisherfaces"><a href="#3-Fisherfaces" class="headerlink" title="3.Fisherfaces"></a>3.Fisherfaces</h3><p>主成分分析（PCA）是Eigenfaces方法的核心，它找到最大化数据总方差的特征的线性组合。虽然这是一种表达数据的强大方法，然而它并没有考虑到所有的情况。所以当抛出组件时，很多变化的信息可能会丢失。想象一下，数据的变化是由外部来源产生的，在这里我们假设这样的变化的来源是光，由PCA识别的组件并不需要包含任何变化信息，所以样本们会被混合到一起，且无法再进行分类。<br>线性判别分析最大化了类之间到类内部的分散，而不是最大化整体的分散。这个想法很简单：相同的类应该集中在一起，而不同的类在低维表示中尽可能远离彼此。</p>
<h4 id="算法原理"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h4><p><strong>我们先来考虑数据集中只有两类的情况</strong><br>实际上这个算法要处理的情况远不止两类，但为了简便起见，我们先从两类的情况开始讨论。<br>对于每一张图，我们用一个点在二维坐标系中的坐标来刻画这张图的性质。那么现在的数据是散布在平面上的二维数据，现在想用一维的量来刻画这些数据并将它们区分开来，那么一个合理的想法就是去寻找一个平面内合适的向量并计算出这些点在这个平面上的投影，用数学公式来表示的话就是 $y = w^\mathrm{T} x $<br><img src="/2017/06/08/基于opencv的人脸识别/FISHER_1.png" width="75%"> </p>
<p>这里借用了一位网友的图（见参考2）。该图中给出了两种可能的方案，直观上第二种方法更好，能够有效的区分开这两类数据集。为了让计算机来实现这一想法，必须要有一种确定的算法来确定这个向量$w$</p>
<p><strong>下面讨论数据集中有更多类的情况</strong><br>我们假设数据共有c类。<br>一开始我们将图像按照像素逐行逐列的处理成一个向量，这样的话一个100x100的图像得到的向量就是10000维，设其为$x$，其维数为n。<br>如果这种时候还只采用一个向量来区分的话有可能会无效，例如</p>
<p><img src="/2017/06/08/基于opencv的人脸识别/FISHER_2.png" width="50%"><br>出现了这样的某个向量恰好成为某几个点组成平面的法向量的情况。<br>这种时候一个可靠的解决方案就是采用多个向量（采用矩阵表示）</p>
<h4 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h4><p>设$W$为<br>$W = [w_1 | w_2 |…| w_K]$<br>其中$w_i$是一个n维列向量<br>那么$x$的投影就可以表示为<br>$y = w^\mathrm{T} x$<br>其中，$y$是一个k维向量。</p>
<p>这之后从类间散列度和类内散列度来考虑。</p>
<p>首先计算每类数据的均值(中心点)：<br>$\mu_i = \frac{1}{N_i}\sum\limits_{x\in\omega_i}x$<br>这里的下标i代表了这一类，$N_i$表示这一类中的元素个数。所以$\mu_i$就代表这一类的中心。</p>
<p>整个样本的中心定义为：<br>$\mu = \frac{1}{N}\sum\limits_{\forall x}x = \frac{1}{N}\sum\limits_{\forall x}N_i\mu_i$</p>
<p>变量类中散列度$S_w$定义如下：<br>$S_w = \sum\limits_{i=1}^{c}S_{wi}$<br>其中：$S_{wi} = \sum\limits_{x\in\omega_i}(x-\mu_i)(x-\mu_i)^\mathrm{T}$   代表第i类内的散列度，是一个nxn矩阵（个人理解：这个公式实际上和方差公示一样，这样做运算也是将各个维度和它们之间的相互作用放在了一个平等的位置上来看待）</p>
<p>类间散列度$S_B$定义如下:<br>$S_B = \sum\limits_{i=1}^{c}N_i(\mu_i-\mu)(\mu_i-\mu)^\mathrm{T}$<br>表示各个类别到样本中心的距离，也是一个nxn矩阵，其中的$N_i$代表一个类别中的样本数，也就是这个人的图片个数</p>
<p>以上都是投影之前的数据。下面我们来计算投影后的数据：</p>
<p>投影后第i类的样本中心：<br>$\widetilde{\mu_i} = \frac{1}{N_i}\sum\limits_{y\in\omega_i}y$</p>
<p>投影后的总样本中心<br>$\widetilde{\mu} = \frac{1}{N}\sum\limits_{\forall y}y$</p>
<p>投影后的类中散列度：<br>$\widetilde{S_w} = \sum\limits_{i=1}^{c}\sum\limits_{y\in\omega_i}(y - \widetilde{\mu_i})(y - \widetilde{\mu_i})^\mathrm{T}$</p>
<p>投影后的类间散列度：<br>$\widetilde{S_B} = \sum\limits_{i=1}^{c}N_i(\widetilde{\mu_i}-\widetilde{\mu})(\widetilde{\mu_i}-\widetilde{\mu})^\mathrm{T}$</p>
<p>根据以上公式以及线性代数知识，有：<br>$\widetilde{S_w} = W^\mathrm{T} S_w W$<br>$\widetilde{S_B} = W^\mathrm{T} S_B W$</p>
<p>如何判断W是不是最佳呢，可以从两方面考虑：1、不同的分类得到的投影点要尽量分开（$S_B$尽量大）；2、同一个分类投影后得到的点要尽量聚合（$S_w$尽量小）</p>
<p>由此我们可以定义度量用的参数<br>$J(W) = \frac{|\widetilde{S_B}|}{|\widetilde{S_w}|} = \frac{|W^\mathrm{T} S_B W|}{|W^\mathrm{T} S_B W|}$</p>
<p>上式取极大值时的W的选取是一个组合优化问题，被证明满足以下式子：<br>$S_w^{-1}S_B w_i = \lambda w_i$<br>即：$w_i$是矩阵$S_w^{-1}S_B$的特征值为$\lambda$的特征向量，这里根据需求，只选取前k大个特征值的特征向量</p>
<p>计算出这些之后，我们就可以回到之前的问题，得出了对应的投影向量，我们就可以依据它们来对向量进行分类了。得到了k个特征向量，如何匹配某人脸和数据库内人脸是否相似呢，方法是将这个人脸在k个特征向量上做投影，得到k维的列向量或者行向量，然后和已有的投影求得欧式距离，根据阈值来判断是否匹配。</p>
<p>另外还需注意：<br>由于$S_B$中的（μi-μ）秩为1，所以$S_B$的至多为C（矩阵的秩小于等于各个相加矩阵的和）。又因为知道了前C-1个μi后，最后一个μc可以用前面的μi来线性表示，因此$S_B$的秩至多为C-1，所以矩阵的特征向量个数至多为C-1。因为C是数据集的类别，所以假设有N个人的照片，那么至多可以取到N-1个特征向量来表征原数据。（存疑）</p>
<h4 id="代码实现"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/contrib/contrib.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * read_csv - Read images from files and divide them into training set and test</div><div class="line"> * set according to the number of iamges of per person in the training set</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; train_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator = <span class="string">';'</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * norm_0_255 - Create and return normalized image</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src);</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</div><div class="line">&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">     * check for legal command line argument</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(argc != <span class="number">3</span>)&#123;</div><div class="line">        cout &lt;&lt; <span class="string">"usage: ./"</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">" &lt;csv.ext&gt;  &lt;number&gt;"</span> &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * get the path of CSV and the number of images of per person in</div><div class="line">     * the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> fn_csv = <span class="keyword">string</span>(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">int</span> trian_number = atoi(argv[<span class="number">2</span>]);</div><div class="line">    vector&lt;Mat&gt; trian_images, test_images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; trian_labels, test_labels;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">0</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * read in the data which can fail if no valid</div><div class="line">     */</div><div class="line">    <span class="built_in">try</span>&#123;</div><div class="line">        test_number = read_csv(fn_csv, trian_images, trian_labels,</div><div class="line">        	                   test_images, test_labels, trian_number);</div><div class="line">    &#125;<span class="built_in">catch</span> (cv::Exception&amp; e) &#123;</div><div class="line">        cerr &lt;&lt; <span class="string">"Error opening file \""</span> &lt;&lt; fn_csv &lt;&lt; <span class="string">"\". Reason: "</span></div><div class="line">             &lt;&lt; e.msg &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * note the number of images predicted correctly</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> correctcnt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>*test_number; i++)&#123;</div><div class="line">    	<span class="comment">/*</span></div><div class="line">         * select testsample from the test set</div><div class="line">         */</div><div class="line">    	Mat testSample = test_images[i];</div><div class="line">        <span class="keyword">int</span> testLabel = test_labels[i];</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * create an Eigenfaces model with the traing set</div><div class="line">         * full PCA here </div><div class="line">         */</div><div class="line">        Ptr&lt;FaceRecognizer&gt; model = createFisherFaceRecognizer();</div><div class="line">        model-&gt;train(trian_images, trian_labels);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * predicts the label of the test samplle and compare it with</div><div class="line">         * its true label</div><div class="line">         * note the confidence in the meanwhile</div><div class="line">         */</div><div class="line">        <span class="keyword">int</span> predictedLabel = model-&gt;predict(testSample);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * note and output the result</div><div class="line">         */</div><div class="line">        <span class="keyword">string</span> rst = format(<span class="string">"Predicted / Actual = %d / %d."</span>, </div><div class="line">        	predictedLabel, testLabel);</div><div class="line">        cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">        <span class="built_in">if</span>(predictedLabel == testLabel)</div><div class="line">        	correctcnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> correctrate = (<span class="keyword">double</span>)correctcnt / (<span class="number">40</span>*test_number);</div><div class="line">    <span class="keyword">string</span> rst = format(<span class="string">"Correct rate = %d / %d = %lf"</span>,</div><div class="line">    	                correctcnt, <span class="number">40</span>*test_number, correctrate);</div><div class="line">    cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">	<span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; trian_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator)</div><div class="line">&#123;</div><div class="line">	std::ifstream file(filename.c_str(), ifstream::in);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * check for legal filename</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span> (!file) &#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"No valid input file."</span>;</div><div class="line">        CV_Error(CV_StsBadArg, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * divide images into training set and test set according to the</div><div class="line">     * number of images of per person in the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> <span class="built_in">line</span>, path, classlabel;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">10</span>-trian_number;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 40 person in total</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> trian[<span class="number">40</span>];</div><div class="line">    memset(trian, <span class="number">0</span> ,<span class="keyword">sizeof</span>(trian));</div><div class="line">    <span class="built_in">while</span> (getline(file, <span class="built_in">line</span>)) &#123;</div><div class="line">        stringstream liness(<span class="built_in">line</span>);</div><div class="line">        getline(liness, path, separator);</div><div class="line">        getline(liness, classlabel);</div><div class="line">        <span class="built_in">if</span>(!path.empty() &amp;&amp; !classlabel.empty()) &#123;</div><div class="line">        	<span class="keyword">int</span> tmplabel = atoi(classlabel.c_str());</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to triang set</div><div class="line">        	 */</div><div class="line">        	<span class="built_in">if</span>(trian[tmplabel] &lt; trian_number)&#123;</div><div class="line">        		trian_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                trian_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">                trian[tmplabel]++;</div><div class="line">        	&#125;</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to test set</div><div class="line">        	 */</div><div class="line">            <span class="built_in">else</span>&#123;</div><div class="line">            	test_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                test_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*</span></div><div class="line">        	 * else just omit it</div><div class="line">        	 */</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> test_number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src)</div><div class="line">&#123;</div><div class="line">	Mat src = _src.getMat();</div><div class="line">    <span class="comment">/* </span></div><div class="line">     * Create and return normalized image</div><div class="line">     */</div><div class="line">    Mat dst;</div><div class="line">    <span class="built_in">switch</span>(src.channels()) &#123;</div><div class="line">    <span class="built_in">case</span> <span class="number">1</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC1);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">case</span> <span class="number">3</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC3);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">default</span>:</div><div class="line">        src.copyTo(dst);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4local-binary-patterns-histograms"><a href="#4-Local-Binary-Patterns-Histograms" class="headerlink" title="4.Local Binary Patterns Histograms"></a>4.Local Binary Patterns Histograms</h3><p>与之前提到的算法不同，LBP算法是通过提取局部特征作为判断依据的。LBP方法的显著优点是对光照不敏感，但是仍然没有解决表情与姿态的问题。不过相比于特征脸方法，识别率已经有了极大的提升。<br>特征面和Fisherfaces采取了一种整体的方法来进行面部识别。算法将数据视为高维图像空间中的某个矢量。我们都知道高维度不好，所以确定了一个较低维的子空间，其中（可能）有用的信息被保留。特征面方法最大化总散射，如果方差是由外部源产生的，则可能导致问题，因为在所有类别上具有最大方差的分量不一定对分类有用。因此，为了保留一些区别用的信息，我们应用了线性判别分析（LDA），并按照Fisherfaces方法的描述进行了优化。 Fisherfaces方法至少对于我们在模型中假设的约束场景运行良好。<br>但现实生活并不完美。我们根本不能在同一个人的10种不同的图像中保证完美的光线设置。那么如果每个人只有一个图像呢？我们对子空间的协方差估计可能是非常错误的。而我们实际需要多少幅图像来获得有用的估计值？就算在AT&amp;T图像库中，对于前两种算法想要得到一个很好的识别率，我们对同一个人至少需要8张照片，并且此时Fisherfaces算法并没有什么提升。<br>后来，大部分研究集中在从图像中提取局部特征。这样的算法不是把整个图像看成一个高维向量，而只是一个对象的局部属性。可一个事物的图像表示会受到照明变化、图像的旋转等因素的影响。所以我们必须要求算法对这些东西具有一定的健壮性（robust）。算法的基本思想是通过将每个像素与其邻域进行比较来总结图像中的局部结构。以像素为中心，并对其邻居进行阈值。如果中心像素的强度大于等于其邻居，则表示为1，如果不是则为0。</p>
<h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p>最初的LBP是定义在像素3x3的邻域内的，以领域中心点的像素为阈值，将相邻的8个像素的灰度值与其进行比较，若周围像素值大于中心像素值，则该像素点的位置被标记为1，否则为0。这样，3x3邻域内的8个点经比较可产生8位二进制数（通常转换为十进制数即LBP码，共256种），即得到该邻域中心像素点的LBP值，并用这个值来反映该区域的纹理信息。如下图所示：<br><img src="/2017/06/08/基于opencv的人脸识别/LBP_1.png" width="75%"> </p>
<p>写成数学公式的话是：<br>$LBP(x_c,y_c) = \sum\limits_{p=0}^{P-1}2^ps(i_p - i_c)$<br>其中，$(x_c,y_c)$表示中心元素，$i_c$是中心元素像素值</p>
<h4 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h4><h5 id="1圆形lbp算子"><a href="#1-圆形LBP算子" class="headerlink" title="1.圆形LBP算子"></a>1.圆形LBP算子</h5><p>基本的 LBP算子的最大缺陷在于它只覆盖了一个固定半径范围内的小区域，这显然不能满足不同尺寸和频率纹理的需要。</p>
<p>为了适应不同尺度的纹理特征，并达到灰度和旋转不变性的要求，Ojala等对 LBP 算子进行了改进，将 3×3邻域扩展到任意邻域，并用圆形邻域代替了正方形邻域，改进后的 LBP 算子允许在半径为 R 的圆形邻域内有任意多个像素点。从而得到了<strong>诸如半径为R的圆形区域内含有P个采样点的LBP算子</strong>。比如下图定了一个5x5的邻域：<br><img src="/2017/06/08/基于opencv的人脸识别/LBP_2.png" width="30%"> </p>
<p>该图中的八个采样点可以使用如下公式计算：<br>$x_p = x_c + Rcos(\frac{2\pi p}{P})$<br>$y_p = y_c - Rsin(\frac{2\pi p}{P})$   (减号是因为我们通常按照顺时针来计算)</p>
<p>不过我们必须考虑到一点，如果按照这个公式计算出的值不是整数，那么这个位置所对应的像素不存在。这个时候我们必须采用某种方法得到一个最恰当的像素位置。图像处理领域常常采用一种被称为<strong>双线性插值</strong>的方式来解决这一问题。</p>
<p>$f(x,y) \approx \begin{bmatrix}1-x &amp; x\end{bmatrix} \begin{bmatrix}f(0,0) &amp; f(0,1) \ f(1,0) &amp; f(1,1) \end{bmatrix} \begin{bmatrix} 1-y \ y \end{bmatrix}$</p>
<p>注：关于双线性插值公式的含义<br>这里的f函数所表示的即是由坐标得到灰度值的函数。该公式的意思是，选取适当的坐标系，使得我们所得到的函数点的坐标周围正方形的四个点的坐标分别为$(0,0)、(0,1)、(1,0)、(1,1)$，在此坐标系下通过上式计算得到的值就可视为该点灰度值的一个估计。</p>
<h5 id="2lbp等价模式"><a href="#2-LBP等价模式" class="headerlink" title="2.LBP等价模式"></a>2.LBP等价模式</h5><p>其实最重要的部分在上面便已经介绍完了。不过这里稍微提一下一种优化形式。<br>之前的算子所能得到的LBP值与其采取的点数是指数关系。为了降低这样的复杂度，产生了一种LBP等价模式算法来对LBP算子的模式种类来进行降维。在实际图像中，绝大多数LBP模式最多只包含两次从1到0或从0到1的跳变。因此，Ojala将“等价模式”定义为：当某个LBP所对应的循环二进制数从0到1或从1到0最多有两次跳变时，该LBP所对应的二进制就称为一个等价模式类。如00000000（0次跳变），00000111（只含一次从0到1的跳变），10001111（先由1跳到0，再由0跳到1，共两次跳变）都是等价模式类。除等价模式类以外的模式都归为另一类，称为混合模式类，例如10010111（共四次跳变）。通过这样的改进，二进制模式的种类大大减少，而不会丢失任何信息。模式数量由原来的$2^p$种减少为 $P(P-1)+2$种，其中P表示邻域集内的采样点数。对于3×3邻域内8个采样点来说，二进制模式由原始的256种减少为58种，这使得特征向量的维数更少，并且可以减少高频噪声带来的影响。</p>
<h4 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/contrib/contrib.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STEP 10</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; images, vector&lt;<span class="keyword">int</span>&gt;&amp; labels, <span class="keyword">char</span> separator = <span class="string">';'</span>) &#123;</div><div class="line">    std::ifstream file(filename.c_str(), ifstream::in);</div><div class="line">    <span class="built_in">if</span> (!file) &#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"No valid input file was given, please check the given filename."</span>;</div><div class="line">        CV_Error(CV_StsBadArg, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">string</span> <span class="built_in">line</span>, path, classlabel;</div><div class="line">    <span class="built_in">while</span> (getline(file, <span class="built_in">line</span>)) &#123;</div><div class="line">        stringstream liness(<span class="built_in">line</span>);</div><div class="line">        getline(liness, path, separator);</div><div class="line">        getline(liness, classlabel);</div><div class="line">        <span class="built_in">if</span>(!path.empty() &amp;&amp; !classlabel.empty()) &#123;</div><div class="line">            images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">            labels.push_back(atoi(classlabel.c_str()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> local_binary(vector&lt;Mat&gt;&amp; read_images, vector&lt;<span class="keyword">int</span>&gt;&amp; read_labels,<span class="keyword">int</span> num);</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * ensure command line argument</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(argc &lt; <span class="number">2</span> || argc &gt; <span class="number">4</span>)&#123;</div><div class="line">        cout &lt;&lt; <span class="string">"usage: ./"</span> &lt;&lt; argv[<span class="number">0</span>]</div><div class="line">        &lt;&lt; <span class="string">" &lt;csv.ext&gt; &lt;output folder&gt; &lt;number&gt;"</span> &lt;&lt; endl;</div><div class="line">        <span class="built_in">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">string</span> path_csv = <span class="keyword">string</span>(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">string</span> out_folder = <span class="string">""</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">if</span>(argc &gt;= <span class="number">3</span>)&#123;</div><div class="line">        out_folder = <span class="keyword">string</span>(argv[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    vector&lt;Mat&gt; images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; labels;</div><div class="line">    </div><div class="line">    <span class="built_in">try</span>&#123;</div><div class="line">        read_csv(path_csv,images,labels);</div><div class="line">    &#125;<span class="built_in">catch</span>(cv::Exception &amp;e)&#123;</div><div class="line">        cerr &lt;&lt; <span class="string">"Opening file error: file\""</span> &lt;&lt; path_csv &lt;&lt;  <span class="string">"\"."</span></div><div class="line">            &lt;&lt; endl &lt;&lt; <span class="string">"Reason: "</span> &lt;&lt; e.msg &lt;&lt; endl;</div><div class="line">        <span class="built_in">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * ensure the number of images is enough</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(images.<span class="built_in">size</span>() &lt;= <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"This demo needs at least 3 images \</span></div><div class="line">            to work. Please add more images to your data set!";</div><div class="line">        CV_Error(CV_StsError, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">if</span>(argc == <span class="number">3</span>)</div><div class="line">        local_binary(images,labels,<span class="number">0</span>);</div><div class="line">    <span class="built_in">else</span></div><div class="line">        local_binary(images,labels,atoi(argv[<span class="number">3</span>]));</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * local_binary - a function to prepare for calling LBPHFaceRecognizer</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">void</span> local_binary(vector&lt;Mat&gt;&amp; read_images, vector&lt;<span class="keyword">int</span>&gt;&amp; read_labels,<span class="keyword">int</span> num)&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Get images' height from first picture ,in order to </div><div class="line">     * reshape the images to their true size</div><div class="line">     */</div><div class="line">    <span class="comment">//int height = read_images[0].rows;</span></div><div class="line">    vector&lt;Mat&gt; testImages,images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; testLabels,labels;</div><div class="line">    </div><div class="line">    <span class="built_in">if</span>(num == <span class="number">0</span>)&#123;   <span class="comment">// the argument of number is defaulted</span></div><div class="line">        num = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Generate the testsample and trainsample</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> n = num;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; read_images.<span class="built_in">size</span>() / STEP ; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="built_in">for</span>(j = i * STEP ; j &lt; i * STEP + num ; ++j)&#123;</div><div class="line">            testImages.push_back(read_images[j]);</div><div class="line">            testLabels.push_back(read_labels[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">for</span>(; j &lt; i * STEP + STEP ; ++j)&#123;</div><div class="line">            images.push_back(read_images[j]);</div><div class="line">            labels.push_back(read_labels[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Function createLBPHFaceRecognizer‘s prototype :</div><div class="line">     * Ptr&lt;FaceRecognizer&gt; createLBPHFaceRecognizer(int radius=1,</div><div class="line">     * int neighbors=8, int grid_x=8, int grid_y=8, double threshold=DBL_MAX);</div><div class="line">     *</div><div class="line">     * we can change the argument to create the recognizer we need</div><div class="line">     *</div><div class="line">     */</div><div class="line">    Ptr&lt;FaceRecognizer&gt; model = createLBPHFaceRecognizer(<span class="number">1</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">123.0</span>);</div><div class="line">    model-&gt;train(images, labels);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> cor_number = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> predictlabel;</div><div class="line">    cout &lt;&lt; <span class="string">"Predict begin: "</span> &lt;&lt; endl;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; testImages.<span class="built_in">size</span>() ; ++i)&#123;</div><div class="line">        predictlabel = model -&gt; predict(testImages[i]);</div><div class="line">        cout &lt;&lt; <span class="string">" Predicted class = "</span> &lt;&lt; predictlabel &lt;&lt; <span class="string">"/ Actual class = "</span></div><div class="line">        &lt;&lt; testLabels[i] &lt;&lt; <span class="string">"."</span> ;</div><div class="line">        <span class="built_in">if</span>(predictlabel == testLabels[i])&#123;</div><div class="line">            cout &lt;&lt; <span class="string">"Correct !"</span> &lt;&lt; endl;</div><div class="line">            ++cor_number;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">else</span>&#123;</div><div class="line">            cout &lt;&lt; <span class="string">"False !"</span> &lt;&lt; endl;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; <span class="string">"Predict end. "</span> &lt;&lt; endl &lt;&lt; endl &lt;&lt; <span class="string">"Model Information :"</span> &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; <span class="string">" radius: "</span> &lt;&lt; model-&gt;getInt(<span class="string">"radius"</span>) &lt;&lt; endl &lt;&lt; <span class="string">" neighbors: "</span></div><div class="line">    &lt;&lt; model-&gt;getInt(<span class="string">"neighbors"</span>) &lt;&lt; endl &lt;&lt; <span class="string">" grid_x: "</span>&lt;&lt; model-&gt;getInt(<span class="string">"grid_x"</span>)</div><div class="line">    &lt;&lt; endl &lt;&lt; <span class="string">" grid_y: "</span> &lt;&lt; model-&gt;getInt(<span class="string">"grid_y"</span>) &lt;&lt; endl &lt;&lt; <span class="string">" threshold: "</span></div><div class="line">    &lt;&lt; model-&gt;getDouble(<span class="string">"threshold"</span>) &lt;&lt; endl;</div><div class="line">    <span class="keyword">double</span> cor_rate = (<span class="keyword">double</span>)cor_number / (<span class="keyword">double</span>)testImages.<span class="built_in">size</span>();</div><div class="line">    cout &lt;&lt; <span class="string">"Result - Correct Rate: "</span> &lt;&lt; (<span class="keyword">int</span>)(cor_rate * <span class="number">100</span>) &lt;&lt; <span class="string">'%'</span></div><div class="line">    &lt;&lt; endl;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="step3得出实验结果"><a href="#step3-得出实验结果" class="headerlink" title="step3:得出实验结果"></a>step3:得出实验结果</h2><p>这里我们最初使用了前文中提到过的AT&amp;T数据库得出各个算法测试准确度的状态<br><img src="/2017/06/08/基于opencv的人脸识别/result_1.png" alt=""></p>
<p>下面是具体的正确率数值。</p>
<p><img src="/2017/06/08/基于opencv的人脸识别/result_2.png" alt=""></p>
<p>在这个数据库下，几个算法的性能存在着相对的差异，我们可以得到以下结论：</p>
<ul>
<li>性能上，Local binary pattern histogram 优于eigenfaces，eigenfaces又要优于fisherfaces(这一点是因为fisherface优化的方面并不能在这里充分的体现)</li>
<li>local binary pattern histogram能达到满的准确率，而另外两个算法没能达到（事实上，在识别条件，尤其是光照因素变化比较剧烈时，该算法的表现会远优于另外两个算法）</li>
</ul>
<h2 id="step4应用性别识别"><a href="#step4-应用——性别识别" class="headerlink" title="step4:应用——性别识别"></a>step4:应用——性别识别</h2><p>以上算法除了能够用来进行人脸的匹配外，还可以有许多其他的应用，比如用来做性别识别。实现的原理其实相当的简单。</p>
<p>性别识别无非就是把训练样本的标签变成只有两类：男性和女性。需要说明的是，EigenFace是基于PCA的，是一种非监督的模型，不太适合性别识别的任务。而正如我们前面所讨论过的一样，Fisherfaces方法除了考虑类内的关系，还考虑到了其间的相互作用。所以用来做性别识别性能是优于eigenface的。</p>
<p>这部分的代码略去（实际上可以直接复用之前的代码）</p>
<h2 id="appendix附录"><a href="#Appendix附录" class="headerlink" title="Appendix附录"></a>Appendix附录</h2><h3 id="1数据库结构"><a href="#1-数据库结构" class="headerlink" title="1.数据库结构"></a>1.数据库结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">orl_faces apple$ tree</div><div class="line">.</div><div class="line">├── README</div><div class="line">├── record<span class="selector-class">.md</span></div><div class="line">├── s1</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s10</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s11</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s12</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">···</div><div class="line">├── s19</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s2</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s20</div><div class="line">···</div><div class="line">├── s40</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s5</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s6</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s7</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s8</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">└── s9</div><div class="line">    ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">    ···</div><div class="line">    └── <span class="number">10</span>.pgm</div></pre></td></tr></table></figure>
<h3 id="2转换为csv采用的python脚本"><a href="#2-转换为CSV采用的python脚本" class="headerlink" title="2.转换为CSV采用的python脚本"></a>2.转换为CSV采用的python脚本</h3><p>如下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python</span></div><div class="line"></div><div class="line">import sys</div><div class="line">import os.path</div><div class="line"></div><div class="line"><span class="meta"># This is a tiny script to help you creating a CSV file from a face</span></div><div class="line"><span class="meta"># database with a similar hierarchie:</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#  philipp@mango:~/facerec/data/at$ tree</span></div><div class="line"><span class="meta">#  .</span></div><div class="line"><span class="meta">#  |-- README</span></div><div class="line"><span class="meta">#  |-- s1</span></div><div class="line"><span class="meta">#  |   |-- 1.pgm</span></div><div class="line"><span class="meta">#  |   |-- ...</span></div><div class="line"><span class="meta">#  |   |-- 10.pgm</span></div><div class="line"><span class="meta">#  |-- s2</span></div><div class="line"><span class="meta">#  |   |-- 1.pgm</span></div><div class="line"><span class="meta">#  |   |-- ...</span></div><div class="line"><span class="meta">#  |   |-- 10.pgm</span></div><div class="line"><span class="meta">#  ...</span></div><div class="line"><span class="meta">#  |-- s40</span></div><div class="line"><span class="meta">#  |   |-- 1.pgm</span></div><div class="line"><span class="meta">#  |   |-- ...</span></div><div class="line"><span class="meta">#  |   |-- 10.pgm</span></div><div class="line"><span class="meta">#</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</div><div class="line">        print <span class="string">"usage: create_csv &lt;base_path&gt;"</span></div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    BASE_PATH=sys.argv[<span class="number">1</span>]</div><div class="line">    SEPARATOR=<span class="string">";"</span></div><div class="line"></div><div class="line">    label = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> dirname, dirnames, filenames in os.walk(BASE_PATH):</div><div class="line">        <span class="keyword">for</span> subdirname in dirnames:</div><div class="line">            subject_path = os.path.join(dirname, subdirname)</div><div class="line">            <span class="keyword">for</span> filename in os.listdir(subject_path):</div><div class="line">                abs_path = <span class="string">"%s/%s"</span> % (subject_path, filename)</div><div class="line">                print <span class="string">"%s%s%d"</span> % (abs_path, SEPARATOR, label)</div><div class="line">            label = label + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="reference参考"><a href="#Reference参考" class="headerlink" title="Reference参考"></a>Reference参考</h2><p>1.<a href="http://docs.opencv.org/2.4/modules/contrib/doc/facerec/index.html">opencv官方文档</a><br>2.<a href="http://blog.csdn.net/smartempire/article/details/23377385">人脸识别经典算法三：Fisherface（LDA）</a><br>3.<a href="http://blog.csdn.net/smartempire/article/details/23249517">人脸识别经典算法二：LBP方法</a><br>4.<a href="http://blog.csdn.net/smartempire/article/details/21406005">人脸识别经典算法一：特征脸方法（Eigenface）</a></p>
]]></content>
      
        <categories>
            
            <category> 计算机视觉 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html记录]]></title>
      <url>http://penguin858.com/2017/05/02/html%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#一-html概述">一、html概述</a><ul>
<li><a href="#一基本概念">（一）基本概念</a><ul>
<li><a href="#1什么是html">1.什么是html</a></li>
<li><a href="#2html标签html-tag">2.html标签(html tag)</a></li>
<li><a href="#3html文档">3.html文档</a></li>
<li><a href="#4html中的大小写">4.html中的大小写</a></li>
<li><a href="#5html网页结构">5.html网页结构</a></li>
</ul>
</li>
<li><a href="#二基本的html标签">(二)基本的html标签</a><ul>
<li><a href="#0html文本与正文">0.html文本与正文</a></li>
<li><a href="#1html标题">1.html标题</a></li>
<li><a href="#2html段落">2.html段落</a></li>
<li><a href="#3html链接">3.html链接</a></li>
<li><a href="#4html图像">4.html图像</a><ul>
<li><a href="#关于如何设置图像映射">关于如何设置图像映射：</a></li>
</ul>
</li>
<li><a href="#5水平线">5.水平线</a></li>
<li><a href="#6注释">6.注释</a></li>
</ul>
</li>
<li><a href="#三html元素">(三).html元素</a><ul>
<li><a href="#1概念">1.概念</a></li>
<li><a href="#2基本语法">2.基本语法</a></li>
<li><a href="#3嵌套的html元素">3.嵌套的html元素</a></li>
<li><a href="#4空元素">4.空元素</a></li>
</ul>
</li>
<li><a href="#四属性">(四)属性</a><ul>
<li><a href="#0通用">0.通用</a></li>
<li><a href="#1style">1.style:</a></li>
</ul>
</li>
<li><a href="#五文本格式化httpwwww3schoolcomcnhtmlhtml_formattingasp">(五)<a href="http://www.w3school.com.cn/html/html_formatting.asp">文本格式化</a></a><ul>
<li><a href="#1文本格式">1.文本格式</a></li>
<li><a href="#2预格式文本">2.预格式文本</a></li>
<li><a href="#3计算机输出">3.计算机输出</a></li>
<li><a href="#4文字格式标签">4.文字格式标签</a></li>
</ul>
</li>
<li><a href="#六html结构与布局">(六)HTML结构与布局</a><ul>
<li><a href="#1表格">1.表格</a></li>
<li><a href="#2列表">2.列表</a></li>
<li><a href="#3块">3.块</a></li>
<li><a href="#4使用ltdiv为网站布局">4.使用&lt;div&gt;为网站布局</a></li>
<li><a href="#5html框架">5.HTML框架</a></li>
</ul>
</li>
<li><a href="#七html-css">(七)HTML CSS</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h1 id="一-html概述"><a href="#一、html概述" class="headerlink" title="一、html概述"></a>一、html概述</h1><h2 id="一基本概念"><a href="#（一）基本概念" class="headerlink" title="（一）基本概念"></a>（一）基本概念</h2><h3 id="1什么是html"><a href="#1-什么是html" class="headerlink" title="1.什么是html"></a>1.什么是html</h3><p>html全称<strong>超文本标记语言</strong>(Hyper Text Markup language)，它不能算是一种编程语言而只是一种<strong>标记语言</strong>(Markup Language)</p>
<p>标记语言对应着一套<strong>标记标签</strong>(Markup tag)，html使用这一套标记标签来描述网页</p>
<h3 id="2html标签html-tag"><a href="#2-html标签-html-tag" class="headerlink" title="2.html标签(html tag)"></a>2.html标签(html tag)</h3><p>指的是用一对尖括号括起来的关键词，比如’\<html>‘。<br>通常成对出现，例如’\<b>‘和’\</b>‘<br>第一个称为<strong>开始标签（开放标签）</strong>，而第二个称为<strong>结束标签（闭合标签）</strong></html></p>
<h3 id="3html文档"><a href="#3-html文档" class="headerlink" title="3.html文档"></a>3.html文档</h3><p>html文档用来<strong>描述网页</strong>，并且也常被称为<strong>网页(web界面)</strong></p>
<p>html文档的后缀可以使用<strong>.html</strong>或<strong>.htm</strong>都可。</p>
<blockquote>
<p>html 与 htm的区别<br>前者是超文本标记(Hypertext Markup)<br>后者是超文本标记语言(Hypertext Markup Language)<br>可以说 htm = html<br>同时，这两种都是静态网页文件的扩展名，扩展名可以互相更换而不会引起错误（这是指打开而言，但是对于一个链接来说，如果它指向的是一个htm文件，而那个htm文件被更改为html文件，那么是找不到这个连接的）<br>那为什么出现两种文件格式呢？<br>htm 是来源于老的 8.3 文件格式，DOS 操作系统只能支持长度为三位的后缀名，所以是 htm,但在 windows 下无所谓 HTM 与 HTML，html 是为长文件名的格式命名的。所以 htm 是为了兼容过去的DOS命名格式存在的，在效果上没有区别的。以前 htm 和 html 作为不同的服务器上的超文本文件，但现在通用。<br>什么是8.3文件格式？ 这是一种在老的16位Win95或Win98文件系统的短文件名文件格式，扩展名只限于3位，文件名只限于8位。 如果要与16位系统交互，比如说，要把一个路径传给一个16位的程序，你就不能用长文件名，而必须对它进行转换。例如把”C ： /MyLongestPath/MyLongerPath/MyFilename.txt”转换成”C ： /Mylong~1/MyLong~2/Myfile~1.txt”<br>了解这个有什么用？ 在FAT磁盘格式下的DOS中只支持8.3文件格式，如果你要在这个环境下做应用，应该要注意这个文件格式问题。在NTFS下，默认可以兼容这种文件格式，同时也支持长文件名，你也可以通过调整注册表来取消对8.3文件格式也支持</p>
</blockquote>
<p>文档包含了<strong>html标签</strong>和<strong>文本</strong></p>
<p>例如下面就是一个html文档：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>first title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>first paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中：</p>
<ul>
<li><strong>\&lt;!DOCTYPE html&gt;</strong> 声明为 HTML5 文档，声明不区分大小写</li>
<li><strong>&lt;html&gt;</strong> 元素是 HTML 页面的根元素</li>
<li><strong>&lt;head&gt;</strong> 元素包含了文档的元（meta）数据</li>
<li><strong>&lt;title&gt;</strong> 元素描述了文档的标题</li>
<li><strong>&lt;body&gt;</strong> 元素包含了可见的页面内容</li>
<li><strong>&lt;h1&gt;</strong> 元素定义一个大标题</li>
<li><strong>&lt;p&gt;</strong> 元素定义一个段落</li>
<li>有些网站不支持中文显示，所以我们使用<strong>&lt;meta charset=”type_name”&gt;</strong>来声明使用的字符集</li>
</ul>
<p><strong>Web 浏览器</strong>的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容</p>
<h3 id="4html中的大小写"><a href="#4-html中的大小写" class="headerlink" title="4.html中的大小写"></a>4.html中的大小写</h3><p>html中的标签、属性字母不区分大小写，建议使用小写</p>
<h3 id="5html网页结构"><a href="#5-html网页结构" class="headerlink" title="5.html网页结构"></a>5.html网页结构</h3><p>下面是一个可视化的网页结构。<br><img src="/2017/05/02/html记录/html结构.png" alt="html网页结构"></p>
<h2 id="二基本的html标签"><a href="#二-基本的html标签" class="headerlink" title="(二)基本的html标签"></a>(二)基本的html标签</h2><h3 id="0html文本与正文"><a href="#0-html文本与正文" class="headerlink" title="0.html文本与正文"></a>0.html文本与正文</h3><p><strong>&lt;html&gt;</strong>用来声明html文档<br><strong>&lt;body&gt;</strong>之间的内容是文档的可见内容</p>
<h3 id="1html标题"><a href="#1-html标题" class="headerlink" title="1.html标题"></a>1.html标题</h3><p>html使用 <strong>&lt;h1&gt;</strong>  ~  <strong>&lt;h6&gt;</strong>来描述标题:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注</strong>：</p>
<ul>
<li>不要仅仅为了加粗或大号文字使用标题标签，搜索引擎会使用标题来为网页结构编排索引</li>
</ul>
<h3 id="2html段落"><a href="#2-html段落" class="headerlink" title="2.html段落"></a>2.html段落</h3><p>html使用 <strong>&lt;p&gt;</strong> 来描述段落</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;This <span class="keyword">is</span> a <span class="built_in">paragraph</span>.&lt;/p&gt;</div><div class="line">&lt;p&gt;This <span class="keyword">is</span> another <span class="built_in">paragraph</span>.&lt;/p&gt;</div></pre></td></tr></table></figure>
<p><strong>注</strong>：不能通过在html代码中添加额外的空格或换行来改变输出的效果，当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p>
<h3 id="3html链接"><a href="#3-html链接" class="headerlink" title="3.html链接"></a>3.html链接</h3><p>html使用 <strong>&lt;a&gt;</strong> 来定义一个链接，其中，href属性指定链接的地址（url）</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"https://penguin858.github.io"</span>&gt;This <span class="keyword">is</span> <span class="keyword">my</span> blog&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>默认情况下，链接将以以下形式出现在浏览器中：</p>
<ul>
<li>一个未访问过的链接显示为蓝色字体并带有下划线。</li>
<li>访问过的链接显示为紫色并带有下划线。</li>
<li>点击链接时，链接显示为红色并带有下划线。</li>
</ul>
<p>如果为这些超链接设置了CSS样式，则展示的样式根据CSS的设定显示。</p>
<p><strong>注：请始终将正斜杠添加到子文件夹。假如这样书写链接：href=”<a href="https://penguin858.github.io/archives">https://penguin858.github.io/archives</a>“ ，就会向服务器产生两次 HTTP 请求。这是因为服务器会添加正斜杠到这个地址，然后创建一个新的请求，就像这样：href=”<a href="https://penguin858.github.io/archives/">https://penguin858.github.io/archives/</a>“ 。</strong></p>
<p><strong>“链接文本” 不必一定是文本。图片或其他 HTML 元素都可以成为链接。如果把中间的文本内容用&lt;img&gt;替代的话就可以将图片作为链接使用。</strong></p>
<p><strong>属性</strong>:</p>
<ul>
<li><em>href</em>：创建指向另一个文档的链接</li>
<li><p><em>target(或id)</em>：可以定义文档显示的位置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">定义文档在新窗口中显示：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://penguin858.github.io/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></div><div class="line">my blog.</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><em>name</em>：可以定义一个指向该位置的锚（anchor），可以看成是html页面中的书签，书签不会以任何特殊的方式显示。在之后我们可以建立直接跳转到这个位置的链接。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">命名锚的语法：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span> = <span class="string">"label_name"</span>&gt;</span>锚（显示在页面上的文本）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">在同一个页面创建指向该锚的链接：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"#label_name"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">在其他页面创建指向该锚的链接：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"url#label_name"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>什么是超文本？<br>标记语言的真正威力在于其收集能力，它可以将收集来的文档组合成一个完整的信息库，并且可以将文档库与世界上的其他文档集合链接起来。<br>这样的话，读者不仅可以完全控制文档在屏幕上的显示，还可以通过超链接来控制浏览信息的顺序。这就是 HTML 和 XHTML 中的 “HT” - 超文本（hypertext），就是它将整个 Web 网络连接起来。</p>
<p>超文本的作用<br>超文本的基本特征就是可以超链接文档；你可以指向其他位置，该位置可以在当前的文档中、局域网中的其他文档，也可以在因特网上的任何位置的文档中。这些文档组成了一个杂乱的信息网。目标文档通常与其来源有某些关联，并且丰富了来源；来源中的链接元素则将这种关系传递给浏览者。<br>超链接（hyper text），或者按照标准叫法称为锚（anchor），是使用 &lt;a&gt; 标签标记的，可以用两种方式表示。锚的一种类型是在文档中创建一个热点，当用户激活或选中（通常是使用鼠标）这个热点时，会导致浏览器进行链接。浏览器会自动加载并显示同一文档或其他文档中的某个部分，或触发某些与因特网服务相关的操作，例如发送电子邮件或下载特殊文件等。锚的另一种类型会在文档中创建一个标记，该标记可以被超链接引用。<br>还有一些与超链接相关联的鼠标相关事件。这些事件与 JavaScript 结合使用可以产生一些令人激动的效果。</p>
</blockquote>
<h3 id="4html图像"><a href="#4-html图像" class="headerlink" title="4.html图像"></a>4.html图像</h3><p>html使用 <strong>&lt;img&gt;</strong> 标签来定义图片</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">img</span> src=<span class="string">"文件路径"</span> <span class="attribute">width</span>=<span class="string">"104"</span> height=<span class="string">"142"</span> /&gt;</div></pre></td></tr></table></figure>
<p>src属性指定图片文件的地址，width和height属性指定图片的大小</p>
<p>**注：</p>
<ul>
<li>慎用图片：假如某个html页面包含n个图像，则为了正确显示这个页面，需要加载n+1个文件，而这会影响响应时间。</li>
<li>设置背景图片：body标签具有属性<strong> <em>background</em> </strong>指向背景图片的url**</li>
</ul>
<p><strong>属性</strong>：</p>
<ul>
<li><em>src</em>：指定图像文件的url地址</li>
<li><em>alt</em>：用来定义一串可预备替换的文本。当浏览器无法载入图像的时候，会显示这个替代性的文本（经测验，safari貌似不支持这一功能，能在chrome上显示）</li>
<li><em>width/height</em>：用来指定图片的大小，默认单位是像素</li>
</ul>
<h4 id="关于如何设置图像映射"><a href="#关于如何设置图像映射：" class="headerlink" title="关于如何设置图像映射："></a>关于如何设置图像映射：</h4><p>通过在<strong>&lt;img&gt;</strong>后添加<strong>&lt;map&gt;</strong>和<strong>&lt;area&gt;</strong>，并且将<strong>&lt;img&gt;</strong>中的 <em>usemap</em> 属性设置为<strong>&lt;map&gt;</strong>的 <em>name</em> ，一般来说，还会将&lt;img&gt;的 <em>border</em>设置为0。</p>
<p><strong>&lt;map&gt;</strong>表明映射的开始<br><strong>&lt;area&gt;</strong>表明每个区域<br>属性：</p>
<ul>
<li><em>shape</em>：必须的属性，表明区域的形状（“rect\poly(多边形)\circle\default(未定义)“）</li>
<li><p><em>coords</em>:这一部分要根据shape确定<br>rect：“a,b,c,d”表示左上角和右下角的坐标，其中，左上角的坐标是(0,0)。<br>circle:”a,b,R”表示圆心坐标和半径<br>poly:列出所有顶点的坐标。</p>
</li>
<li><p><em>href和nohref</em>：如果不设置href则应设置<strong>nohref = “nohref”</strong></p>
</li>
<li><em>target</em> ：和<strong>&lt;a&gt;</strong>一样</li>
<li><em>alt</em>：和&lt;img&gt;一样</li>
</ul>
<p>样例:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;img <span class="attr">src="http://pic6.huitu.com/res/20130116/84481_20130116142820494200_1.jpg"</span>  <span class="attr">width="600px"</span> <span class="attr">height</span> = <span class="string">"474px"</span> <span class="attr">alt</span> = <span class="string">"wronganswer"</span> <span class="attr">usemap="#h"/&gt;</span></div><div class="line">&lt;<span class="built_in">map</span> <span class="attr">name="h",id</span> = <span class="string">"h"</span>&gt;</div><div class="line">    &lt;area <span class="attr">shape</span> = <span class="string">"rect"</span> <span class="attr">coords="538,242,581,287"</span> <span class="attr">href</span> = <span class="string">"http://penguin858.github.io"</span> <span class="attr">target="_blank"</span> <span class="attr">alt="down!"&gt;</span></div><div class="line">&lt;/<span class="built_in">map</span>&gt;</div></pre></td></tr></table></figure></p>
<h3 id="5水平线"><a href="#5-水平线" class="headerlink" title="5.水平线"></a>5.水平线</h3><p>html使用 <strong>&lt;hr&gt;</strong> 标签创建水平线，可以用于分隔内容（注意使用时应写成<strong>&lt;hr \&gt;</strong>）</p>
<h3 id="6注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h3><p>html使用标签 <strong>&lt;!—…—&gt;</strong>来表示注释<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在这里写注释 --&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>条件注释</strong>：主要用于IE浏览器，内部包括只有IE浏览器能够执行的HTML标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;</span></div><div class="line">    .... some HTML here ....</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>其他浏览器也可以生成类似的标签。</p>
<h2 id="三html元素"><a href="#三-html元素" class="headerlink" title="(三).html元素"></a>(三).html元素</h2><h3 id="1概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>html元素的意义和html标签很接近，不过<strong>一个html元素包含了从开始标签到结束标签的所有内容</strong></p>
<h3 id="2基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h3><ul>
<li>HTML 元素<strong>以开始标签起始</strong></li>
<li>HTML 元素<strong>以结束标签终止</strong></li>
<li>元素的内容是开始标签与结束标签之间的内容</li>
<li>某些 HTML 元素具有<strong>空内容（empty content）</strong></li>
<li><strong>空元素在开始标签中进行关闭（以开始标签的结束而结束）</strong></li>
<li>大多数 HTML 元素可拥有<strong>属性</strong></li>
</ul>
<h3 id="3嵌套的html元素"><a href="#3-嵌套的html元素" class="headerlink" title="3.嵌套的html元素"></a>3.嵌套的html元素</h3><p>大多数html元素可以嵌套(包含其他的html元素)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述例子中就包含了嵌套的三个html元素</p>
<h3 id="4空元素"><a href="#4-空元素" class="headerlink" title="4.空元素"></a>4.空元素</h3><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。<br>例如<strong>&lt;br&gt;</strong>，表示换行，就是没有关闭标签的空元素。<br>在未来以及其他的一些标记语言中，空元素也需要被关闭，此时可以采用在开始标签中添加斜杠的方法，如<strong>&lt;br/&gt;</strong></p>
<h2 id="四属性"><a href="#四-属性" class="headerlink" title="(四)属性"></a>(四)属性</h2><h3 id="0通用"><a href="#0-通用" class="headerlink" title="0.通用"></a>0.通用</h3><ul>
<li>HTML 元素可以设置属性,属性可以在元素中添加附加信息</li>
<li>属性一般描述于<strong>开始标签</strong></li>
<li>属性总是以名称/值对的形式出现，比如：name=”value”。</li>
<li><strong>html属性多为引用属性值，应该始终被包括在引号内</strong></li>
</ul>
<h3 id="1style"><a href="#1-style" class="headerlink" title="1.style:"></a>1.style:</h3><p>style属性提供了一种改变所有 HTML 元素的样式的通用方法。通过 HTML 样式，能够通过使用 style 属性直接将样式添加到 HTML 元素，或者间接地在独立的样式表中（CSS 文件）进行定义。</p>
<ul>
<li><strong>background-color</strong> 属性为元素定义了背景颜色</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;<span class="selector-tag">body</span> style=<span class="string">"background-color:yellow"</span>&gt;</div><div class="line">&lt;<span class="selector-tag">h2</span> style=<span class="string">"background-color:red"</span>&gt;This is <span class="selector-tag">a</span> heading&lt;/h2&gt;</div><div class="line">&lt;<span class="selector-tag">p</span> style=<span class="string">"background-color:green"</span>&gt;This is <span class="selector-tag">a</span> paragraph.&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li><strong>font-family、color</strong> 以及 <strong>font-size</strong> 属性分别定义元素中文本的字体系列、颜色和字体尺寸：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-family:verdana"</span>&gt;</span>A heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-family:arial;color:red;font-size:20px;"</span>&gt;</span>A paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>text-align</strong> 属性规定了元素中文本的水平对齐方式：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The heading above is aligned to the center of this page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="五文本格式化"><a href="#五-文本格式化" class="headerlink" title="(五)文本格式化"></a>(五)<a href="http://www.w3school.com.cn/html/html_formatting.asp">文本格式化</a></h2><h3 id="1文本格式"><a href="#1-文本格式" class="headerlink" title="1.文本格式"></a>1.文本格式</h3><ul>
<li><strong>&lt;b&gt;</strong>:加粗</li>
<li><strong>&lt;strong&gt;</strong>:加重语气</li>
<li><strong>&lt;big&gt;或&lt;small&gt;</strong>:加大或缩小</li>
<li><strong>&lt;em&gt;</strong>:强调(emphasize)</li>
<li><strong>&lt;i&gt;</strong>:斜体(italic)</li>
<li><strong>&lt;sub&gt;或&lt;sup&gt;</strong>:上标（superscript）或下标（subscript）</li>
<li><strong>&lt;ins&gt;</strong>：插入字</li>
<li><strong>&lt;del&gt;</strong>：删除字</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>&lt;b&gt;</strong></td>
<td>加粗</td>
</tr>
<tr>
<td><strong>&lt;strong&gt;</strong></td>
<td>加重语气</td>
</tr>
<tr>
<td><strong>&lt;big&gt;或=&lt;small&gt;</strong></td>
<td>加大或缩小</td>
</tr>
<tr>
<td> <strong>&lt;em&gt;</strong></td>
<td>强调（emphasize）</td>
</tr>
<tr>
<td> <strong>&lt;i&gt;</strong></td>
<td>斜体(italic)</td>
</tr>
<tr>
<td><strong>&lt;sub&gt;或&lt;sup&gt;</strong></td>
<td>上标（superscript）或下标（subscript）</td>
</tr>
<tr>
<td><strong>&lt;ins&gt;</strong></td>
<td>插入字</td>
</tr>
<tr>
<td><strong>&lt;del&gt;</strong></td>
<td>删除字</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2预格式文本"><a href="#2-预格式文本" class="headerlink" title="2.预格式文本"></a>2.预格式文本</h3><p>可以使用<strong>&lt;pre&gt;</strong>标签来表示提前处理好格式的文本，保留换行和空格</p>
<h3 id="3计算机输出"><a href="#3-计算机输出" class="headerlink" title="3.计算机输出"></a>3.计算机输出</h3><div class="table-container">
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>&lt;code&gt;</strong></td>
<td>定义计算机代码</td>
</tr>
<tr>
<td><strong>&lt;kbd&gt;</strong></td>
<td>表示键盘输入</td>
</tr>
<tr>
<td><strong>&lt;samp&gt;</strong></td>
<td>定义计算机代码样本</td>
</tr>
<tr>
<td><strong>&lt;var&gt;</strong></td>
<td>定义变量</td>
</tr>
<tr>
<td><strong>&lt;pre&gt;</strong></td>
<td>定义预格式文本</td>
</tr>
</tbody>
</table>
</div>
<p>例程：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>Computer code<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Keyboard input<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>Teletype text<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>Sample text<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>Computer variable<span class="tag">&lt;/<span class="name">var</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>注释：<span class="tag">&lt;/<span class="name">p</span>&gt;</span>这些标签常用于显示计算机/编程代码。</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4文字格式标签"><a href="#4-文字格式标签" class="headerlink" title="4.文字格式标签"></a>4.文字格式标签</h3><div class="table-container">
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>&lt;abbr&gt;</strong></td>
<td>定义缩写（有些浏览器在将光标移到缩写上时会显示完整拼写<br>，对缩写进行标记能够为浏览器、翻译系统和搜索引擎提供信息。</td>
</tr>
<tr>
<td><strong>&lt;address&gt;</strong></td>
<td>定义地址（用于联系信息，常渲染为斜体）</td>
</tr>
<tr>
<td><strong>&lt;bdo&gt;</strong></td>
<td>定义文字方向（把参数dir设置为“rlt”可从右到左输出）</td>
</tr>
<tr>
<td><strong>&lt;blockquote&gt;</strong></td>
<td>定义长的引用（常进行缩进处理）</td>
</tr>
<tr>
<td><strong>&lt;q&gt;</strong></td>
<td>定义短的引用语（浏览器常为其包围引号）</td>
</tr>
<tr>
<td><strong>&lt;cite&gt;</strong></td>
<td>定义著作的标题（常显示为斜体）</td>
</tr>
<tr>
<td><strong>&lt;dfn&gt;</strong></td>
<td>定义一个项目。</td>
</tr>
</tbody>
</table>
</div>
<p>例程：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="section">1.&lt;abbr&gt;:</span></div><div class="line">------</div><div class="line"><span class="section">&lt;abbr title="etcetera"&gt;etc.&lt;/abbr&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line"><span class="section">2.&lt;address&gt;:</span></div><div class="line">------</div><div class="line">&lt;address&gt;</div><div class="line">Written by &lt;a href="https://penguin858.github.io"&gt;Xu Zeping&lt;/a&gt;.&lt;br&gt; </div><div class="line">Visit me at:&lt;br&gt;</div><div class="line">xuzeping858@gmail.com&lt;br&gt;</div><div class="line">Peking University&lt;br&gt;</div><div class="line"><span class="section">&lt;/address&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line"><span class="section">3.&lt;bdo&gt;</span></div><div class="line">------</div><div class="line">&lt;bdo dir="rtl"&gt;</div><div class="line">test</div><div class="line"><span class="section">&lt;/bdo&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line"><span class="section">4.&lt;blockquote&gt; / &lt;q&gt;</span></div><div class="line">------</div><div class="line">&lt;blockquote&gt;</div><div class="line">This is long quote.</div><div class="line">&lt;/blockquote&gt;</div><div class="line"></div><div class="line">&lt;q&gt;</div><div class="line">This is short quote.</div><div class="line"><span class="section">&lt;/q&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line"><span class="section">5.&lt;bdo&gt;</span></div><div class="line">------</div><div class="line">&lt;bdo dir="rtl"&gt;</div><div class="line">Here is some test text.</div><div class="line"><span class="section">&lt;/bdo&gt;</span></div><div class="line">------</div></pre></td></tr></table></figure></p>
<h2 id="六html结构与布局"><a href="#六-HTML结构与布局" class="headerlink" title="(六)HTML结构与布局"></a>(六)HTML结构与布局</h2><h3 id="1表格"><a href="#1-表格" class="headerlink" title="1.表格"></a>1.表格</h3><p>表格由标签<strong>&lt;table&gt;</strong>定义，每个表格均有若干行(行由标签<strong>&lt;tr&gt;</strong>定义)，每个单元格由<strong>&lt;td&gt;</strong>生成</p>
<p>表头可以通过<strong>&lt;th&gt;</strong>生成（多数情况下会渲染成加粗居中的样式）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Another Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果不定义 <em>border</em>属性，表格将不显示边框</p>
<p>效果：<br><img src="/2017/05/02/html记录/表格效果图.png" alt="表格效果图"></p>
<p><strong>注</strong>：</p>
<ul>
<li>如果希望使用横跨两列／两行的单元格，可以使用<strong>&lt;th&gt;</strong>标签的 <em>colspan</em> 和 <em>rowspan</em> 属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>横跨两列的单元格：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>横跨两行的单元格：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>有些浏览器对空单元格的显示效果不好，这时我们可以通过添加一个空格占位符<strong>&amp;nbsp ;</strong>来解决这一问题</li>
</ul>
<p><a href="http://www.w3school.com.cn/html/html_tables.asp">更多实例</a></p>
<h3 id="2列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><p>列表分为<strong>无序列表、有序列表、定义列表</strong></p>
<p>无序列表的项目使用一个小黑点进行标记。<br>无序列表使用<strong>&lt;ul&gt;</strong>(unordered list)标签声明，每个列表项采用<strong>&lt;li&gt;</strong>声明。（类似于markdown的<strong>‘-‘</strong>的效果）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>penguin<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>elephant<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有序列表的项目使用数字进行标记。<br>有序列表使用<strong>&lt;ol&gt;</strong>(ordered list)标签声明，每个列表项采用<strong>&lt;li&gt;</strong>（和无序列表一样）声明。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>penguin<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>elephant<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定义列表是项目和注解的组合。<br>定义列表使用<strong>&lt;dl&gt;</strong>(definition list)标签声明，每个自定义列表项以<strong>&amp;dt&gt;</strong>声明，列表项的定义以<strong>&lt;dd&gt;</strong>声明</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">dl</span>&gt;</div><div class="line">&lt;<span class="built_in">dt</span>&gt;penguin&lt;/<span class="built_in">dt</span>&gt;</div><div class="line">&lt;<span class="built_in">dd</span>&gt;sea birds&lt;/<span class="built_in">dd</span>&gt;</div><div class="line">&lt;<span class="built_in">dt</span>&gt;elephant&lt;/<span class="built_in">dt</span>&gt;</div><div class="line">&lt;<span class="built_in">dd</span>&gt;long teeth <span class="keyword">and</span> nose&lt;/<span class="built_in">dd</span>&gt;</div><div class="line">&lt;/<span class="built_in">dl</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>具体效果：</strong><br><img src="/2017/05/02/html记录/列表效果图.png" alt="列表效果图"></p>
<p>附上实现上图的html代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> 无序列表 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> 有序列表 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> 定义列表 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> penguin <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> elephant <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> penguin <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> elephant <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span> penguin <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span> sea birds <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span> elephant <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span> long teeth and nose <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="3块"><a href="#3-块" class="headerlink" title="3.块"></a>3.块</h3><p>大多数html元素分属于 <em>块级元素</em> 与 <em>内连元素</em> 之一。</p>
<p>块级元素在显示的时候通常会以新行开始和结束。</p>
<p><strong>&lt;div&gt;</strong>标签是块级元素，可用于组合其他html元素。如果和CSS一同使用，可用于对大的内容块设置样式属性。还可用于文档布局。</p>
<p><strong>&lt;span&gt;</strong>标签是内连元素，可用于组合行内元素对其设置属性。</p>
<h3 id="4使用ltdivgt为网站布局"><a href="#4-使用-lt-div-gt-为网站布局" class="headerlink" title="4.使用&lt;div&gt;为网站布局"></a>4.使用&lt;div&gt;为网站布局</h3><p>例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"container"</span> <span class="attr">style</span> = <span class="string">"width:800px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"header"</span> <span class="attr">style</span> = <span class="string">"background-color:bisque;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://penguin858.github.io"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到我的网站！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"menu"</span> <span class="attr">style</span> = <span class="string">"background-color:darkseagreen;height:474px;width:200px;float:left;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>内容：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        html<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        MIPS<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        hexo</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"content"</span> <span class="attr">style</span> = <span class="string">"width:600px;height:474px;float:left;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pic6.huitu.com/res/20130116/84481_20130116142820494200_1.jpg"</span> </span></div><div class="line">        <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">height</span> = <span class="string">"474px"</span> <span class="attr">alt</span> = <span class="string">"wronganswer"</span> <span class="attr">usemap</span>=<span class="string">"#h"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"h"</span>,<span class="attr">id</span> = <span class="string">"h"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span> = <span class="string">"rect"</span> <span class="attr">coords</span> = <span class="string">"0,0,50,50"</span> <span class="attr">href</span> = <span class="string">"ImageDemo.html"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span> = <span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"538,242,581,287"</span> <span class="attr">href</span> = <span class="string">"http://penguin858.github.io"</span> </span></div><div class="line">            <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">alt</span>=<span class="string">"down!"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"footer"</span> <span class="attr">style</span> = <span class="string">"background-color:thistle;clear:both;text-align:center;"</span>&gt;</span></div><div class="line">        Copyright @ penguin858</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="/2017/05/02/html记录/布局效果图.png" alt="布局效果图"></p>
<p><strong>注：</strong><br>使用 CSS 最大的好处是，如果把 CSS 代码存放到外部样式表中，那么站点会更易于维护。通过编辑单一的文件，就可以改变所有页面的布局。</p>
<h3 id="5html框架"><a href="#5-HTML框架" class="headerlink" title="5.HTML框架"></a>5.HTML框架</h3><p>通过使用html框架，可以在一个浏览器窗口显示不止一个界面。每一份html文档都是一个框架，并且每一个框架都独立于其他的框架。</p>
<p>使用框架的坏处：</p>
<ul>
<li>开发人员必须同时跟踪多个不同的html文档</li>
<li>很难打印整个页面。</li>
</ul>
<h2 id="七html-css"><a href="#七-HTML-CSS" class="headerlink" title="(七)HTML CSS"></a>(七)HTML CSS</h2><p>待补充。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MIPS汇编语言程序设计]]></title>
      <url>http://penguin858.com/2017/03/26/MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#零-写在前面">零、写在前面</a></li>
<li><a href="#一-用系统功能调用实现简单输入输出">一、用系统功能调用实现简单输入输出</a><ul>
<li><a href="#题目">题目：</a></li>
<li><a href="#预备知识">预备知识：</a><ul>
<li><a href="#一系统调用">（一）系统调用</a></li>
<li><a href="#二汇编指令">（二）汇编指令</a></li>
</ul>
</li>
<li><a href="#问题代码">问题代码</a></li>
</ul>
</li>
<li><a href="#二-字符串查找比较">二、字符串查找比较</a><ul>
<li><a href="#题目-1">题目：</a></li>
<li><a href="#问题代码-1">问题代码</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2 id="零-写在前面"><a href="#零、写在前面" class="headerlink" title="零、写在前面"></a>零、写在前面</h2><p>作为RISC指令系统的代表之一，MIPS以其简洁、规整，极适合作为教学语言使用。我们以MARS集成开发环境作为工具，系统地学习汇编语言程序设计，并了解可执行文件的文件结构。<br><a href="http://courses.missouristate.edu/KenVollmar/Mars/index.htm">MARS开发环境下载地址</a>(只需要在操作系统上安装JDK即可使用)</p>
<a id="more"></a>
<h2 id="一-用系统功能调用实现简单输入输出"><a href="#一、用系统功能调用实现简单输入输出" class="headerlink" title="一、用系统功能调用实现简单输入输出"></a>一、用系统功能调用实现简单输入输出</h2><h3 id="题目"><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><blockquote>
<p>利用系统功能调用从键盘输入，转换后在屏幕上显示，具体要求如下：<br>(1) 如果输入的是字母（A~Z，区分大小写）或数字（0~9），则将其转换成对应的英文单词后在屏幕上显示，对应关系见下表<br>(2) 若输入的不是字母或数字，则在屏幕上输出字符“*”，<br>(3) 每输入一个字符，即时转换并在屏幕上显示，<br>(4) 支持反复输入，直到按“?”键结束程序。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alpha</td>
<td>Bravo</td>
<td>China</td>
<td>Delta</td>
<td>Echo</td>
<td>Foxtrot</td>
<td>Golf</td>
<td></td>
</tr>
<tr>
<td>H</td>
<td>I</td>
<td>J</td>
<td>K</td>
<td>L</td>
<td>M</td>
<td>N</td>
<td></td>
</tr>
<tr>
<td>Hotel</td>
<td>India</td>
<td>Juliet</td>
<td>Kilo</td>
<td>Lima</td>
<td>Mary</td>
<td>November</td>
<td></td>
</tr>
<tr>
<td>O</td>
<td>P</td>
<td>Q</td>
<td>R</td>
<td>S</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Oscar</td>
<td>Paper</td>
<td>Quebec</td>
<td>Research</td>
<td>Sierra</td>
<td>Tango</td>
<td></td>
</tr>
<tr>
<td>U</td>
<td>V</td>
<td>W</td>
<td>X</td>
<td>Y</td>
<td>Z</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Uniform</td>
<td>Victor</td>
<td>Whisky</td>
<td>X-ray</td>
<td>Yankee</td>
<td>Zulu</td>
<td></td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>b</td>
<td>c</td>
<td>d</td>
<td>e</td>
<td>f</td>
<td>g</td>
<td></td>
</tr>
<tr>
<td>alpha</td>
<td>bravo</td>
<td>china</td>
<td>delta</td>
<td>echo</td>
<td>foxtrot</td>
<td>golf</td>
<td></td>
</tr>
<tr>
<td>h</td>
<td>i</td>
<td>j</td>
<td>k</td>
<td>l</td>
<td>m</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>hotel</td>
<td>india</td>
<td>juliet</td>
<td>kilo</td>
<td>lima</td>
<td>mary</td>
<td>november</td>
<td></td>
</tr>
<tr>
<td>o</td>
<td>p</td>
<td>q</td>
<td>r</td>
<td>s</td>
<td>t</td>
<td></td>
</tr>
<tr>
<td>oscar</td>
<td>paper</td>
<td>quebec</td>
<td>research</td>
<td>sierra</td>
<td>tango</td>
<td></td>
</tr>
<tr>
<td>u</td>
<td>v</td>
<td>w</td>
<td>x</td>
<td>y</td>
<td>z</td>
<td></td>
<td></td>
</tr>
<tr>
<td>uniform</td>
<td>victor</td>
<td>whisky</td>
<td>x-ray</td>
<td>yankee</td>
<td>zulu</td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>First</td>
<td>Second</td>
<td>Third</td>
<td>Fourth</td>
<td>Fifth</td>
<td>Sixth</td>
<td>Seventh</td>
<td>Eighth</td>
<td>Ninth</td>
<td>zero</td>
<td></td>
</tr>
</tbody>
</table>
</div>
</blockquote>
<h3 id="预备知识"><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h3><h4 id="一系统调用"><a href="#（一）系统调用" class="headerlink" title="（一）系统调用"></a>（一）系统调用</h4><p>系统调用是操作系统提供给程序员的一套服务。MARS集成开发环境中搭载了SPIM软件仿真器。<br>SPIM通过系统调用(syscall)指令提供了一小组类似操作系统的服务，其通用的模式是加载系统调用代码到寄存器$v0，然后调用syscall指令执行相应的系统调用。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">li</span> <span class="variable">$v0</span>, 10 # system call code <span class="keyword">for</span> <span class="keyword">exit</span></div><div class="line">syscall</div></pre></td></tr></table></figure></p>
<h4 id="二汇编指令"><a href="#（二）汇编指令" class="headerlink" title="（二）汇编指令"></a>（二）汇编指令</h4><p>SPIM中可以通过<code>.data</code>和<code>.text</code>分别声明数据段和代码段，还有一系列的声明指令，十分方便</p>
<h3 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h3><p>本题主要考察利用转移指令形成条件判断。<br>这一问题的代码如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第一题：用系统功能调用实现简单输入输出</span></div><div class="line"><span class="comment"># 利用系统功能调用从键盘输入，转换后在屏幕上显示</span></div><div class="line"></div><div class="line">                <span class="meta">.data</span></div><div class="line"><span class="symbol">                </span></div><div class="line">up_char:        .asciiz</div><div class="line">                <span class="string">"Alpha "</span>,<span class="string">"Bravo "</span>,<span class="string">"China "</span>,<span class="string">"Delta "</span>,<span class="string">"Echo "</span>,<span class="string">"Foxtrot "</span>,</div><div class="line">                <span class="string">"Golf "</span>,<span class="string">"Hotel "</span>,<span class="string">"India "</span>,<span class="string">"Juliet "</span>,<span class="string">"Kilo "</span>,<span class="string">"Lima "</span>,</div><div class="line">                <span class="string">"Mary "</span>,<span class="string">"November "</span>,<span class="string">"Oscar "</span>,<span class="string">"Paper "</span>,<span class="string">"Quebec "</span>,<span class="string">"Research "</span>,</div><div class="line">                <span class="string">"Sierra "</span>,<span class="string">"Tango "</span>,<span class="string">"Uniform "</span>,<span class="string">"Victor "</span>,<span class="string">"Whisky "</span>,<span class="string">"X-ray "</span>,</div><div class="line">                <span class="string">"Yankee "</span>,<span class="string">"Zulu "</span></div><div class="line"><span class="symbol">low_char:</span>       .asciiz</div><div class="line">                <span class="string">"alpha "</span>,<span class="string">"bravo "</span>,<span class="string">"china "</span>,<span class="string">"delta "</span>,<span class="string">"echo "</span>,<span class="string">"foxtrot "</span>,</div><div class="line">                <span class="string">"golf "</span>,<span class="string">"hotel "</span>,<span class="string">"india "</span>,<span class="string">"juliet "</span>,<span class="string">"kilo "</span>,<span class="string">"lima "</span>,</div><div class="line">                <span class="string">"mary "</span>,<span class="string">"november "</span>,<span class="string">"oscar "</span>,<span class="string">"paper "</span>,<span class="string">"quebec "</span>,<span class="string">"research "</span>,</div><div class="line">                <span class="string">"sierra "</span>,<span class="string">"tango "</span>,<span class="string">"uniform "</span>,<span class="string">"victor "</span>,<span class="string">"whisky "</span>,<span class="string">"x-ray "</span>,</div><div class="line">                <span class="string">"yankee "</span>,<span class="string">"zulu "</span></div><div class="line"><span class="symbol">number:</span> .asciiz</div><div class="line">                <span class="string">"zero "</span>, <span class="string">"First "</span>, <span class="string">"Second "</span>, <span class="string">"Third "</span>, <span class="string">"Fourth "</span>,</div><div class="line">                <span class="string">"Fifth "</span>, <span class="string">"Sixth "</span>, <span class="string">"Seventh "</span>,<span class="string">"Eighth "</span>,<span class="string">"Ninth "</span></div><div class="line"><span class="symbol">c_off:</span>          <span class="meta">.word</span></div><div class="line">                <span class="number">0</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">34</span>,<span class="number">43</span>,<span class="number">49</span>,<span class="number">56</span>,<span class="number">63</span>,<span class="number">71</span>,</div><div class="line">                <span class="number">77</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">106</span>,<span class="number">113</span>,<span class="number">121</span>,<span class="number">131</span>,</div><div class="line">                <span class="number">139</span>,<span class="number">146</span>,<span class="number">155</span>,<span class="number">163</span>,<span class="number">171</span>,<span class="number">178</span>,<span class="number">186</span></div><div class="line"><span class="symbol">n_off:</span>          <span class="meta">.word</span></div><div class="line">                <span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">43</span>,<span class="number">50</span>,<span class="number">59</span>,<span class="number">67</span></div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="meta">.text</span></div><div class="line">                </div><div class="line">                .globl main</div><div class="line"><span class="symbol">main:</span>           li $<span class="built_in">v0</span> <span class="number">12</span></div><div class="line">                <span class="keyword">syscall </span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">63</span> <span class="comment">#'?'</span></div><div class="line">                <span class="keyword">beqz </span>$<span class="built_in">t0</span>, exit</div><div class="line">                </div><div class="line">                <span class="comment"># other?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">48</span> <span class="comment"># '0'</span></div><div class="line">                <span class="keyword">blez </span>$<span class="built_in">t0</span>, other</div><div class="line">                </div><div class="line">                <span class="comment"># number?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t1</span>, $<span class="built_in">v0</span>, <span class="number">57</span> <span class="comment"># '9'</span></div><div class="line">                <span class="keyword">blez </span>$<span class="built_in">t1</span>, num</div><div class="line">                </div><div class="line">                <span class="comment"># low?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">122</span> <span class="comment"># 'z'</span></div><div class="line">                <span class="keyword">bgtz </span>$<span class="built_in">t0</span>, other</div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">97</span> <span class="comment"># 'a'</span></div><div class="line">                <span class="keyword">bgez </span>$<span class="built_in">t0</span>, l_char</div><div class="line">                </div><div class="line">                <span class="comment"># up?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">90</span> <span class="comment"># 'Z'</span></div><div class="line">                <span class="keyword">bgtz </span>$<span class="built_in">t0</span>, other</div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">65</span> <span class="comment"># 'A'</span></div><div class="line">                <span class="keyword">bgez </span>$<span class="built_in">t0</span>, u_char</div><div class="line">                </div><div class="line">                <span class="keyword">j </span>other</div><div class="line"><span class="symbol"></span></div><div class="line">u_char:         la $<span class="built_in">a0</span>, c_off</div><div class="line">                <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">2</span></div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                <span class="keyword">lw </span>$<span class="built_in">a0</span>, ($<span class="built_in">a0</span>)</div><div class="line">                la $<span class="built_in">t0</span>, up_char</div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span>main</div><div class="line"><span class="symbol">                                                                                                </span></div><div class="line">l_char:         la $<span class="built_in">a0</span>, c_off</div><div class="line">                <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">2</span></div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                <span class="keyword">lw </span>$<span class="built_in">a0</span>, ($<span class="built_in">a0</span>)</div><div class="line">                la $<span class="built_in">t0</span>, low_char</div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span>main                                                                                          </div><div class="line"><span class="symbol">                                                                                                                                                                                                </span></div><div class="line">num:            la $<span class="built_in">a0</span>, n_off</div><div class="line">                <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">2</span></div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                <span class="keyword">lw </span>$<span class="built_in">a0</span>, ($<span class="built_in">a0</span>)</div><div class="line">                la $<span class="built_in">t0</span>, number</div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span>main</div><div class="line"><span class="symbol"></span></div><div class="line">                </div><div class="line">other:          li $<span class="built_in">a0</span>, <span class="number">42</span> <span class="comment"># *</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">11</span></div><div class="line">                <span class="keyword">syscall </span>        </div><div class="line">                <span class="keyword">j </span>main</div><div class="line"><span class="symbol">                </span></div><div class="line">exit:           li $<span class="built_in">v0</span> <span class="number">10</span></div><div class="line">                <span class="keyword">syscall</span></div></pre></td></tr></table></figure>
<h2 id="二-字符串查找比较"><a href="#二、字符串查找比较" class="headerlink" title="二、字符串查找比较"></a>二、字符串查找比较</h2><h3 id="题目"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h3><blockquote>
<p>利用系统功能调用从键盘输入一个字符串，然后输入单个字符，查找该字符串中是否有该字符（区分大小写）。具体要求如下：<br>(1) 如果找到，则在屏幕上显示：<br>Success! Location: X<br>其中，X为该字符在字符串中第一次出现的位置<br>(2) 如果没找到，则在屏幕上显示：<br>Fail!<br>(3) 输入一个字符串后，可以反复输入希望查询的字符，直到按“?”键结束程序<br>(4) 每个输入字符独占一行，输出查找结果独占一行，位置编码从1开始。<br>提示：为避免歧义，字符串内不包含”?”符号<br>格式示例如下：<br>abcdefgh<br>a<br>Success! Location: 1<br>x<br>Fail!</p>
</blockquote>
<h3 id="问题代码"><a href="#问题代码-1" class="headerlink" title="问题代码"></a>问题代码</h3><p>本体主要考察通过转移指令形成循环。<br>代码如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第二题：字符串查找比较</span></div><div class="line"><span class="comment"># 利用系统功能调用从键盘输入，转换后在屏幕上显示</span></div><div class="line"></div><div class="line">                <span class="meta">.data</span></div><div class="line"><span class="symbol">                </span></div><div class="line">succ:           .asciiz <span class="string">"\r\nSuccess!Location:"</span></div><div class="line"><span class="symbol">newline:</span>        .asciiz <span class="string">"\r\n"</span></div><div class="line"><span class="symbol">fall:</span>           .asciiz <span class="string">"\r\nFail!\r\n"</span></div><div class="line"><span class="symbol">str:</span>            <span class="meta">.space</span> <span class="number">4004</span></div><div class="line"></div><div class="line">                <span class="meta">.text</span></div><div class="line">                </div><div class="line">                .globl main</div><div class="line"><span class="symbol">main:</span>           la $<span class="built_in">a0</span>, str</div><div class="line">                li $<span class="built_in">a1</span>, <span class="number">4003</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">8</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line"><span class="symbol"></span></div><div class="line">judge:          li $<span class="built_in">v0</span>, <span class="number">12</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">63</span> <span class="comment"># '?'</span></div><div class="line">                <span class="keyword">beqz </span>$<span class="built_in">t0</span>, exit</div><div class="line">                la $<span class="built_in">t1</span>, str</div><div class="line"><span class="symbol">                </span></div><div class="line">body:           <span class="keyword">lb </span>$<span class="built_in">t2</span>, ($<span class="built_in">t1</span>)</div><div class="line">                <span class="keyword">beqz </span>$<span class="built_in">t2</span>, fail</div><div class="line">                <span class="keyword">beq </span>$<span class="built_in">t2</span>, $<span class="built_in">v0</span>, suc</div><div class="line">                <span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></div><div class="line">                <span class="keyword">j </span><span class="keyword">body</span></div><div class="line"><span class="symbol">                </span></div><div class="line">fail:           la $<span class="built_in">a0</span>, fall</div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span><span class="keyword">judge</span></div><div class="line"><span class="symbol"></span></div><div class="line">suc:            la $<span class="built_in">t3</span>, str</div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t3</span>, $<span class="built_in">t1</span>, $<span class="built_in">t3</span></div><div class="line">                <span class="keyword">addi </span>$<span class="built_in">t3</span>, $<span class="built_in">t3</span>, <span class="number">1</span></div><div class="line">                la $<span class="built_in">a0</span>, succ</div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">addi </span>$<span class="built_in">a0</span>, $<span class="built_in">t3</span>, <span class="number">0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">1</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                la $<span class="built_in">a0</span>, newline</div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span><span class="keyword">judge</span></div><div class="line"><span class="symbol"></span></div><div class="line"></div><div class="line">exit:           li $<span class="built_in">v0</span>, <span class="number">10</span></div><div class="line">                <span class="keyword">syscall</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> RISC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> MIPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用hexo在github上搭建自己的博客]]></title>
      <url>http://penguin858.com/2017/03/01/%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#零-说在前面">零、说在前面</a></li>
<li><a href="#一-注册github">一、注册github</a></li>
<li><a href="#二-环境配置">二、环境配置</a></li>
<li><a href="#三-生成ssh密钥">三、生成ssh密钥</a></li>
<li><a href="#四-本地配置">四、本地配置</a></li>
<li><a href="#五-将博客部署到github上">五、将博客部署到github上</a></li>
<li><a href="#六-一些其他命令">六、一些其他命令：</a></li>
</ul>
<!-- tocstop -->
<h3 id="零-说在前面"><a href="#零、说在前面" class="headerlink" title="零、说在前面"></a>零、说在前面</h3><p>最近开始学习一些东西，正好在学习这些东西的过程中产生了一些疑问与体会需要整理，便想着应该有一个自己的博客了，而正好github对个人自己搭建博客提供了免费的支持，所以今天便用了一些时间搭建了一个自己的博客，将过程和其中产生的一些问题放在这里，希望能对大家产生帮助</p>
<ul>
<li>搭建平台：Mac OS X</li>
<li>Windows的可以参看这篇文章：<a href="https://zhuanlan.zhihu.com/p/25471760?utm_source=qq&amp;utm_medium=social">教你免费搭建个人博客，Hexo&amp;Github</a>（不过实际上两个平台相差不大）</li>
<li>使用工具：Hexo <a href="https://hexo.io">这里是官方文档</a></li>
</ul>
<a id="more"></a>
<h3 id="一-注册github"><a href="#一、注册github" class="headerlink" title="一、注册github"></a>一、注册github</h3><p><a href="https://github.com">这里</a>是github的官网，注册。<br>然后再个人页面创建一个新的repository，名字命名为<code>yourname.github.io</code>，yourname是自己的用户名。<br><img src="http://upload-images.jianshu.io/upload_images/291600-7cec7b9f28359ea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建"><br>这里创不创建README没有什么影响。</p>
<h3 id="二-环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h3><p>要使用Hexo需要先安装好<br><a href="https://nodejs.org/en/">Node.js</a><br><a href="https://github.com/waylau/git-for-win">Git(这里是一个国外的镜像，方便下载)</a><br>由于我个人在创建之前已经安装好了git，所以跳过初始配置部分，第一次使用的可以参看<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/">廖雪峰的教程</a></p>
<p>然后就可以输入命令安装Hexo了<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-<span class="keyword">cli</span></div></pre></td></tr></table></figure></p>
<p>输入命令后会产生如下信息，可能需要等待一会</p>
<p><img src="https://raw.githubusercontent.com/penguin858/temp_picture/master/Screen%20Shot%202017-03-01%20at%2010.32.44%20AM.png" style="zoom:40%"></p>
<p>到这里我们的环境就已经安装完毕了。</p>
<h3 id="三-生成ssh密钥"><a href="#三、生成ssh密钥" class="headerlink" title="三、生成ssh密钥"></a>三、生成ssh密钥</h3><p>在终端处输入以下命令：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"Github的注册邮箱地址"</span></div></pre></td></tr></table></figure></p>
<p>可以直接不停的敲回车，直到：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Your <span class="keyword">public</span> key <span class="keyword">has</span> been saved <span class="keyword">in</span> &lt;path&gt;.</div></pre></td></tr></table></figure></p>
<p>输入之后就会在本机的某个（我这里是～目录）目录下创建一个隐藏文件夹<code>.ssh</code>，将它打开，其中存有三个文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">id_rsa		id_rsa<span class="selector-class">.pub</span>	known_hosts</div></pre></td></tr></table></figure></p>
<p>打开其中的id_rsa.pub(我机器上的vim是不能解析这个文件的，如果没有打开工具可以使用<a href="https://www.sublimetext.com/3">Sublime Text</a>)，将所有内容复制，然后打开<a href="https://github.com/settings/keys">Settings</a><br>然后：<br>New SSH key ——Title：随便起 —— Key：输入刚才复制的内容—— Add SSH key</p>
<h3 id="四-本地配置"><a href="#四、本地配置" class="headerlink" title="四、本地配置"></a>四、本地配置</h3><p>输入以下命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init <span class="symbol">&lt;folder&gt;</span></div><div class="line"><span class="keyword">cd</span> <span class="symbol">&lt;folder&gt;</span></div></pre></td></tr></table></figure></p>
<p>便会在指定的文件夹创建存放博客的文件。<br>这样初始化好的文件夹自带一个helloworld文件，所以可以直接输入以下命令：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">generate</span> #这里可简写为g</div><div class="line">$ hexo server #启动本地服务器，之后在浏览器处输入http:<span class="comment">//localhost:4000/ 就可以看到网页的样子了。</span></div></pre></td></tr></table></figure>
<h3 id="五-将博客部署到github上"><a href="#五、将博客部署到github上" class="headerlink" title="五、将博客部署到github上"></a>五、将博客部署到github上</h3><p>用Sublime打开文件夹中的<code>_config.yml</code>文件，进行修改：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span>  <span class="comment">#标题</span></div><div class="line"><span class="attr">subtitle:</span>  <span class="comment">#副标题</span></div><div class="line"><span class="attr">description:</span>   <span class="comment">#站点描述，给搜索引擎看的</span></div><div class="line"><span class="attr">author:</span>  <span class="comment">#作者</span></div><div class="line"><span class="attr">language:</span>  <span class="comment">#语言</span></div><div class="line"><span class="attr">timezone:</span> </div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span>  <span class="comment">#网址</span></div><div class="line"><span class="attr">root:</span> / <span class="comment">#根目录</span></div><div class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/ <span class="comment">#文章的链接格式</span></div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="comment"># Directory</span></div><div class="line"><span class="attr">source_dir:</span> source <span class="comment">#源文件目录</span></div><div class="line"><span class="attr">public_dir:</span> public <span class="comment">#生成的网页文件目录</span></div><div class="line"><span class="attr">tag_dir:</span> tags <span class="comment">#标签目录</span></div><div class="line"><span class="attr">archive_dir:</span> archives <span class="comment">#存档目录</span></div><div class="line"><span class="attr">category_dir:</span> categories <span class="comment">#分类目录</span></div><div class="line"><span class="attr">code_dir:</span> downloads/code</div><div class="line"><span class="attr">i18n_dir:</span> :lang</div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="comment"># Writing</span></div><div class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> post</div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span> <span class="comment">#语法高亮</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  tab_replace:</span></div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag</span></div><div class="line"><span class="attr">default_category:</span> uncategorized</div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Server #本地服务器</span></div><div class="line"><span class="attr">port:</span> <span class="number">4000</span> <span class="comment">#端口号</span></div><div class="line"><span class="attr">server_ip:</span> localhost <span class="comment">#IP 地址</span></div><div class="line"><span class="attr">logger:</span> <span class="literal">false</span></div><div class="line"><span class="attr">logger_format:</span> dev</div><div class="line"></div><div class="line"><span class="comment"># Date / Time format</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attr">date_format:</span> YYYY-MM-DD</div><div class="line"><span class="attr">time_format:</span> HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页文章数，设置成 0 禁用分页</span></div><div class="line"><span class="attr">pagination_dir:</span> page</div><div class="line"></div><div class="line"><span class="comment"># Extensions #拓展插件</span></div><div class="line"><span class="attr">theme:</span> landscape</div><div class="line"></div><div class="line"><span class="comment"># Deployment </span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> <span class="comment">#repo的URL</span></div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure></p>
<p>其中，repo的地址可以在这里找到：<br><img src="https://raw.githubusercontent.com/penguin858/temp_picture/master/Screen%20Shot%202017-03-01%20at%201.42.51%20PM.png" alt=""></p>
<p>我自己的参数是这么设置的：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">title</span>: *** </div><div class="line"><span class="attribute">subtitle</span>:  </div><div class="line"><span class="attribute">description</span>:  Try </div><div class="line"><span class="attribute">author</span>: *** </div><div class="line"><span class="attribute">language</span>: zh-CN </div><div class="line"><span class="attribute">timezone</span>: Asia/Shanghai</div><div class="line"></div><div class="line"><span class="less"><span class="attribute">deploy</span>:</span></div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/***/***.github.io.git</span></div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure></p>
<p>然后可以输入以下命令来将网站发布到github：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo deploy <span class="comment">#可简写为d</span></div></pre></td></tr></table></figure></p>
<p>但是我在这一步碰到了问题，我在提交的时候出现了如下错误：<br><img src="https://raw.githubusercontent.com/penguin858/temp_picture/master/Screen%20Shot%202017-03-01%20at%2011.19.21%20AM.png" alt=""></p>
<p>这时可以通过输入以下命令解决：(为什么？)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>然后提交还是出错：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">remote: Anonymous access to ***/***.github.io.git denied.</span></div></pre></td></tr></table></figure></p>
<p>估计应该是ssh密钥没能匹配上，后来我重新设置了一下user.name和user.email就好了。</p>
<h3 id="六-一些其他命令"><a href="#六、一些其他命令：" class="headerlink" title="六、一些其他命令："></a>六、一些其他命令：</h3><p>可以使用new创建新文章：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">new</span> <span class="string">"新文章的名字"</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello!]]></title>
      <url>http://penguin858.com/2017/03/01/Hello!/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>您好，欢迎来到我的博客！</p>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[Hello!]]></title>
      <url>http://penguin858.com/Hello!%20copy.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><html>
<body>

<h1 id="my-first-heading">My First Heading</h1>

<p>My first paragraph.</p>

</body>
</html>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://penguin858.com/about/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>北京某野鸡大学计算机专业大二学生，目前致力于数据库方面研究。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=836330&auto=1&height=66"></iframe>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://penguin858.com/categories/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://penguin858.com/tags/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[contact]]></title>
      <url>http://penguin858.com/contact/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Name: Xu Zeping<br><a href="https://github.com/penguin858">This is my github address</a></p>
<p>Gmail: xuzeping858@gmail.com<br>QQ Email: 1363380773@qq.com</p>
]]></content>
    </entry>
    
  
</search>
