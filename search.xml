<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Deep Learning--MIT PRESS]]></title>
      <url>http://penguin858.com/2019/08/07/Deep-Learning-MIT-PRESS/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#chapter-0-introduction">Chapter 0: Introduction</a><ul>
<li><a href="#1-definition">1. Definition</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h2 id="chapter-0-introduction"><a href="#Chapter-0-Introduction" class="headerlink" title="Chapter 0: Introduction"></a>Chapter 0: Introduction</h2><h3 id="1-definition"><a href="#1-Definition" class="headerlink" title="1. Definition"></a>1. Definition</h3><ol>
<li>Challenge: To solve the tasks that are easy for people to perform but hard to describe. <br><strong>AI deep learning</strong>—— the solution for these more intuitive problems: allow computer to learn from experience and understand the world in terms of a hierarchy of concepts, with each concept defined through its relation to simpler concepts. </li>
<li><strong>Knowledge base approach</strong>: hard-code knowledge about the world in formal language.—— None of these led to a major success.</li>
<li><strong>Machine Learning</strong>: Give AI systems the ability to acquire their own knowledge by extracting patterns from raw data.<br>Example:<strong>Logistic Regression</strong>,<strong>Naive Bayes</strong>.</li>
<li><strong>Representation Learning</strong>: Use machine learning to discover not only the mapping from representation to output but also the representation itself.<br>Example: <strong>Autoencoder</strong></li>
<li><strong>Deep Learning</strong>: It can be very difficult to extract such high-level, abstract features from raw data. Deep Learning solves this central problem in representation learning by introducing representations that are expressed in terms of other, simpler concepts.<br>Example: <strong>Multilayer perceptron(MLP)</strong></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Programming Language Exploration]]></title>
      <url>http://penguin858.com/2019/08/06/Programming-Language-Exploration/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#chapter-0-introduction">Chapter 0: Introduction</a><ul>
<li><a href="#1-indispensable-elements-of-programming-language">1. Indispensable elements of programming language</a></li>
<li><a href="#2-evaluating-programming-languages">2. Evaluating programming languages</a></li>
</ul>
</li>
<li><a href="#chapter-1-javascript">Chapter 1 JavaScript</a><ul>
<li><a href="#1background">1.Background</a></li>
<li><a href="#2hello-js">2.Hello JS</a></li>
<li><a href="#3-the-basics">3. The Basics</a></li>
<li><a href="#4-closures">4. Closures</a></li>
<li><a href="#5-methods">5. Methods</a></li>
<li><a href="#6-prototype">6. Prototype</a></li>
<li><a href="#7-scope">7. Scope</a></li>
<li><a href="#8-callback-and-promises">8. Callback and promises</a></li>
<li><a href="#9-exercise">9. Exercise</a></li>
</ul>
</li>
<li><a href="#chapter-2-coffeescript">Chapter 2 CoffeeScript</a><ul>
<li><a href="#1-background">1. Background</a></li>
<li><a href="#2-hello-coffeescript">2. Hello, CoffeeScript</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h2 id="chapter-0-introduction"><a href="#Chapter-0-Introduction" class="headerlink" title="Chapter 0: Introduction"></a>Chapter 0: Introduction</h2><h3 id="1-indispensable-elements-of-programming-language"><a href="#1-Indispensable-elements-of-programming-language" class="headerlink" title="1. Indispensable elements of programming language"></a>1. Indispensable elements of programming language</h3><ul>
<li>Value: a unit of data</li>
<li>Literal: a representation of a value</li>
<li>Variable: a name that refers to a value</li>
<li>Expression: a combination of literals, variables and operators that is evaluated to produce a value</li>
<li>routine: a unit of code. Some languages called <em>function</em> .</li>
<li>Type: determines a collection of values with some prescribed behaviors.</li>
<li>statement: code that performs an action. <br> Types of statements : <br> 1. declaration statement. <br> 2. expression statement <br> 3. assignment statement <br> 4. invocation statement <br> 5. conditional statement <br> 6. iteration statement <br> 7. disruptive statement</li>
</ul>
<h3 id="2-evaluating-programming-languages"><a href="#2-Evaluating-programming-languages" class="headerlink" title="2. Evaluating programming languages"></a>2. Evaluating programming languages</h3><ul>
<li>Readability</li>
<li>Writability</li>
<li>Expressiveness </li>
<li>Guidance</li>
<li>Efficient compilation , efficient execution, or both.</li>
</ul>
<h2 id="chapter-1-javascript"><a href="#Chapter-1-JavaScript" class="headerlink" title="Chapter 1 JavaScript"></a>Chapter 1 JavaScript</h2><h3 id="1background"><a href="#1-Background" class="headerlink" title="1.Background"></a>1.Background</h3><p>1.&emsp;Strongly influenced by C: </p>
<ul>
<li>curly braces</li>
<li>assignment statement</li>
<li>if, while, for</li>
</ul>
<p>2.&emsp;But JavaScript and C are worlds apart.</p>
<ul>
<li>Function are first-class values: they can be assigned to variables, passed to functions, and returned from functions.</li>
</ul>
<p>3.&emsp;features</p>
<ul>
<li>Weak Typing</li>
<li>Automatic semicolon insertion</li>
</ul>
<h3 id="2hello-js"><a href="#2-Hello-JS" class="headerlink" title="2.Hello JS"></a>2.Hello JS</h3><p>1.&emsp;First programme:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> c = <span class="number">1</span>; c &lt;= <span class="number">40</span>; c++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> b = <span class="number">1</span>; b &lt; c; b++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">1</span>; a &lt; b; a++)&#123;</div><div class="line">            <span class="keyword">if</span>(a * a + b * b === c * c)&#123;</div><div class="line">            	<span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span>, <span class="subst">$&#123;b&#125;</span>, <span class="subst">$&#123;c&#125;</span>`</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Note</strong>: In JavaScript, <code>x === y</code> is true iff x and y have the same value and the same type. <code>x == y</code> is true when the two objects are <em>similar</em> to, rather than equal to, each other(And sometimes behaves unexpectedly).</p>
<p><strong>Note</strong>: <code>${e}</code> interpolates the value of expression e into the string.</p>
<p>2.&emsp;Second programme: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatePermutations</span>(<span class="params">a,n</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</div><div class="line">                <span class="built_in">console</span>.log(a.join(<span class="string">''</span>));</div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</div><div class="line">                        generatePermutations(a, n<span class="number">-1</span>);</div><div class="line">                        <span class="keyword">const</span> j = n % <span class="number">2</span> === <span class="number">0</span> ? <span class="number">0</span> : i;</div><div class="line">                        [a[j],a[n]] = [a[n], a[j]];</div><div class="line">                &#125;</div><div class="line">                generatePermutations(a, n<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(process.argv.length !== <span class="number">3</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'Exactly one argument is required'</span>);</div><div class="line">        process.exit(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> word = process.argv[<span class="number">2</span>];</div><div class="line">generatePermutations(word.split(<span class="string">''</span>), word.length - <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>Output:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ node --use-strict anagram.js rat</div><div class="line">rat</div><div class="line">art</div><div class="line">tra</div><div class="line">rta</div><div class="line">atr</div><div class="line">tar</div></pre></td></tr></table></figure></p>
<p><strong>Note</strong>: This is an example of how to access the command line. JavaScript does not define the way, so the user have to choose a specific implementation. This is an example using Node.js.<br>Node’s built-in variable <code>process.argv</code> contains the command line tokens invoking our script(excluding options).<br>In this case, <code>process.argv === [&#39;node&#39;, &#39;anagrams.js&#39;, &#39;rat&#39;]</code>.</p>
<p><strong>Note</strong>: This algorithm is called <em>Heap’s algorithm</em>, which can generate all permutations of n objects.</p>
<p><strong>Note</strong>: JavaScript strings are <em>immutable</em> : you cannot make any changes. So in this programme, we <code>split</code> the string into an array of its characters, as array is mutable. Then use <code>join</code> to get a new string for output.</p>
<p>3.&emsp;Third programme:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</div><div class="line"><span class="keyword">const</span> reader = readline.createInterface(process.stdin, <span class="literal">null</span>);</div><div class="line"><span class="keyword">const</span> counts = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line">reader.on(<span class="string">'line'</span>, line =&gt; &#123;</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> word <span class="keyword">of</span> line.toLowerCase().match(<span class="regexp">/[a-z']+/g</span>) || [])&#123;</div><div class="line">                counts.set(word, (counts.get(word) || <span class="number">0</span>) + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">&#125;).on(<span class="string">'close'</span>, () =&gt; &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> word <span class="keyword">of</span> <span class="built_in">Array</span>.from(counts.keys()).sort())&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;word&#125;</span> <span class="subst">$&#123;counts.get(word)&#125;</span>`</span>);</div><div class="line">        &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Output is too long to show here.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node --use-strict wordcount.js &lt; 171025_03.txt</div></pre></td></tr></table></figure></p>
<p><strong>Note</strong>: This example uses Node’s built-in <code>readline</code> module. The script will write out each word and its count in sorted order.</p>
<h3 id="3-the-basics"><a href="#3-The-Basics" class="headerlink" title="3. The Basics"></a>3. The Basics</h3><p><strong>Note</strong>: A JavaScript program is made up of scripts and modules, each containing a sequence of statements and function declarations.</p>
<p><strong>Note</strong>: The value in JavaScript have one of exactly 7 types:</p>
<ul>
<li>undefined</li>
<li>null</li>
<li><strong>Boolean</strong>, including true and false</li>
<li><strong>Number</strong>, the type of all numbers, including numbers, Infinity, -Infinity, NaN(Not a Number)</li>
<li><strong>String</strong>: UTF-16.</li>
<li><strong>Symbol</strong></li>
<li><strong>Object</strong></li>
</ul>
<p>The first six types are <strong>primitive types</strong>; Object is a <strong>reference type</strong>.<br>Values of a primitive type are written directly inside the variable boxes, but object values are actually <strong>references</strong> to entities holding the object properties. This is an example.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = &#123;<span class="attr">x</span>:<span class="number">3</span>, <span class="attr">y</span> : <span class="number">5</span>&#125;</div><div class="line">&gt; &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">5</span>&#125;</div><div class="line">b = a</div><div class="line">&gt; &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">5</span>&#125;</div><div class="line">b.x = <span class="number">5</span></div><div class="line">&gt; <span class="number">5</span></div><div class="line">a</div><div class="line">&gt; &#123;<span class="attr">x</span>: <span class="number">5</span>, <span class="attr">y</span>: <span class="number">5</span>&#125;</div></pre></td></tr></table></figure>
<p>If you want to copy an object, iterate through the properties of an object and assign their values to properties in the copy. For array, it provides <code>slice</code> method to do that.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&gt; (<span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = a.slice()</div><div class="line">&gt; (<span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">a[<span class="number">0</span>] = <span class="number">2</span></div><div class="line">&gt; <span class="number">2</span></div><div class="line">b</div><div class="line">&gt; (<span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<p><strong>Note</strong>: JavaScript is a <strong>weakly-typed language</strong>. When programs need some specific type of value:</p>
<ul>
<li>Boolean: 0, null, undefined, false, NaN and the empty string act as false. Other value act as true.</li>
<li>String: undefined acts as “undefined”, null acts as “null”, false acts as “false”, 3 acts as “3”, and so on. In fact, to use an object x in a string context, JavaScript evaluates x.toString().</li>
<li>Number: undefined acts as NaN, null as 0, false as 0, true as 1, and strings act as the number they “look like” or NaN. In fact, to use an object x in a number context, JavaScript evaluates x.valueOf().</li>
</ul>
<p><strong>Note</strong>: JavaScript gives us a few options for specifying function values, including the arrow(=&gt;), the construct <em>function (params) {body}</em>, and the function declaration. Function can be called by the name, the variable to which the function value was assigned, or even <strong>anonymously</strong>. Functions that accept functions as parameters or return functions are called <strong>higher-order functions</strong>. Higher-order functions facilitate a style of coding — called <strong>functional programming</strong> — in which function composition replaces assignment statements and explicit loops.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line">  </div><div class="line"><span class="comment">// Function values can use '=&gt;' or 'function'</span></div><div class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</div><div class="line"><span class="keyword">const</span> odd = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Math</span>.abs(x % <span class="number">2</span>) === <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> lessThanTen = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x &lt; <span class="number">10</span>&#125;;</div><div class="line"><span class="keyword">const</span> twice = <span class="function">(<span class="params">f,x</span>) =&gt;</span> f(f(x));</div><div class="line"></div><div class="line"><span class="comment">// An anonymous function call</span></div><div class="line">assert((<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">5</span>)(<span class="number">10</span>) === (<span class="number">15</span>));</div><div class="line"></div><div class="line"><span class="comment">// We can pass function values to other functions</span></div><div class="line">assert(twice(square, <span class="number">-3</span>) === <span class="number">81</span>);</div><div class="line">assert(twice(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>, <span class="number">5</span>) === <span class="number">7</span>);</div><div class="line"></div><div class="line"><span class="comment">// We can create and return new functions on the fly</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">f,g</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="params">x</span> =&gt;</span> f(g(x));</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> isOddWhenSquared = compose(odd, square);</div><div class="line">assert(isOddWhenSquared(<span class="number">7</span>));</div><div class="line">assert(!isOddWhenSquared(<span class="number">0</span>));</div><div class="line"></div><div class="line"><span class="comment">// Array functions often take the place of loops</span></div><div class="line"><span class="keyword">const</span> a = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">8</span>];</div><div class="line">assert(!a.every(odd));</div><div class="line">assert(a.some(odd));</div><div class="line">assert(a.every(lessThanTen));</div><div class="line">assert.deepStrictEqual(a.filter(odd), [<span class="number">9</span>, <span class="number">7</span>, <span class="number">-1</span>]);</div><div class="line">assert.deepStrictEqual(a.map(square), [<span class="number">81</span>, <span class="number">49</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">64</span>]);</div></pre></td></tr></table></figure>
<p><strong>Note</strong>: In JavaScript, arguments are fully evaluated before the call and their values are assigned(copied) to the parameters <em>left-to-right</em> . If you pass too many arguments, the extras will be ignored; pass too few and the extra parameters begin as undefined. you can mark your final parameters with … to pack extra arguments into an array, and can also use … on the argument side to unpack an array to pass into multiple parameters.</p>
<p><strong>Note</strong>: Each function call allocates a <strong>frame</strong>, or <strong>activation record</strong>, to hold parameters and <strong>local variables</strong> for this call.</p>
<h3 id="4-closures"><a href="#4-Closures" class="headerlink" title="4. Closures"></a>4. Closures</h3><p><strong>Note</strong>: Variables used but not declared inside the function are called <strong>free variables.</strong>. There are some definitions about the ways to deal with them:</p>
<ul>
<li><strong>Dynamically scoped</strong>: Languages that use caller’s values for free variables.</li>
<li><strong>Statically scoped</strong>: Languages that look outward to textually enclosing regions.</li>
<li><strong>Shallow binding</strong>: System binds the free variables of a passed function after passing.</li>
<li><strong>Deep binding</strong>: System binds the free variables where the function is defined.</li>
</ul>
<p>JavaScript is statically scoped and deep binding.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params">f</span>)</span>&#123;</div><div class="line">        <span class="keyword">const</span> name = <span class="string">'new'</span>;</div><div class="line">        f();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">const</span> name = <span class="string">'old'</span>;</div><div class="line">        <span class="keyword">const</span> printName = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(name);</div><div class="line">        second(printName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">first();</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node tryBinding.js </div><div class="line">old</div></pre></td></tr></table></figure>
<p><strong>Note</strong>: Closures can be used to make generators. If we use a global variable then returns its square would be insecure because other parts of the code could change the global variable.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> nextSquare = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> previous = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                previous++;</div><div class="line">                <span class="keyword">return</span> previous * previous;</div><div class="line">        &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line">assert(nextSquare() === <span class="number">0</span>);</div><div class="line">assert(nextSquare() === <span class="number">1</span>);</div><div class="line">assert(nextSquare() === <span class="number">4</span>);</div></pre></td></tr></table></figure>
<p>It can be changed like this style:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> nextSquare = <span class="function">(<span class="params">(previous</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        previous++;</div><div class="line">        <span class="keyword">return</span> previous * previous;</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line">assert(nextSquare() === <span class="number">0</span>);</div><div class="line">assert(nextSquare() === <span class="number">1</span>);</div><div class="line">assert(nextSquare() === <span class="number">4</span>);</div></pre></td></tr></table></figure>
<h3 id="5-methods"><a href="#5-Methods" class="headerlink" title="5. Methods"></a>5. Methods</h3><p><strong>Note</strong>: When we call a function by property access notation, we sya the function is a <strong>method</strong> and the <strong>object</strong> is the receiver.</p>
<p><strong>Note</strong>: In JavaScript, if we define the method value with the <code>function (params) {body}</code> syntax, the special expression <code>this</code> refers to the receiver. Function defined with <code>(param) =&gt; {body}</code> do not get a special <code>this</code>. There is a shorthand notation of the <code>function</code> syntax:<br>Besides, we should note that <code>this</code> takes in the value of the method’s receiver as <strong>determined at runtime</strong>. This <strong>late binding</strong> can be quite flexible.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">circleExpand</span>(<span class="params">scale</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.radius *= scale;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> circle = &#123;</div><div class="line">	<span class="attr">radius</span>: <span class="number">10</span>,</div><div class="line">	<span class="attr">area</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius&#125;,</div><div class="line">	circumference() &#123;<span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius&#125;,</div><div class="line">	<span class="attr">expand</span>: circleExpand</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(circle.area());</div><div class="line"><span class="built_in">console</span>.log(circle.circumference());</div><div class="line">circle.expand(<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(circle.area());</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ node circle1.js </div><div class="line">314.1592653589793</div><div class="line">62.83185307179586</div><div class="line">1256.6370614359173</div></pre></td></tr></table></figure>
<h3 id="6-prototype"><a href="#6-Prototype" class="headerlink" title="6. Prototype"></a>6. Prototype</h3><p><strong>Note</strong>: If we need to create some similar objects, we need to start from an initial object, which is called <em>Prototype</em> . The newly created objects, we store only those properties whose values differ from those in the prototypal circle.</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> unitCircle = &#123;</div><div class="line">    <span class="attr">x</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">y</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">radius</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">"black"</span>,</div><div class="line">    area() &#123;<span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius&#125;,</div><div class="line">    circumference() &#123;<span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> c1 = <span class="built_in">Object</span>.create(unitCircle);</div><div class="line">c1.x = <span class="number">3</span>;</div><div class="line">c1.color = <span class="string">'green'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> c2 = <span class="built_in">Object</span>.create(unitCircle);</div><div class="line">c2.radius = <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> c3 = <span class="built_in">Object</span>.create(unitCircle);</div><div class="line"></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line">assert(c2.color === <span class="string">"black"</span> &amp;&amp; c2.area() === <span class="number">25</span> * <span class="built_in">Math</span>.PI);</div><div class="line">assert(c3.y === <span class="number">0</span> &amp;&amp; c3.area() === <span class="built_in">Math</span>.PI);</div></pre></td></tr></table></figure>
<p><strong>Note</strong>: JavaScript provides a way to construct each instance of a family of objects that each share a prototype.</p>
<p>Each function in JavaScript has two properties: <code>length</code> and <code>prototype</code>. Actually <code>Object</code> has these properties. There is the definition of <code>Object</code>(the version in vscode):</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Object &#123;</div><div class="line">    <span class="comment">/** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */</span></div><div class="line">    <span class="keyword">constructor</span>: Function;</div><div class="line"></div><div class="line">    /** Returns a string representation of an object. */</div><div class="line">    toString(<span class="params"></span>): string;</div><div class="line"></div><div class="line">    /** Returns a date converted to a string using the current locale. */</div><div class="line">    toLocaleString(<span class="params"></span>): string;</div><div class="line"></div><div class="line">    /** Returns the primitive value of the specified object. */</div><div class="line">    valueOf(<span class="params"></span>): Object;</div><div class="line"></div><div class="line">    /**</div><div class="line">      * Determines whether an object has a property with the specified name.</div><div class="line">      * @param v A property name.</div><div class="line">      */</div><div class="line">    hasOwnProperty(<span class="params">v: PropertyKey</span>): boolean;</div><div class="line"></div><div class="line">    /**</div><div class="line">      * Determines whether an object exists in another object's prototype chain.</div><div class="line">      * @param v Another object whose prototype chain is to be checked.</div><div class="line">      */</div><div class="line">    isPrototypeOf(<span class="params">v: <span class="built_in">Object</span></span>): boolean;</div><div class="line"></div><div class="line">    /**</div><div class="line">      * Determines whether a specified property is enumerable.</div><div class="line">      * @param v A property name.</div><div class="line">      */</div><div class="line">    propertyIsEnumerable(<span class="params">v: PropertyKey</span>): boolean;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We can create an object by calling the function with the operator <code>new</code>. The <code>constructor</code> property will store the function.<br>We can give the object properties and methods through <code>prototype</code>.<br>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">centerX = <span class="number">0</span>, centerY = <span class="number">0</span>, radius = <span class="number">1</span>, color = <span class="string">'black'</span></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = centerX;</div><div class="line">    <span class="keyword">this</span>.y = centerY;</div><div class="line">    <span class="keyword">this</span>.radius = radius;</div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Circle.prototype.area = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Circle.prototype.circumference = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Circle(<span class="number">1</span>,<span class="number">5</span>);</div><div class="line">assert.deepEqual(c, &#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">5</span>, <span class="attr">radius</span>:<span class="number">1</span>, <span class="attr">color</span>: <span class="string">'black'</span>&#125;);</div><div class="line">assert(c.area() === <span class="built_in">Math</span>.PI);</div><div class="line">assert(c.circumference() === <span class="number">2</span> * <span class="built_in">Math</span>.PI);</div><div class="line">assert(<span class="built_in">Object</span>.getPrototypeOf(c) === Circle.prototype);</div><div class="line">assert(c.constructor === Circle);</div><div class="line">assert(<span class="keyword">typeof</span>(c) === <span class="string">'object'</span>);</div></pre></td></tr></table></figure>
<p>There is a shorthand syntax for object. :</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(centerX = 0, centerY = 0, radius = 1, color = 'black')&#123;</div><div class="line">        <span class="keyword">this</span>.x = centerX;</div><div class="line">        <span class="keyword">this</span>.y = centerY;</div><div class="line">        <span class="keyword">this</span>.radius = radius;</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">    &#125;</div><div class="line">    area() &#123;<span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;&#125;</div><div class="line">    circumference()&#123;<span class="keyword">return</span> <span class="number">2</span> * <span class="keyword">this</span>.radius * <span class="built_in">Math</span>.PI;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Circle(<span class="number">1</span>,<span class="number">5</span>);</div><div class="line">assert.deepEqual(c, &#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">5</span>, <span class="attr">radius</span>:<span class="number">1</span>, <span class="attr">color</span>: <span class="string">'black'</span>&#125;);</div><div class="line">assert(c.area() === <span class="built_in">Math</span>.PI);</div><div class="line">assert(c.circumference() === <span class="number">2</span> * <span class="built_in">Math</span>.PI);</div><div class="line">assert(<span class="built_in">Object</span>.getPrototypeOf(c) === Circle.prototype);</div><div class="line">assert(c.constructor === Circle);</div><div class="line">assert(<span class="keyword">typeof</span>(c) === <span class="string">'object'</span>);</div><div class="line">assert(<span class="keyword">typeof</span>(Circle) === <span class="string">'function'</span>);</div></pre></td></tr></table></figure>
<p>Note the last line. It shows that the <code>class</code> word does not create a “class object”, it’s still a function!. The class construct is <em>syntactic sugar</em> , which just makes the standard form easier to read.</p>
<h3 id="7-scope"><a href="#7-Scope" class="headerlink" title="7. Scope"></a>7. Scope</h3><p><strong>Note</strong>: A <em>binding</em> is an association of a name with an entity. The <em>scope of a binding</em> is the region of code where a particular binding is active. JavaScript provide two ways we can introduce bindings: <code>Let</code> and <code>var</code>(<code>const</code> works here like <code>let</code>). <code>Var</code> can scoped to the innermost function, and bindings introduced with <code>let</code> are scoped to the nearest block:</p>
<p>Example:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    assert(a === <span class="literal">undefined</span>); <span class="comment">// the local 'a' is in scope. JavaScript will put all declaration from 'var' to the head of function, and the assignment will not.</span></div><div class="line">    assert(b === <span class="number">2</span>); <span class="comment">// we see the outer 'b'</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// To whole function</span></div><div class="line">        <span class="keyword">let</span> b = <span class="number">200</span>; <span class="comment">// only inside the block</span></div><div class="line">        <span class="keyword">const</span> c = <span class="number">300</span>; <span class="comment">//scoped only inside this block</span></div><div class="line">    &#125;</div><div class="line">    assert(a === <span class="number">100</span>); <span class="comment">// has benn initialized</span></div><div class="line">    assert(b === <span class="number">2</span>); <span class="comment">// outer, because local use let</span></div><div class="line">    assert.throws(<span class="function"><span class="params">()</span> =&gt;</span> c); <span class="comment">// there is no c</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<h3 id="8-callback-and-promises"><a href="#8-Callback-and-promises" class="headerlink" title="8. Callback and promises"></a>8. Callback and promises</h3><p><strong>Note</strong>:</p>
<ul>
<li><strong>synchronous</strong>: when an application stops and waits for external operations to complete.</li>
<li><strong>asynchronous</strong>: if it can continue to do useful work until the long running operation finishes.</li>
</ul>
<p><strong>Note</strong>: An asynchronous architecture consists of code for <em>firing</em> and <em>responding</em> to events.</p>
<p>Example (If you want to run the script, write an html file with <code>&lt;script src=&quot;canvas.js&quot;&gt;&lt;/script&gt;</code> and use browser to open it):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, e =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</div><div class="line">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">    <span class="keyword">let</span> drawing = <span class="literal">false</span>;</div><div class="line">    canvas.style.border = <span class="string">'2px solid purple'</span>;</div><div class="line">    canvas.addEventListener(<span class="string">'mousedown'</span>, e =&gt; &#123;</div><div class="line">        drawing = <span class="literal">true</span>;</div><div class="line">        ctx.moveTo(e.clientX, e.clientY);</div><div class="line">    &#125;);</div><div class="line">    canvas.addEventListener(<span class="string">'mousemove'</span>, e =&gt; &#123;</div><div class="line">        <span class="keyword">if</span>(drawing)&#123;</div><div class="line">            ctx.lineTo(e.clientX,e.clientY);</div><div class="line">            ctx.stroke();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> stopDrawing = <span class="function"><span class="params">e</span> =&gt;</span> &#123;drawing = <span class="literal">false</span>&#125;;</div><div class="line">    canvas.addEventListener(<span class="string">'mouseup'</span>, stopDrawing);</div><div class="line">    canvas.addEventListener(<span class="string">'mouseout'</span>,stopDrawing);</div><div class="line">    <span class="built_in">document</span>.body.appendChild(canvas);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The function passed as the second argument of <code>addEventListener</code> are called <strong>event handlers</strong> or <strong>callbacks</strong>, and the act of adding the listeners to the various objects known to the browser is called <strong>registering</strong> the callback.</p>
<p><strong>Note</strong>: As an alternative to writing asynchronous functions that take callbacks as parameters, you can write functions that return <strong>promises</strong> instead. A JavaScript promise is built from the <code>Promise</code> constructor of the standard library with a single argument, called the <strong>executor</strong>.<br>The executor has two parameters, <code>resolve</code> (success) and <code>reject</code> (failure). You can build up a series of asynchronous calls by chaining promises with <code>then</code> (to capture successful resolutions) or <code>catch</code> (to capture rejections).</p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params">configuration</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Initializing '</span> + configuration);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span>(!configuration)&#123;</div><div class="line">            reject(<span class="string">'Empty configuration'</span>);</div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'the initialized data'</span>), <span class="number">3000</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">initialData</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Processing '</span> + initialData);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'the processed data'</span>), <span class="number">3000</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params">output</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Reporting '</span> + output);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'the reported data'</span>), <span class="number">3000</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">initialize(<span class="string">'the configuration data'</span>)</div><div class="line">.then(<span class="function"><span class="params">text</span> =&gt;</span> process(text))</div><div class="line">.then(<span class="function"><span class="params">value</span> =&gt;</span> report(value))</div><div class="line">.then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Success '</span> + value))</div><div class="line">.catch(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + reason));</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ node promises.js </div><div class="line">Initializing the configuration data</div><div class="line">Processing the initialized data</div><div class="line">Reporting the processed data</div><div class="line">Success the reported data</div></pre></td></tr></table></figure>
<h3 id="9-exercise"><a href="#9-Exercise" class="headerlink" title="9. Exercise"></a>9. Exercise</h3><p>1.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ node </div><div class="line">&gt; <span class="string">"16"</span> == <span class="number">16</span></div><div class="line"><span class="literal">true</span></div><div class="line">&gt; <span class="string">"16"</span> == <span class="number">17</span></div><div class="line"><span class="literal">false</span></div><div class="line">&gt; <span class="string">"16"</span> === <span class="number">16</span></div><div class="line"><span class="literal">false</span></div><div class="line">&gt; <span class="number">16</span> == <span class="string">"0x10"</span></div><div class="line"><span class="literal">true</span></div><div class="line">&gt; <span class="string">"0x10"</span> == <span class="string">"16"</span></div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>Take care of the last example.</p>
<ol>
<li>Find out how to list all of the properties of the global object in your favorite JavaScript environment</li>
</ol>
<p>Answer: In chrome or some browsers, they provide the variable <code>window</code> to store all the information about the webpage. There are some ways to list the properties:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.keys(<span class="built_in">window</span>) <span class="comment">// or</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">window</span>).concat(</div><div class="line">  <span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">window</span>))</div><div class="line">)</div></pre></td></tr></table></figure>
<ol>
<li>Explain the second argument of the array methods: every, some, filter and map.</li>
</ol>
<p>Answer: This argument is an object which the callback’s <code>this</code> refers to.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">3</span>, <span class="number">9</span>, <span class="number">6</span>];</div><div class="line">num = &#123;<span class="attr">s</span> : <span class="number">3</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> n % <span class="keyword">this</span>.s === <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a.every(sum,num));</div></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node arrayEvery.js </div><div class="line"><span class="literal">true</span></div></pre></td></tr></table></figure>
<ol>
<li>What will happen when Each button is pressed for the following script?<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Rookie mistake using var: alerts 10 for every button.</span></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">    <span class="keyword">const</span> button = <span class="built_in">document</span>.createElement(<span class="string">"button"</span>);</div><div class="line">    button.innerHTML = i;</div><div class="line">    button.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;alert(i);&#125;);</div><div class="line">    <span class="built_in">document</span>.body.appendChild(button);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Answer: All the alert will be 10. Because by using var, the binding will work in the whole process. So when the callback is executed, the i has already been 10.<br>Just use let to replace the var, then it will work.</p>
<p>Next question is also an example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = [], b = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])&#123;</div><div class="line">    a[x] = <span class="function"><span class="params">()</span> =&gt;</span> x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> y <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])&#123;</div><div class="line">    b[y] = <span class="function"><span class="params">()</span> =&gt;</span> y;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">1</span>]());</div><div class="line"><span class="built_in">console</span>.log(b[<span class="number">2</span>]());</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ node <span class="built_in">let</span>AndVarInFor.js </div><div class="line">3</div><div class="line">2</div></pre></td></tr></table></figure>
<p>5.Use <code>function*</code> and <code>yield</code> to rewrite the nextSquare program.</p>
<p>Answer:<br>In <code>Function*</code>, <code>yield</code> will return the value. It is another style to write a generator.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nextS</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; <span class="literal">true</span>; i++)&#123;</div><div class="line">        <span class="keyword">yield</span> i * i;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> nextSquare = nextS();</div><div class="line"></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line">assert(nextSquare.next().value === <span class="number">0</span>);</div><div class="line">assert(nextSquare.next().value === <span class="number">1</span>);</div><div class="line">assert(nextSquare.next().value === <span class="number">4</span>);</div></pre></td></tr></table></figure>
<h2 id="chapter-2-coffeescript"><a href="#Chapter-2-CoffeeScript" class="headerlink" title="Chapter 2 CoffeeScript"></a>Chapter 2 CoffeeScript</h2><h3 id="1-background"><a href="#1-Background-1" class="headerlink" title="1. Background"></a>1. Background</h3><p>“Expose the good parts of JavaScript in a simple way.”</p>
<p>The golden rule of CoffeeScript: “It’s just JavaScript”.</p>
<p>It’s an <strong>Expression-oriented Language</strong>.</p>
<h3 id="2-hello-coffeescript"><a href="#2-Hello-CoffeeScript" class="headerlink" title="2. Hello, CoffeeScript"></a>2. Hello, CoffeeScript</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> [<span class="number">1.</span><span class="number">.40</span>]</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> [<span class="number">1.</span>..c]</div><div class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> [<span class="number">1.</span>..b]</div><div class="line">            <span class="built_in">console</span>.log <span class="string">"<span class="subst">#&#123;a&#125;</span>, <span class="subst">#&#123;b&#125;</span>, <span class="subst">#&#123;c&#125;</span>"</span> <span class="keyword">if</span> a * a + b * b <span class="keyword">is</span> c * c</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[bgp概述]]></title>
      <url>http://penguin858.com/2018/11/21/bgp%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#一-bgp协议概述">一、BGP协议概述</a><ul>
<li><a href="#一bgp协议">（一）BGP协议</a></li>
<li><a href="#二bgp基本特性">（二）BGP基本特性</a></li>
<li><a href="#三路由选择算法">（三）路由选择算法</a><ul>
<li><a href="#1距离向量算法distance-vectordv">1.距离向量算法（Distance-Vector，DV）</a><ul>
<li><a href="#1算法内容">（1）算法内容</a></li>
<li><a href="#2无穷计数">（2）无穷计数</a></li>
</ul>
</li>
<li><a href="#2层次路由选择算法">2.层次路由选择算法</a><ul>
<li><a href="#1自治系统asautonomous-system">（1）自治系统AS（Autonomous System）</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#四bgp协议">（四）BGP协议</a><ul>
<li><a href="#1bgp协议功能">1.BGP协议功能</a></li>
<li><a href="#2bgp重要概念">2.bgp重要概念</a></li>
<li><a href="#3bgp重要属性">3.BGP重要属性</a><ul>
<li><a href="#0origin">（0）ORIGIN</a></li>
<li><a href="#1as-path">（1）AS-PATH</a></li>
<li><a href="#2next-hop">（2）NEXT-HOP</a></li>
<li><a href="#3local-pref">（3）LOCAL-PREF</a></li>
<li><a href="#4-multi_exit_discmed可选不可传递属性">（4） MULTI_EXIT_DISC（MED，可选不可传递属性）</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#二-bgp-4-rfc描述">二、BGP-4-rfc描述</a><ul>
<li><a href="#一bgp概述">（一）BGP概述</a></li>
<li><a href="#二routing-information-bases">（二）Routing Information Bases</a></li>
<li><a href="#三信息格式">（三）信息格式</a><ul>
<li><a href="#1bgp报头">1.BGP报头</a></li>
<li><a href="#2open类型报文格式">2.OPEN类型报文格式</a></li>
<li><a href="#3update类型报文格式">3.UPDATE类型报文格式</a></li>
<li><a href="#4keepalive报文格式">4.KEEPALIVE报文格式</a></li>
<li><a href="#5notification报文格式">5.NOTIFICATION报文格式</a></li>
</ul>
</li>
<li><a href="#四路由选择">（四）路由选择</a></li>
</ul>
</li>
<li><a href="#三-代码实现quagga中的bgp协议">三、代码实现——quagga中的BGP协议</a><ul>
<li><a href="#一结构">（一）结构</a><ul>
<li><a href="#1struct-bgp">1.struct bgp</a></li>
<li><a href="#2-路由表存储">2. 路由表存储</a></li>
<li><a href="#3路由表修改">3.路由表修改</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h2 id="一-bgp协议概述"><a href="#一、BGP协议概述" class="headerlink" title="一、BGP协议概述"></a>一、BGP协议概述</h2><h3 id="一bgp协议"><a href="#（一）BGP协议" class="headerlink" title="（一）BGP协议"></a>（一）BGP协议</h3><p>边界网关协议(<em>Border Gateway Protocol,BGP</em>)是现在使用最为广泛的外部网关协议。目前有三个主要的修订版本。现在通用的标准版本为第四版，缩写为<em>BGP-4</em>。由于长时间其标准都没改变，所以一般术语BGP都是直接指版本4的BGP协议。</p>
<h3 id="二bgp基本特性"><a href="#（二）BGP基本特性" class="headerlink" title="（二）BGP基本特性"></a>（二）BGP基本特性</h3><ul>
<li>自治系统之间路由：协议在自治系统层次上提供路由信息，即所有路径都可以作为自治系统的通路。</li>
<li>规定政策性条款：BGP允许发送者和接受者强加一些约束，例如管理员可以通过配置BGP限制哪些路径可以通告到网络外部。</li>
<li>中转路由设施：可以自主的规定网络系统是否允许某个业务流通过本系统转送到另一个自治系统。（中转系统^transit&emsp;system 与残存系统^stub&emsp;system ）</li>
<li>可靠性：使用TCP保证数据传输正确性。</li>
</ul>
<h3 id="三路由选择算法"><a href="#（三）路由选择算法" class="headerlink" title="（三）路由选择算法"></a>（三）路由选择算法</h3><h4 id="1距离向量算法distance-vectordv"><a href="#1-距离向量算法（Distance-Vector，DV）" class="headerlink" title="1.距离向量算法（Distance-Vector，DV）"></a>1.距离向量算法（Distance-Vector，DV）</h4><h5 id="1算法内容"><a href="#（1）算法内容" class="headerlink" title="（1）算法内容"></a>（1）算法内容</h5><p>DV算法有以下特点：</p>
<ul>
<li>分布式：每个节点都要从一个或多个直接相连的邻居接受某些信息，执行计算，然后还要把结果分发给邻居。</li>
<li>迭代的：计算过程要持续到邻居之间无更多信息要交换为止。</li>
<li>异步的：不要求节点同步操作</li>
</ul>
<p>算法由每个节点x维护一个自身的距离向量Dx<br>每个节点x执行以下算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Begin </div><div class="line">	初始化：</div><div class="line">		 对每个N中的节点y 	        </div><div class="line">		 	 Dx(y) = c(x,y) </div><div class="line">		 /* if y is not a neighbor then c(x,y) = max */  	    </div><div class="line">		 对每个y的邻居w</div><div class="line">		    把距离向量Dx= [Dx[y]: y in N]发送给w</div><div class="line">		    </div><div class="line">	while(true): </div><div class="line">	    wait (直到x发现到某个节点w的边权改变或者收到从邻居w发来的距离向量)  </div><div class="line">	    对N中的每个节点y  </div><div class="line">	        Dx(y) = min v&#123;c(x,v) + Dv(y)&#125;  </div><div class="line">	    if 对某个节点y，Dx(y) 发生了改变：</div><div class="line">	        把距离向量Dx = [Dx(y) : y in N]发送给所有邻居</div><div class="line"></div><div class="line">End</div></pre></td></tr></table></figure></p>
<h5 id="2无穷计数"><a href="#（2）无穷计数" class="headerlink" title="（2）无穷计数"></a>（2）无穷计数</h5><p>考虑以下简单例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">          y</div><div class="line">        ／  \</div><div class="line">60&lt;--4 ／    \  1</div><div class="line">      ／  50  \</div><div class="line">     x—————————z</div></pre></td></tr></table></figure>
<p>我们考虑该例子中链路费用改变前后的距离向量：<br>改变前，Dy(x) = 4,Dy(z) = 1, Dz(y) = 1,Dz(x) = 5。链路费用发生改变后，算法检测到该变化，重新计算得到<br>Dy(x) = min{c(y,x)+Dx(x),c(y,z) + Dz(x)} = min{60+0,1+5} = 6<br>然后y把这个距离向量告诉z，计算出Dz(x) = min{50+0,1+6} = 7。类似再传递给x，Dx(y) = 8。<br>也就是说要经过44次迭代才能够得到z发现经由y的路径费用大于50。<br>这种情况下链路费用增加的坏消息传递的很慢，有时这种现象被称为<em>无穷计数</em>(<em>count-to-infinity</em>)。</p>
<p>解决方案：<em>毒性反转</em>（<em>poisoned-reverse</em>）：如果z通过y到大目的地x，则z将跟y说Dz(x)= ∞。这样y在迭代的时候就因为这个“善意的谎言”避免的上述问题。</p>
<h4 id="2层次路由选择算法"><a href="#2-层次路由选择算法" class="headerlink" title="2.层次路由选择算法"></a>2.层次路由选择算法</h4><h5 id="1自治系统asautonomous-system"><a href="#（1）自治系统AS（Autonomous-System）" class="headerlink" title="（1）自治系统AS（Autonomous System）"></a>（1）自治系统AS（Autonomous System）</h5><p>提出原因：</p>
<ul>
<li>规模：当今的公共因特网由数亿台主机组成，在这些主机中存储路由选择信息的开销十分巨大。同时设计路由选择信息的计算、存储以及通信带来的开销将变得无法估计。</li>
<li>管理自治：需要满足网络使用者能够按照自己的愿望运行和管理网络</li>
</ul>
<p>由此我们将路由器组织成为AS。每个AS由一组通常处于相同管理控制下的路由器组成，在同一个AS中的路由器全部运行同样的路由选择算法（这种在一个自治系统内运行的路由选择算法叫做<em>自治系统内部路由选择协议</em>(<em>intra-autonomous system routing protocol</em>)），并且拥有彼此的信息。这个AS内中的一个或多个路由器用来和其他的AS互联，负责向其他AS转发分组，这些路由器被称为<em>网关路由器</em>（<em>gateway router</em>）</p>
<p>为了完成AS之间的通讯，一个AS的网关路由器需要：</p>
<ul>
<li>经过相邻AS可达哪些AS</li>
<li>向AS内的路由器传播这些可达性信息，这样内部路由器可以配置转发表决定将数据转发给哪个网关</li>
</ul>
<p>BGP就是一个完成上述任务的<em>自治系统间路由选择协议</em>（<em>inter-autonomous system routing protocol</em>）</p>
<h3 id="四bgp协议"><a href="#（四）BGP协议" class="headerlink" title="（四）BGP协议"></a>（四）BGP协议</h3><h4 id="1bgp协议功能"><a href="#1-BGP协议功能" class="headerlink" title="1.BGP协议功能"></a>1.BGP协议功能</h4><p>BGP为每个AS提供：</p>
<ul>
<li>从相邻AS处获得所有子网可达性信息</li>
<li>向本AS内部的所有路由器传播这些可达性信息</li>
<li>基于可达性信息和AS策略，决定到达子网的“好”路由</li>
</ul>
<p>BGP让每个子网向因特网中其余的部分通告它的存在，使得他们不被隔离，相互互联。</p>
<h4 id="2bgp重要概念"><a href="#2-bgp重要概念" class="headerlink" title="2.bgp重要概念"></a>2.bgp重要概念</h4><ul>
<li>TCP端口号：默认179</li>
<li><em>BGP对等方</em>（<em>BGP peers</em>）：BGP TCP链接的双方</li>
<li><em>BGP会话</em>（<em>BGP session</em>）：传输BGP报文的TCP链接。其中在两个AS间进行的会话称为<em>外部BGP会话</em>（<em>external BGP session</em>，<em>eBGP</em>），在一个AS内部进行的会话称为<em>内部BGP会话</em>（<em>internal BGP session</em>，<em>iBGP</em>）</li>
<li>BGP协议中的“目的地”：不是某个host，而是CDIR化的前缀（一个子网）</li>
<li><em>自治系统号</em>（<em>Autonomous System Number</em>，<em>ASN</em>）：BGP中用以标识某个AS的全局唯一号码。由ICANN地区注册机构分配。</li>
<li><em>bgp speaker</em>：参与bgp协议的路由器</li>
</ul>
<h4 id="3bgp重要属性"><a href="#3-BGP重要属性" class="headerlink" title="3.BGP重要属性"></a>3.BGP重要属性</h4><p>BGP的属性分为四类：</p>
<ol>
<li>Well-known mandatory（公认必选）</li>
<li>Well-known discretionary（公认自选）.</li>
<li>Optional transitive.（可选可传递）</li>
<li>Optional non-transitive.（可选不可传递）</li>
</ol>
<h5 id="0origin"><a href="#（0）ORIGIN" class="headerlink" title="（0）ORIGIN"></a>（0）ORIGIN</h5><p>该属性属于第一类。在路由器之间建立BGP邻居之后，邻居之间只能相互传递BGP路由表中的路由，在初始状态下，BGP的路由表为空，没有任何路由，要让BGP传递相应的路由，只能先将该路由导入BGP路由表，之后才能在BGP邻居之间传递。默认情况下，任何路由都不会自动进入BGP路由表，只能手工导入或者由其他特殊途径得到，而这一添加路由的方式就记录在<code>ORIGIN</code>属性中。总共有三种方式：</p>
<ul>
<li>从IGP获得（手工导入，指定掩码）</li>
<li>从EGP获得</li>
<li>路由重分布</li>
</ul>
<h5 id="1as-path"><a href="#（1）AS-PATH" class="headerlink" title="（1）AS-PATH"></a>（1）AS-PATH</h5><p>该属性属于第一类。它包含了通告已经经过的AS信息。BGP的路由可能会从一个AS发往另外一个AS，从而穿越多个AS。但是由于运行BGP的网络会是一个很大的网络，路由从一个AS被发出，可能在经过转发之后，又回到了最初的AS之中，最终形成路由环路（上述已经分析过这样的环路形成的后果），所以出于防止环路的目的考虑，BGP协议要求在<code>AS-PATH</code>属性中记录这个通告所经过的AS的ASN。注意，BGP只有在将路由发给eBGP时，才会在AS-path中添加自己的ASN，而在发给iBGP时，是不会添加ASN的，因为iBGP邻居在同一个AS中，即使要添加，ASN全是一样的，所以没有必要。</p>
<h5 id="2next-hop"><a href="#（2）NEXT-HOP" class="headerlink" title="（2）NEXT-HOP"></a>（2）NEXT-HOP</h5><p>该属性也属于第一类。属性的含义为BGP将数据包发往目的地的下一跳，而BGP路由的下一跳，就是BGP建立邻居时的地址，也是BGP之间建立TCP连接所使用的地址。因为这个地址可以是路由器上任意接口的地址，是要能通信即可（其连通性由IGP提供保证），所以BGP在将数据包发往下一跳时，通常需要采用递归查询在IGP路由表中查询该下一跳地址。默认情况下，一台BGP路由器将路由传递给eBGP邻居时，会将Next-hop属性改为自己的地址，也就是和对方建立邻居<br>所使用的地址，而在将路由传递给iBGP邻居时，不会改变Next-hop属性。</p>
<p>对于将路由传递给BGP邻居时，是否改变Next-hop属性的功能，可以自由关闭或启用。</p>
<p>BGP路由表中由本地产生路由，所以本地发起路由的Next-hop属性都为0.0.0.0。</p>
<h5 id="3local-pref"><a href="#（3）LOCAL-PREF" class="headerlink" title="（3）LOCAL-PREF"></a>（3）LOCAL-PREF</h5><p>Local_Pref称为本地优先级，其中的（Local）本地就是指本AS，或AS内的意思，所以可以想象得出，<br>Local_Pref属性的传递范围，只在同一个AS内有效，一条路由的Local_Pref属性只能在同一AS内部传递，出了<br>AS后就会被还原成默认值。</p>
<p>Local_Pref属性在BGP邻居之间是自动传递的，只有在将路由发给iBGP时才会传递，而在发给eBGP时，是没有<br>Local_Pref值的，一条路由的Local_Pref属性在一个AS内的所有BGP路由器上是完全相同的。Local_Pref的默<br>认值为100，由此可以看出，一条路由在AS内的所有路由器上默认值为100。</p>
<p>本地优先级属性是用于区分到同一目的地的各个路由优先程度的。本地优先级越高，路由优先级越高。默认值<br>为100。</p>
<p>当BGP路由表中到达同一目的地存在多条路径时，会比较Local_Pref值的大小，Local_Pref值大的会被选为最<br>优路径。</p>
<p>Local_Pref值可以被随意修改，修改后将在整个AS内传递，所以推荐使用Local_Pref属性来控制一个AS的路由<br>器去往目的地在其它AS的路径</p>
<h5 id="4-multi_exit_discmed可选不可传递属性"><a href="#（4）-MULTI-EXIT-DISC（MED，可选不可传递属性）" class="headerlink" title="（4） MULTI_EXIT_DISC（MED，可选不可传递属性）"></a>（4） MULTI_EXIT_DISC（MED，可选不可传递属性）</h5><p>MED就是BGP路由中的metric，是被设计用来影响在多个下一跳都为eBGP邻居时，如何选择最优路径，因为在多<br>个下一跳都为iBGP时，是建议使用修改Local_Pref属性来影响选路的，而多个下一跳都为eBGP时，则使用MED。<br>MED是BGP路由的metric，所以多条路径中拥有最小MED值的路径会被优先使用。MED默认值为0。</p>
<p>Local_Pref属性只在同一个AS内部传递，而MED只能在AS之间传递，只有在将路由发给eBGP邻居时，才会传递<br>MED，在发给iBGP时，是不会传递MED的。当一条路由被设置MED值后传递给eBGP邻居，在eBGP邻居收到后，如<br>果将该路由继续传递给iBGP邻居，那么这个值会被还原为默认值0，也就是说同一个AS内，所有发给iBGP邻居<br>的路由的MED值都为0，这是为了让所有AS内部路由器都能够拥有相同的选路结果</p>
<p>MED值也是可以随意修改的。</p>
<h2 id="二-bgp-4-rfc描述"><a href="#二、BGP-4-rfc描述" class="headerlink" title="二、BGP-4-rfc描述"></a>二、BGP-4-rfc描述</h2><h3 id="一bgp概述"><a href="#（一）BGP概述" class="headerlink" title="（一）BGP概述"></a>（一）BGP概述</h3><p>BGP协议是建立在以前的EGP协议的经验之上的。BGP协议的作用就是在BGP系统之间进行可达性信息的交换。这些可达性信息可以绘制AS之间的联通关系，并且避免路由循环，从而让AS能够在自己的层次上执行相应的协议。<br>这些路由信息只能是基于目的地的转发形式（即路由器转发一个包的方式仅仅根据其ip数据包的包头信息确定）。<br>BGP-4协议扩展了CIDR，包括IP前缀对应的子网信息。<br>BGP使用TCP作为传输协议。TCP链接建立在两个AS之间。<br>初始数据流是是根据Adj-Ribs-Out确定的BGP路由表，数据的更新以路由表更新的形式发送出来，不过协议并不要求周期性的刷新路由表。<br>AS需要周期性的发送<code>KEEPALIVE</code>信息来确保链接。<code>NOTIFICATION</code>消息用来响应错误或用在特定的条件下。<br>BGP协议由两部分组成：EBGP（外部路由器之前）和IBGP（内部路由器之间）</p>
<h3 id="二routing-information-bases"><a href="#（二）Routing-Information-Bases" class="headerlink" title="（二）Routing Information Bases"></a>（二）Routing Information Bases</h3><p>BGP协议的路由存储在<em>Routing Information Bases</em>(<em>RIBs</em>)中，其所包括的三个域如下：</p>
<ul>
<li>Adj-RIBs-In：从邻居处获得的路由信息，用来对路由选择提供信息。</li>
<li>Loc-RIB：本地路由信息，是根据Adj-RIBs-In生成的。这个部分的信息是本地的路由器使用的。</li>
<li>Adj-RIBs-Out：用来广播的部分</li>
</ul>
<p>实现并不需要完全符合这个要求</p>
<h3 id="三信息格式"><a href="#（三）信息格式" class="headerlink" title="（三）信息格式"></a>（三）信息格式</h3><h4 id="1bgp报头"><a href="#1-BGP报头" class="headerlink" title="1.BGP报头"></a>1.BGP报头</h4><p>报头由三部分组成：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Marker</th>
<th>Length</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>16bytes</td>
<td>2bytes</td>
<td>1byte</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>Marker: 16字节，全部为1，标识bgp边界</li>
<li>Length：2字节，表示数据包长度，包括头部本身在内</li>
<li><p>Type：1字节，使用无符号整型来表示类型。包括四类：</p>
<pre><code>  1 - OPEN
  2 - UPDATE
  3 - NOTIFICATION
  4 - KEEPALIVE
</code></pre></li>
</ul>
<h4 id="2open类型报文格式"><a href="#2-OPEN类型报文格式" class="headerlink" title="2.OPEN类型报文格式"></a>2.OPEN类型报文格式</h4><p>OPEN类型报文是在BGP TCP链接创建时首个发送的报文。在OPEN报文被接收后，链接的维持由KEEPALIVE报文发送。</p>
<p>格式如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Version</th>
<th>My Autonomous System</th>
<th>Hold Time</th>
<th>BGP Identifier</th>
<th>Opt Parm Len</th>
<th>Optional Parameters (variable)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1byte</td>
<td>2bytes</td>
<td>2bytes</td>
<td>4bytes</td>
<td>1bytes</td>
<td>根据前一个字节的值觉得</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>version：bgp版本号。当前版本号为4.</li>
<li>My Autonomous System：该域表明了报文创建者的ASN</li>
<li>hold time: 发送者希望链接维持的时间（不接受到新的报文断开链接的时间界）。注意接受者不一定会真的维持这个时间，它会选择发送方的holdtime和自己预设值中间的较小值。报文中该字段的值要么是0，要么至少是三秒。某些值甚至会导致某些实现直接拒绝链接。</li>
<li>BGP Identifier：发送者的BGP标识，通常是分配给该BGP speaker的一个IP地址。</li>
<li><p>Optional parameter length：可选参数的长度。0表示没有参数</p>
</li>
<li><p>Optional Parameters：</p>
</li>
</ul>
<p>每个参数的形式如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>para type</th>
<th>para length</th>
<th>para value</th>
</tr>
</thead>
<tbody>
<tr>
<td>1byte</td>
<td>1byte</td>
<td>看para length的值</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h4 id="3update类型报文格式"><a href="#3-UPDATE类型报文格式" class="headerlink" title="3.UPDATE类型报文格式"></a>3.UPDATE类型报文格式</h4><p>UPDATE类型的报文用来进行路由信息交换。</p>
<p>报文格式如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Withdrawn Routes Length</th>
<th>Withdrawn Routes</th>
<th>Total Path Attribute Length</th>
<th>Path Attributes</th>
<th>Network Layer Reachability Information</th>
</tr>
</thead>
<tbody>
<tr>
<td>2bytes</td>
<td>根据前一属性</td>
<td>2bytes</td>
<td>根据前一属性</td>
<td>可变，下文说明</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>Withdrawn Routes Length：withdrawn routes有多长。为0时代表withdrawn routes域不存在。</li>
<li><p>Withdrawn Routes：这个域包括了一系列不再可用IP地址前缀。这些地址前缀用二元组的形式编码</p>
<p>  length | prefix<br>  ———- | ———-<br>  1byte | 根据前一属性</p>
<p>  length域表示prefix占用的比特（bit）数。prefix需填充满一个字节。</p>
</li>
<li><p>Total Path Attribute Length：Path Attribute routes有多长。为0时代表Path Attribute域不存在。</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>attribute type</th>
<th>attribute length</th>
<th>attribute value</th>
</tr>
</thead>
<tbody>
<tr>
<td>2bytes</td>
<td>根据attribute.flags的某一位确定</td>
<td>根据前项确定</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>attribute type的组成：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>attr.Flags</th>
<th>attr.Type Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>1byte</td>
<td>1byte</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>attr.Flags各个比特的意义（由高位到低位）：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>bit</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1表示这个属性是可选的，0表示公认的</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>1表示这个属性是可传递的，0表示不可传递（公认属性该位强制为1）</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>1表示这个属性的信息是待补全的，0表示完整（公认属性和不可传递属性强制设为0）</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>扩展长度位。1表示attribute length为2字节，0表示为1字节</td>
<td></td>
</tr>
<tr>
<td>4～7</td>
<td>暂时未使用。强制为0。</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>下表展示了目前已经定义的属性类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>attribute</th>
<th>类型</th>
<th>code</th>
<th>length</th>
</tr>
</thead>
<tbody>
<tr>
<td>ORIGIN</td>
<td>必选</td>
<td>1</td>
<td>1byte</td>
<td></td>
</tr>
<tr>
<td>AS_PATH</td>
<td>必选</td>
<td>2</td>
<td>可变</td>
<td></td>
</tr>
<tr>
<td>NEXT_HOP</td>
<td>必选</td>
<td>3</td>
<td>4bytes(?存疑)</td>
<td></td>
</tr>
<tr>
<td>MULTI_EXIT_DISC</td>
<td>可选不可传递</td>
<td>4</td>
<td>4bytes</td>
<td></td>
</tr>
<tr>
<td>LOCAL_PREF</td>
<td>必选（Update中）</td>
<td>5</td>
<td>4bytes</td>
<td></td>
</tr>
<tr>
<td>ATOMIC_AGGREGATE</td>
<td>公认自选</td>
<td>6</td>
<td>0（没有长度）</td>
<td></td>
</tr>
<tr>
<td>AGGREGATOR</td>
<td>可选可传递</td>
<td>7</td>
<td>6bytes</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>属性的对应含义和实现方式如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>attribute</th>
<th>实现方式</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>ORIGIN</td>
<td><br>0:IGP<br>1:EGP<br>2:INCOMPLETE(即除IGP、EGP以外其它方式)</td>
<td>该属性表明了路径信息的来源，优先选择具有较小ORIGIN的路由。</td>
<td></td>
</tr>
<tr>
<td>AS_PATH</td>
<td>每段的结构：\<path segment="" type(1byte),="" path="" length(1byte),="" value(2bytes="" per="" as)=""></path><br>type段有两种取值：<br>&emsp;1:AS_SET-信息内的AS是无序的。<br>&emsp;2:AS_SEQUENCE-信息内的AS是有序的。<br>length段的整数表示value段内有多少个AS<br>value段每个AS占用两个字节，存放其ASN。</td>
<td>包含了通告已经经过的AS信息。具体变更方法：<br>&emsp;a)当bgp speaker向内部路由器广播时，中介路由器不应该修改这个属性<br>&emsp;b)当bgpspeaker向外部路由器广播，中介路由器需要向这个属性添加数据，当首个AS_PATH段的type为AS_SEQUENCE时需要将中介自身的ASN添加到value的尾部（溢出的话必须新建一个类型为AS_SEQUENCE的AS_PATH段并将自身ASN添加到其中；当首个AS_PATH段的type是AS_SET时，新建一个类型为AS_SEQUENCE的AS_PATH段并将自身ASN添加进去；当不存在时，创建一个类型为AS_SEQUENCE的AS_PATH段并将自身ASN添加进去。<br>创建方法：<br>&emsp;a)在向外部路由发送的报文中，创建者把自身的ASN以类型AS_SEQUENCE放在首歌AS_PATH属性内<br>&emsp;b)在向内部路由发送报文时，创建者奖AS_PATH段设为空。</td>
<td></td>
</tr>
<tr>
<td>NEXT_HOP</td>
<td>存放IP地址</td>
<td>保存下一跳信息。<br>&emsp;a)在向内部路由发送报文时,如果不是报文的产生者，则该路由器不能对该属性进行修改（除非被显式的要求设置该字段为自身的IP；创建者则需要把一个可达的中介路由器地址写在该字段中，特殊情况是报文的终点就是内部路由，此时该字段填写的是创建者的IP地址。<br>&emsp;在向外部路由器发送报文时，有如下情况：<br>&emsp;&emsp;(i)路由来自内部邻居或是自己产生的：采用路由实际来源地址。<br>&emsp;&emsp;(ii)路由来自外部且来源和目标不处于同一网段：采用自己对应端口的地址。<br>&emsp;&emsp;(iii)路由来自外部且和目标处于同一网段（网络可以多路访问）</td>
<td></td>
</tr>
<tr>
<td>MULTI_EXIT_DISC</td>
<td>用来区分同一个AS节点发出的路由信息的优先级，一般来说，该值较低的路径应该被优先选择</td>
<td>实现时从相邻AS获得的该属性信息不能被传播给其他的相邻AS。（详见路由选择部分）</td>
<td></td>
</tr>
<tr>
<td>LOCAL_PREF</td>
<td>计算得出</td>
<td>不能被传播给其他的AS，只在IBGP内部传播。（详见路由选择部分）</td>
<td></td>
</tr>
<tr>
<td>ATOMIC_AGGREGATE</td>
<td>只看报文是否包含这个属性</td>
<td>用来通告路由接收者，该路由是经过聚合的。有时BGP发布者会收到两条重叠的路由，其中一条路由包含的地址是另一条路由的子集。一般情况下BGP发布者会优选更精细的路由（前者），但是在对外发布时，如果它选择发布更粗略的那条路由（后者），这时需要附加上ATOMIC-AGGREGATE属性，以知会对等体。它实际上是一种警告，因为发布更粗略的路由意味着更精细的路由信息在发布过程中丢失了。</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>Network Layer Reachability Information：这个部分的长度并没有显式的声明，而是需要通过计算得到：UPDATE报文总长度 - 23（固定域总长度）- Total Path Attribute Length - Withdrawn Routes Length。</li>
</ul>
<p>可达性信息采用了二元组的形式描述：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>length</th>
<th>prefix</th>
</tr>
</thead>
<tbody>
<tr>
<td>1byte</td>
<td>\</td>
</tr>
</tbody>
</table>
</div>
<p>length表示前缀的比特数。当length为0时表示一个与所有ip地址匹配的前缀。<br>前缀需填充满一个字节。</p>
<h4 id="4keepalive报文格式"><a href="#4-KEEPALIVE报文格式" class="headerlink" title="4.KEEPALIVE报文格式"></a>4.KEEPALIVE报文格式</h4><p>KEEPALIVE报文仅仅包含BGP报文头部。<br>注意KEEPALIVE报文发送不能超过1个/s.</p>
<h4 id="5notification报文格式"><a href="#5-NOTIFICATION报文格式" class="headerlink" title="5.NOTIFICATION报文格式"></a>5.NOTIFICATION报文格式</h4><p>NOTIFICATION报文用于通知错误信息，发送NOTIFICATION报文后BGP TCP链接会立即终止。</p>
<p>报文格式如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Error code</th>
<th>Error subcode</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td>1byte</td>
<td>1byte</td>
<td>根据前两者确定</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>Error Code：目前已经定义的有如下类型</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>Error Code</th>
<th>Symbolic Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Message Header Error </td>
</tr>
<tr>
<td>2</td>
<td>OPEN Message Error     </td>
</tr>
<tr>
<td>3</td>
<td>UPDATE Message Error</td>
</tr>
<tr>
<td>4</td>
<td>Hold Timer Expired</td>
</tr>
<tr>
<td>5</td>
<td>Finite State Machine Error</td>
</tr>
<tr>
<td>6</td>
<td>Cease</td>
</tr>
</tbody>
</table>
</div>
<p>另外两个字段不详述，参见<a href="https://tools.ietf.org/html/rfc4271#section-4.5">[rfc_4271 4.5]</a></p>
<h3 id="四路由选择"><a href="#（四）路由选择" class="headerlink" title="（四）路由选择"></a>（四）路由选择</h3><p>三条准则：</p>
<ul>
<li>1.计算每条路由的深度（长度）</li>
<li>2.在1的基础上</li>
</ul>
<h2 id="三-代码实现quagga中的bgp协议"><a href="#三、代码实现——quagga中的BGP协议" class="headerlink" title="三、代码实现——quagga中的BGP协议"></a>三、代码实现——quagga中的BGP协议</h2><p>quegga是一个优秀的网络模拟软件，下面以该软件讲述如何实现BGP协议。</p>
<h3 id="一结构"><a href="#（一）结构" class="headerlink" title="（一）结构"></a>（一）结构</h3><h4 id="1struct-bgp"><a href="#1-struct-bgp" class="headerlink" title="1.struct bgp"></a>1.struct bgp</h4><p>结构体定义在<code>bgpd/bgpd.h</code>中，该结构体定义了一个bgp对象所需要的信息，包括ASN、访问锁、bgp peer、各种类型的路由信息。其中锁的作用是避免在删除bgp peer时出现冲突。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">/* BGP instance structure.  */</div><div class="line">struct bgp </div><div class="line">&#123;</div><div class="line">  /* AS number of this BGP instance.  */</div><div class="line">  as_t as;</div><div class="line"></div><div class="line">  /* Name of this BGP instance.  */</div><div class="line">  char *name;</div><div class="line">  </div><div class="line">  /* Reference count to allow peer_delete to finish after bgp_delete */</div><div class="line">  int lock;</div><div class="line"></div><div class="line">  /* Self peer.  */</div><div class="line">  struct peer *peer_self;</div><div class="line"></div><div class="line">  /* BGP peer. */</div><div class="line">  struct list *peer;</div><div class="line"></div><div class="line">  /* BGP peer group.  */</div><div class="line">  struct list *group;</div><div class="line"></div><div class="line">  /* BGP route-server-clients. */</div><div class="line">  struct list *rsclient;</div><div class="line"></div><div class="line">  /* BGP configuration.  */</div><div class="line">  u_int16_t config;</div><div class="line">#define BGP_CONFIG_ROUTER_ID              (1 &lt;&lt; 0)</div><div class="line">#define BGP_CONFIG_CLUSTER_ID             (1 &lt;&lt; 1)</div><div class="line">#define BGP_CONFIG_CONFEDERATION          (1 &lt;&lt; 2)</div><div class="line"></div><div class="line">  /* BGP router identifier.  */</div><div class="line">  struct in_addr router_id;</div><div class="line">  struct in_addr router_id_static;</div><div class="line"></div><div class="line">  /* BGP route reflector cluster ID.  */</div><div class="line">  struct in_addr cluster_id;</div><div class="line"></div><div class="line">  /* BGP confederation information.  */</div><div class="line">  as_t confed_id;</div><div class="line">  as_t *confed_peers;</div><div class="line">  int confed_peers_cnt;</div><div class="line"></div><div class="line">  struct thread *t_startup;</div><div class="line"></div><div class="line">  /* BGP flags. */</div><div class="line">  u_int32_t flags;</div><div class="line">#define BGP_FLAG_ALWAYS_COMPARE_MED       (1 &lt;&lt; 0)</div><div class="line">#define BGP_FLAG_DETERMINISTIC_MED        (1 &lt;&lt; 1)</div><div class="line">#define BGP_FLAG_MED_MISSING_AS_WORST     (1 &lt;&lt; 2)</div><div class="line">#define BGP_FLAG_MED_CONFED               (1 &lt;&lt; 3)</div><div class="line">#define BGP_FLAG_NO_DEFAULT_IPV4          (1 &lt;&lt; 4)</div><div class="line">#define BGP_FLAG_NO_CLIENT_TO_CLIENT      (1 &lt;&lt; 5)</div><div class="line">#define BGP_FLAG_ENFORCE_FIRST_AS         (1 &lt;&lt; 6)</div><div class="line">#define BGP_FLAG_COMPARE_ROUTER_ID        (1 &lt;&lt; 7)</div><div class="line">#define BGP_FLAG_ASPATH_IGNORE            (1 &lt;&lt; 8)</div><div class="line">#define BGP_FLAG_IMPORT_CHECK             (1 &lt;&lt; 9)</div><div class="line">#define BGP_FLAG_NO_FAST_EXT_FAILOVER     (1 &lt;&lt; 10)</div><div class="line">#define BGP_FLAG_LOG_NEIGHBOR_CHANGES     (1 &lt;&lt; 11)</div><div class="line">#define BGP_FLAG_GRACEFUL_RESTART         (1 &lt;&lt; 12)</div><div class="line">#define BGP_FLAG_ASPATH_CONFED            (1 &lt;&lt; 13)</div><div class="line">#define BGP_FLAG_ASPATH_MULTIPATH_RELAX   (1 &lt;&lt; 14)</div><div class="line">#define BGP_FLAG_DELETING                 (1 &lt;&lt; 15)</div><div class="line">#define BGP_FLAG_RR_ALLOW_OUTBOUND_POLICY (1 &lt;&lt; 16)</div><div class="line"></div><div class="line">  /* BGP Per AF flags */</div><div class="line">  u_int16_t af_flags[AFI_MAX][SAFI_MAX];</div><div class="line">#define BGP_CONFIG_DAMPENING              (1 &lt;&lt; 0)</div><div class="line"></div><div class="line">  /* Static route configuration.  */</div><div class="line">  struct bgp_table *route[AFI_MAX][SAFI_MAX];</div><div class="line"></div><div class="line">  /* Aggregate address configuration.  */</div><div class="line">  struct bgp_table *aggregate[AFI_MAX][SAFI_MAX];</div><div class="line"></div><div class="line">  /* BGP routing information base.  */</div><div class="line">  struct bgp_table *rib[AFI_MAX][SAFI_MAX];</div><div class="line"></div><div class="line">  /* BGP redistribute configuration. */</div><div class="line">  u_char redist[AFI_MAX][ZEBRA_ROUTE_MAX];</div><div class="line"></div><div class="line">  /* BGP redistribute metric configuration. */</div><div class="line">  u_char redist_metric_flag[AFI_MAX][ZEBRA_ROUTE_MAX];</div><div class="line">  u_int32_t redist_metric[AFI_MAX][ZEBRA_ROUTE_MAX];</div><div class="line"></div><div class="line">  /* BGP redistribute route-map.  */</div><div class="line">  struct</div><div class="line">  &#123;</div><div class="line">    char *name;</div><div class="line">    struct route_map *map;</div><div class="line">  &#125; rmap[AFI_MAX][ZEBRA_ROUTE_MAX];</div><div class="line"></div><div class="line">  /* BGP distance configuration.  */</div><div class="line">  u_char distance_ebgp;</div><div class="line">  u_char distance_ibgp;</div><div class="line">  u_char distance_local;</div><div class="line"></div><div class="line">  /* BGP ipv6 distance configuration.  */</div><div class="line">  u_char ipv6_distance_ebgp;</div><div class="line">  u_char ipv6_distance_ibgp;</div><div class="line">  u_char ipv6_distance_local;</div><div class="line">  </div><div class="line">  /* BGP default local-preference.  */</div><div class="line">  u_int32_t default_local_pref;</div><div class="line"></div><div class="line">  /* BGP default timer.  */</div><div class="line">  u_int32_t default_holdtime;</div><div class="line">  u_int32_t default_keepalive;</div><div class="line"></div><div class="line">  /* BGP graceful restart */</div><div class="line">  u_int32_t restart_time;</div><div class="line">  u_int32_t stalepath_time;</div><div class="line"></div><div class="line">  /* Maximum-paths configuration */</div><div class="line">  struct bgp_maxpaths_cfg &#123;</div><div class="line">    u_int16_t maxpaths_ebgp;</div><div class="line">    u_int16_t maxpaths_ibgp;</div><div class="line">  &#125; maxpaths[AFI_MAX][SAFI_MAX];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="2-路由表存储"><a href="#2-路由表存储" class="headerlink" title="2. 路由表存储"></a>2. 路由表存储</h4><p><code>route_table</code>结构体如下。这是整个路由表最上层的结构。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Routing table top structure. */</span></div><div class="line"><span class="keyword">struct</span> route_table</div><div class="line">&#123;</div><div class="line">  <span class="keyword">struct</span> route_node *top;</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">   * Delegate that performs certain functions for this table.</div><div class="line">   */</div><div class="line">  <span class="keyword">route_table_delegate_t</span> *delegate;</div><div class="line">  </div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> count;</div><div class="line">  </div><div class="line">  <span class="comment">/*</span></div><div class="line">   * User data.</div><div class="line">   */</div><div class="line">  <span class="keyword">void</span> *info;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>其中委托的结构如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> route_table_delegate_t_ <span class="keyword">route_table_delegate_t</span>;</div><div class="line">···</div><div class="line"><span class="keyword">struct</span> route_table_delegate_t_ </div><div class="line">&#123;</div><div class="line">  <span class="keyword">route_table_create_node_func_t</span> create_node;</div><div class="line">  <span class="keyword">route_table_destroy_node_func_t</span> destroy_node;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * Default delegate.</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">route_table_delegate_t</span> default_delegate = &#123;</div><div class="line">  .create_node = route_node_create,</div><div class="line">  .destroy_node = route_node_destroy</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>委托中保存了清除节点和创建节点的函数。</p>
<p>再来看<code>route_node</code>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ROUTE_NODE_FIELDS			\</span></div><div class="line">  <span class="comment">/* Actual prefix of this radix. */</span>		\</div><div class="line">  struct prefix p;				\</div><div class="line">						\</div><div class="line">  <span class="comment">/* Tree link. */</span>				\</div><div class="line">  struct route_table *table;			\</div><div class="line">  struct route_node *parent;			\</div><div class="line">  struct route_node *link[2];			\</div><div class="line">						\</div><div class="line">  <span class="comment">/* Lock of this radix */</span>			\</div><div class="line">  unsigned int lock;				\</div><div class="line">						\</div><div class="line">  <span class="comment">/* Each node of route. */</span>			\</div><div class="line">  void *info;					\</div><div class="line">						\</div><div class="line">  <span class="comment">/* Aggregation. */</span>				\</div><div class="line">  void *aggregate;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* Each routing entry. */</span></div><div class="line"><span class="keyword">struct</span> route_node</div><div class="line">&#123;</div><div class="line">  ROUTE_NODE_FIELDS</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> l_left   link[0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> l_right  link[1]</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>可以看到每个节点的信息都被完整的保存在了这个结构体中，其中最重要的信息就是节点的前缀。<br>整个route列表被组织成了二叉树，这样</p>
<h4 id="3路由表修改"><a href="#3-路由表修改" class="headerlink" title="3.路由表修改"></a>3.路由表修改</h4><p>我们以删除一个节点为例参看quagga是如何修改这个数据结构的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Delete node from the routing table. */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">route_node_delete</span> <span class="params">(<span class="keyword">struct</span> route_node *node)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">struct</span> route_node *child;</div><div class="line">  <span class="keyword">struct</span> route_node *parent;</div><div class="line"></div><div class="line">  assert (node-&gt;lock == <span class="number">0</span>);</div><div class="line">  assert (node-&gt;info == <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (node-&gt;l_left &amp;&amp; node-&gt;l_right)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (node-&gt;l_left)</div><div class="line">    child = node-&gt;l_left;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    child = node-&gt;l_right;</div><div class="line"></div><div class="line">  parent = node-&gt;parent;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (child)</div><div class="line">    child-&gt;parent = parent;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (parent)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (parent-&gt;l_left == node)</div><div class="line">	parent-&gt;l_left = child;</div><div class="line">      <span class="keyword">else</span></div><div class="line">	parent-&gt;l_right = child;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    node-&gt;table-&gt;top = child;</div><div class="line"></div><div class="line">  node-&gt;table-&gt;count--;</div><div class="line"></div><div class="line">  route_node_free (node-&gt;table, node);</div><div class="line"></div><div class="line">  <span class="comment">/* If parent node is stub then delete it also. */</span></div><div class="line">  <span class="keyword">if</span> (parent &amp;&amp; parent-&gt;lock == <span class="number">0</span>)</div><div class="line">    route_node_delete (parent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>本质上就是二叉树节点的删除。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[nettools源码解析]]></title>
      <url>http://penguin858.com/2018/01/31/nettools%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<!-- tocstop -->
<a id="more"></a>
<p>本文尝试对linux下的<code>net-tools</code>工具包的源代码进行分析。分析的代码版本为<code>net-tools-1.60</code></p>
<p>添加一个新的功能就是去添加一个全新的封装好的系统调用。下面将分析如果要添加一个完整的新的系统调用需要做些什么。这里以net-tools中的创建套接字函数<code>sockets_open</code>为起点说明创建流程。</p>
<p>首先，在<code>include/sockets.h</code>中可以找到该函数的声明：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sockets.h</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">sockets_open</span><span class="params">(<span class="keyword">int</span> family)</span></span>;</div></pre></td></tr></table></figure>
<p>其定义存在于<code>lib/sockets.c</code>中：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sockets.c</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sockets_open</span><span class="params">(<span class="keyword">int</span> family)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> aftype **aft;</div><div class="line">    <span class="keyword">int</span> sfd = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> force = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (force &lt; <span class="number">0</span>) &#123;</div><div class="line">    force = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (kernel_version() &lt; KRELEASE(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>))</div><div class="line">        force = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (access(<span class="string">"/proc/net"</span>, R_OK))</div><div class="line">        force = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    ···</div><div class="line">    af-&gt;fd = socket(af-&gt;af, type, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (af-&gt;fd &gt;= <span class="number">0</span>)</div><div class="line">        sfd = af-&gt;fd;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sfd &lt; <span class="number">0</span>)</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, _(<span class="string">"No usable address families found.\n"</span>));</div><div class="line">    <span class="keyword">return</span> sfd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其间执行了许多的系统调用，我们选择去看<code>socket</code>这个系统调用的定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sys/socket.h</span></div><div class="line">···</div><div class="line">__BEGIN_DECLS</div><div class="line">···</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line">···</div><div class="line">__END_DECLS</div></pre></td></tr></table></figure></p>
<p>这里的两个宏指明了它们之间的声明都是<code>extern</code>类型的。实际上的实现由glibc完成。其定义在<code>glibc-2.26/sysdeps/unix/sysv/linux/socket.c</code>:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span></div><div class="line">__socket (<span class="keyword">int</span> fd, <span class="keyword">int</span> type, <span class="keyword">int</span> domain)</div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __ASSUME_SOCKET_SYSCALL</span></div><div class="line">  <span class="keyword">return</span> INLINE_SYSCALL (socket, <span class="number">3</span>, fd, type, domain);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  <span class="keyword">return</span> SOCKETCALL (socket, fd, type, domain);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div><div class="line">libc_hidden_def (__socket)</div><div class="line">weak_alias (__socket, socket)</div></pre></td></tr></table></figure>
<p>后两个宏的作用就和函数名一样。</p>
<p>在内核版本2.6.37后，走的就是<code>INLINE_SYSCALL</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* These syscalls were added for SH in 2.6.37.  */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __ASSUME_SOCKET_SYSCALL     1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __ASSUME_BIND_SYSCALL       1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __ASSUME_CONNECT_SYSCALL    1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __ASSUME_LISTEN_SYSCALL     1</span></div></pre></td></tr></table></figure>
<p>而<code>INLINE_SYSCALL</code>的定义在<code>glibc-2.26/sysdeps/unix/sysv/linux/x86_64/sysdep.h</code>中：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">undef</span> INLINE_SYSCALL</span></div><div class="line"><span class="meta"># <span class="meta-keyword">define</span> INLINE_SYSCALL(name, nr, args...) \</span></div><div class="line">  (&#123;                        \</div><div class="line">    unsigned long int resultvar = INTERNAL_SYSCALL (name, , nr, args);        \</div><div class="line">    <span class="meta-keyword">if</span> (__glibc_unlikely (INTERNAL_SYSCALL_ERROR_P (resultvar, )))        \</div><div class="line">      &#123;                       \</div><div class="line">  __set_errno (INTERNAL_SYSCALL_ERRNO (resultvar, ));         \</div><div class="line">  resultvar = (unsigned long int) -1;             \</div><div class="line">      &#125;                       \</div><div class="line">    (long int) resultvar; &#125;)</div><div class="line">···</div><div class="line"><span class="meta"># <span class="meta-keyword">define</span> INTERNAL_SYSCALL_NCS(name, err, nr, args...) \</span></div><div class="line">  (&#123;                        \</div><div class="line">    unsigned long int resultvar;                \</div><div class="line">    LOAD_ARGS_##nr (args)                 \</div><div class="line">    LOAD_REGS_##nr                    \</div><div class="line">    asm volatile (                    \</div><div class="line">    <span class="meta-string">"syscall\n\t"</span>                   \</div><div class="line">    : <span class="meta-string">"=a"</span> (resultvar)                    \</div><div class="line">    : <span class="meta-string">"0"</span> (name) ASM_ARGS_##nr : <span class="meta-string">"memory"</span>, REGISTERS_CLOBBERED_BY_SYSCALL);   \</div><div class="line">    (long int) resultvar; &#125;)</div><div class="line"><span class="meta"># <span class="meta-keyword">undef</span> INTERNAL_SYSCALL</span></div><div class="line"><span class="meta"># <span class="meta-keyword">define</span> INTERNAL_SYSCALL(name, err, nr, args...) \</span></div><div class="line">  INTERNAL_SYSCALL_NCS (__NR_##name, err, nr, ##args)</div></pre></td></tr></table></figure>
<p>syscall的name为<strong>NR_##name，在本例中即为</strong>NR_socket。其定义在/usr/include/asm/unistd_64.h中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_bind 49</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_listen 50</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_getsockname 51</span></div></pre></td></tr></table></figure></p>
<p>系统调用号的声明在内核的<code>linux/arch/x86/entry/syscalls/syscall_64.tbl</code>中，然后就可以通过这样的方法调用封装好的系统调用了（注册系统调用的流程可以参考<a href="http://blog.csdn.net/a364572/article/details/50764234">这里</a>）。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[理解autoreleasepool工作原理]]></title>
      <url>http://penguin858.com/2017/09/12/%E7%90%86%E8%A7%A3autoreleasepool%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="autoreleasepool的工作方式"><a href="#autoreleasepool的工作方式" class="headerlink" title="autoreleasepool的工作方式"></a>autoreleasepool的工作方式</h2><p>  ios系统通过 <code>@autoreleasepool{}</code> 的方式来创建自动释放池。每一个线程会对应一个runloop，系统会为每一个runloop隐式地创建一个自动释放池，所有的autoreleasepool构成一个栈式的结构，在每个runloop结束的时候，当前栈顶的autoreleasepool会被销毁，此时这个自动释放池会对其中的每个对象做release。</p>
<a id="more"></a>
<h2 id="autoreleasepool的实现方式"><a href="#autoreleasepool的实现方式" class="headerlink" title="autoreleasepool的实现方式"></a>autoreleasepool的实现方式</h2><h3 id="数据结构autoreleasepoolpage"><a href="#数据结构AutoreleasePoolPage" class="headerlink" title="数据结构AutoreleasePoolPage"></a>数据结构AutoreleasePoolPage</h3><p>每个autoreleasepool对象都是由若干个autoreleasepoolpage通过双向链表连接而成，类的定义如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> AutoreleasePoolPage&#123;</div><div class="line">  magic_t <span class="keyword">const</span> magic; <span class="comment">//用来校验 AutoreleasePoolPage 的结构是否完整；</span></div><div class="line">  <span class="keyword">id</span> * next; <span class="comment">//指向栈顶最新被添加进来的autorelease对象的下一个位置</span></div><div class="line">  pthread_t <span class="keyword">const</span> thread; <span class="comment">//指向当前进程</span></div><div class="line">  AutoreleasePoolPage * <span class="keyword">const</span> parent;</div><div class="line">  AutoreleasePoolPage * child;</div><div class="line">  uint32_t <span class="keyword">const</span> depth;</div><div class="line">  uint32_t hiwat; <span class="comment">// high water mark</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>autoreleasePoolPage会开辟4096^即0x1000 字节空间，除了上面的实例变量所占的空间，剩余的空间全部用来存储autorelease对象的地址</li>
<li>next指针指向下一个内存为空的地址，如果向其中加入了新的object，那么这个指针就会自动移向下一个空地址</li>
<li>一个autoreleasePoolPage空间被占满时，会创建一个新的autoreleasePoolPage对象，后来的对象添加在新的autoreleasePoolPage中</li>
</ul>
<h3 id="哨兵对象pool_sentinel"><a href="#哨兵对象（POOL-SENTINEL）" class="headerlink" title="哨兵对象（POOL_SENTINEL）"></a>哨兵对象（POOL_SENTINEL）</h3><p><code>POOL_SENTINEL</code>实际上只是<code>nil</code>的别名。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define POOL_SENTINEL nil</span></div></pre></td></tr></table></figure></p>
<p>系统通过一个栈来管理所有的自动释放池，每当创建了一个新的自动释放池，系统就会把它压入栈顶，并且传入一个哨兵对象,将哨兵对象插入hotPage。每当有一个自动释放池要被释放的时候，哨兵对象就会作为参数被传入，找到该哨兵对象所在的位置后，将所有晚于哨兵对象的autorelease弹出，并对他们做一次release，然后将next指针一到合适的位置。</p>
<h2 id="自动释放池的使用"><a href="#自动释放池的使用" class="headerlink" title="自动释放池的使用"></a>自动释放池的使用</h2><h3 id="mrc模式下的使用"><a href="#MRC模式下的使用" class="headerlink" title="MRC模式下的使用"></a>MRC模式下的使用</h3><ul>
<li>对象作为函数返回值：<br>当一个对象要作为函数返回值的时候，因为要遵循谁申请谁释放的思想，所以应该在返回之前释放，但要是返回之前释放了，就会造成野指针错误，但是要是不释放，那么就违背了谁申请谁释放的原则，所以就可以使用autorelease延迟释放的特性，将其在返回之前做一次autorelease，加入到自动释放池中，保证可以被返回。</li>
<li>临时生成大量对象,一定要将自动释放池放在for循环里面，要释放在外面，就会因为大量对象得不到及时释放，而造成内存紧张，最后程序意外退出</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置owncloud私有云（Centos）]]></title>
      <url>http://penguin858.com/2017/07/18/%E9%85%8D%E7%BD%AEowncloud%E7%A7%81%E6%9C%89%E4%BA%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="零-平台说明"><a href="#零、平台说明" class="headerlink" title="零、平台说明"></a>零、平台说明</h2><p>我配置owncloud所使用的服务器是阿里云的学生版服务器，以下许多服务也是基于阿里云提供的服务，不同的地方大多可以通过百度解决。<br>这篇文章所描述的是刚购买来的服务器，在这之前还没有进行过apache等服务的配置，所以其中会有一些与owncloud无关的配置过程。</p>
<a id="more"></a>
<h2 id="一-安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1预装软件包"><a href="#1-预装软件包" class="headerlink" title="1.预装软件包"></a>1.预装软件包</h3><p>这一步需要安装apache、php、mysql等软件，他们都是lamp的一部分。（下面脚本的安装不包括php，要安装php的话请参考<a href="http://blog.csdn.net/dxywx/article/details/50609137">这里</a>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum update</div><div class="line">yum install httpd mariadb-server mariadb sqlite wget vim mod_ssl</div></pre></td></tr></table></figure></p>
<h3 id="2安装owncloud"><a href="#2-安装owncloud" class="headerlink" title="2.安装owncloud"></a>2.安装owncloud</h3><p>我安装的版本是<a href="http://download.owncloud.org/download/repositories/10.0/owncloud/">10.0</a>，不过官方的稳定版本通常发布在<a href="https://download.owncloud.org/download/repositories/stable/owncloud/">这个页面</a>，根据对应版本下面的提示进行下载即可。</p>
<h3 id="3配置mysql"><a href="#3-配置mysql" class="headerlink" title="3.配置mysql"></a>3.配置mysql</h3><p>接下来需要在数据库中创建owncloud所使用的账号。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">mysql&gt; create database owncloud;</div><div class="line">mysql&gt; create user 'owncloud'@'localhost' identified by 'MyOwncloudName';</div><div class="line">mysql&gt; grand all on owncloud.* to 'owncloud'@'localhost';</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; quit;</div></pre></td></tr></table></figure></p>
<p>之后打开浏览器，访问 ‘<your_server_name>/owncloud’，将页面内的信息补充完整之后便可使用得到的有管理员权限的账号访问owncloud了。（访问使用<code>&lt;your_server_name&gt;/owncloud</code>）</your_server_name></p>
<h2 id="二-通过域名访问owncloud"><a href="#二、通过域名访问owncloud" class="headerlink" title="二、通过域名访问owncloud"></a>二、通过域名访问owncloud</h2><p>现在owncloud能用了，但是还只能通过ip地址访问，这对我想和朋友分享的时候会造成很大的不便，所以我想注册一个域名来帮助我解决这个问题，并且为以后添加新的服务做准备。<br>这里需要注意的是，在中国，如果想要通过http访问一个网站，那么必须去备案，我觉得这个过程太麻烦了= =!，所以自己的网站现在只能通过https访问，下面的配置中也主要会讲https服务器的配置。</p>
<h3 id="1申请证书"><a href="#1-申请证书" class="headerlink" title="1.申请证书"></a>1.申请证书</h3><p>阿里云提供了证书服务，也有免费的证书（赛门铁克）可供申请。如果不想申请证书，自签名可以参考<a href="http://www.centoscn.com/CentosSecurity/CentosSafe/2013/0729/785.html">这里</a><br>在阿里云申请赛门铁克的证书时需要在域名管理系统里添加两个条目。第一个是证书提供商测试使用的，要根据证书提供商的要求设置一个TXT类型的解析记录，记录值和主机记录可在<code>证书服务-进度</code>处查看。第二个条目便是自己想要使用的域名的信息了，记录类型为A，记录值是自己服务器的ip地址，主机记录是域名的前缀。</p>
<p>等到证书下发后，将证书上传到服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp  -r local_dir username@servername:remote_dir</div></pre></td></tr></table></figure></p>
<h3 id="2配置https服务器"><a href="#2-配置https服务器" class="headerlink" title="2.配置https服务器"></a>2.配置https服务器</h3><p>这块网上流传最多的便是找到配置文件里注释的一句话并删掉<code>#</code>，如果没有这条注释就说明apache缺少<code>mod_ssl</code>模块。这个说法是有问题的。有这个注释的版本应该是比较早的版本了，新版本的注释并没有这样一条- -。要验证自己的apache到底有没有安装<code>mod_ssl</code>，只需要打开apache安装目录下的<code>modules</code>文件夹，看看里面有没有<code>mod_ssl.so</code>就可以了。（一开始被误导浪费了不少时间- -，阿里云上的说明也是和网上的这些说明一样- -非常坑= =！）。<br>个人觉得比较方便的一种方法是创建一个新的虚拟主机。找到apache的安装目录<code>/etc/httpd</code>，打开<code>conf</code>里的<code>httpd.conf</code>文件，在文件末尾（创建一个新文件亦可）添加如下内容:</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;VirtualHost *:443&gt;</span></div><div class="line"> <span class="attribute"><span class="nomarkup">ServerName</span></span> owncloud.xzping.top</div><div class="line"> <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"your_path_to_owncloud"</span></div><div class="line"> <span class="attribute">SSLEngine</span> <span class="literal">on</span></div><div class="line"> <span class="attribute">SSLCertificateFile</span> your_certificate_path/public.pem</div><div class="line"> <span class="attribute">SSLCertificateKeyFile</span> your_certificate_path/your_private_key.key</div><div class="line"> <span class="attribute">SSLCertificateChainFile</span> your_certificate_path/chain.pem</div><div class="line"> <span class="attribute"><span class="nomarkup">Header</span></span> always set Strict-Transport-Security <span class="string">"max-age=63072000"</span></div><div class="line"><span class="section">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure>
<p>这途中碰到了一个问题。owncloud需要把域名添加到可信任列表里才能通过域名来访问，然而我在这么设置了之后不能直接通过点击那个buttom完成，点击之后会404- -。这时我就采用了直接修改配置文件<code>config.php</code>直接将域名添加信任就完成了。</p>
<h3 id="3防火墙设置"><a href="#3-防火墙设置" class="headerlink" title="3.防火墙设置"></a>3.防火墙设置</h3><p>我的服务器没有启用防火墙，而是利用了阿里云提供的安全组策略。不过不管采用什么方法，都需要开启443端口。</p>
<p>这样一来便可以通过https访问owncloud了！</p>
<h2 id="三-优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h2><p>实际上owncloud的默认配置并不是其最优配置，所以我们在成功启用owncloud以后还可以对其进行一定的调整。一些警告可以在用管理员账号登陆后进入<code>设置-常规</code>看到，下面我们来消除警告。</p>
<h3 id="1启用cron"><a href="#1-启用cron" class="headerlink" title="1.启用cron"></a>1.启用cron</h3><h4 id="cron简介"><a href="#cron简介" class="headerlink" title="cron简介"></a>cron简介</h4><p>cron 是linux系统提供的一个会根据命令和执行时间来按时来调用度工作任务的工具</p>
<p><strong>命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</div><div class="line">crontab -l //列出某个用户cron服务的详细内容</div><div class="line">crontab -r //删除某个用户的cron服务</div><div class="line">crontab -e //编辑某个用户的cron服务</div></pre></td></tr></table></figure></p>
<h4 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h4><p>这里搬运一下配置文件<code>/etc/crontab</code>中的注释来说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># For details see man 4 crontabs</div><div class="line"></div><div class="line"># Example of job definition:</div><div class="line"># .---------------- minute (0 - 59)</div><div class="line"># |  .------------- hour (0 - 23)</div><div class="line"># |  |  .---------- day of month (1 - 31)</div><div class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</div><div class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</div><div class="line"># |  |  |  |  |</div><div class="line"># *  *  *  *  * user-name  command to be executed</div></pre></td></tr></table></figure></p>
<p>表达式中的特殊符号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*：表示匹配该域的任意值，假如在Minutes域使用*, 即表示每分钟都会触发事件</div><div class="line">/:表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次</div></pre></td></tr></table></figure></p>
<p>更详细的可以参考这个：<a href="http://www.cnblogs.com/junrong624/p/4239517.html">cron表达式详解</a></p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>其实明白了crontab的工作原理，就很清楚应该怎么设置了。owncloud提供了一个任务计划<code>cron.php</code>，只需要设置定时用php去执行这个任务计划就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ crontab -u root -e</div><div class="line">*/15 * * * * /usr/bin/php -f your_owncloud_path/cron.php</div></pre></td></tr></table></figure></p>
<p>最后打开浏览器访问一下<code>http[s]://&lt;domain-of-your-server&gt;/owncloud/cron.php</code>配置就成功了。</p>
<h3 id="2事务文件锁定transactional-file-locking与memcache"><a href="#2-事务文件锁定-Transactional-File-Locking-与memcache" class="headerlink" title="2.事务文件锁定(Transactional File Locking)与memcache"></a>2.事务文件锁定(Transactional File Locking)与memcache</h3><h4 id="tfl介绍"><a href="#TFL介绍" class="headerlink" title="TFL介绍"></a>TFL介绍</h4><p>TFL系统是为了保证正常操作中不会出现文件的问题而设计的。owncloud默认的是通过基于数据库的锁系统来支持TFL，但这一方案性能很差。如果修改为基于内存的存储方式则性能会提高很多，为了支持这一点，需要安装一个memcache系统（还可以加快访问速度）。我选择的是redis。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install redis php56w-pecl-redis</div><div class="line">systemctl start redis</div></pre></td></tr></table></figure>
<p>安装并启动完成以后，打开owncloud的配置文件，在最后加入如下内容：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">'memcache.local'</span> =&gt; <span class="string">'\OC\Memcache\Redis'</span>,</div><div class="line"><span class="string">'redis'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">      <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</div><div class="line">      <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</div><div class="line">),</div><div class="line"><span class="string">'memcache.locking'</span> =&gt; <span class="string">'OC\Memcache\Redis'</span></div></pre></td></tr></table></figure></p>
<p>这样一来就配置好了。</p>
<h3 id="3启用htaccess"><a href="#3-启用-htaccess" class="headerlink" title="3.启用.htaccess"></a>3.启用.htaccess</h3><p>这个和owncloud无关，但在我升级为nextcloud之后会显示这个警告，实际上这是一个apache的配置选项。</p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>.htaccess文件提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<br>关于.htaccess的更详细说明可以参考<a href="http://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html">这里</a></p>
<h4 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h4><p>检查一下modules目录下是否有<code>mod_rewrite.so</code>，如果有则说明支持这个功能。<br>只需要找到管理nextcloud这个目录的文件目录选项中的这个条目：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">AllowOverride</span> none</div></pre></td></tr></table></figure></p>
<p>改为：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">AllowOverride</span> <span class="literal">all</span></div></pre></td></tr></table></figure></p>
<p>就配置成功了</p>
<h3 id="4配置opcache"><a href="#4-配置opcache" class="headerlink" title="4.配置opcache"></a>4.配置opcache</h3><p>opcache是一个由php支持的对其加速的cache，nextcloud采用了这个技术。<br>如果系统的php一开始没有安装配置这个opcache，那么在nextcloud中会出现警告，要求你根据它的提示配置对应的参数。<br>php官网上显示5.5.0以后的版本是自带opcache的，但不知道为啥我的php5.6中并没有这样的</p>
<h3 id="5启用nextant全局搜索插件"><a href="#5-启用nextant全局搜索插件" class="headerlink" title="5.启用nextant全局搜索插件"></a>5.启用nextant全局搜索插件</h3><p>这个插件的启用需要额外的支持。我们需要现在服务器上安装好solr，<a href="https://github.com/nextcloud/nextant/wiki">这里是官方说明</a>.<br>安装java并下载solr的压缩包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install java</div><div class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr/6.6.0/solr-6.6.0.tgz</div><div class="line">$ tar -zxvf solr-6.6.0.tgz</div></pre></td></tr></table></figure></p>
<p>然后利用脚本初始化solr：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ./solr<span class="number">-6.6</span><span class="number">.0</span>/bin/install_solr_service.sh  solr<span class="number">-6.6</span><span class="number">.0</span></div></pre></td></tr></table></figure></p>
<p>solr默认监控所有的主机，官方提供了只监控本地主机的方法，见<a href="https://github.com/nextcloud/nextant/wiki/Setup-your-local-Solr-as-a-Service">官方说明</a>。<br>然后确认一下8983端口有没有被占用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ netstat -ano | grep 8983</div></pre></td></tr></table></figure></p>
<p>如果没有的话则可以启动solr：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/solr start</div><div class="line">sudo -u solr /opt/solr/bin/solr create -c nextant</div></pre></td></tr></table></figure></p>
<p>之后就可以使用nextant了</p>
<h3 id="6关于图标"><a href="#6-关于图标" class="headerlink" title="6.关于图标"></a>6.关于图标</h3><p>nextcloud支持自己更换标志和背景。关于背景的选择，有一个很好的矢量图网站：<a href="http://www.iconfont.cn/search/index?searchType=icon&amp;q=cloud&amp;page=1">iconfont</a></p>
<h2 id="四-更新为nextcloud"><a href="#四、更新为nextcloud" class="headerlink" title="四、更新为nextcloud"></a>四、更新为nextcloud</h2><p>由于owncloud的公司破产重组，之后的owncloud实际上是由原来团队中的一小部分来开发的，结果出现了很多的bug。后来我发现原来的公司仍然存活，只是产品名变成了nextcloud，下面就介绍如何将owncloud更新为nextcloud。<br>owncloud 10.0 以下版本可以直接按照<a href="https://nextcloud.com/migration/">这里</a>的要求来做，有现成的脚本可以完成这个任务。而更新的版本则不行。</p>
<h3 id="1备份"><a href="#1-备份" class="headerlink" title="1.备份"></a>1.备份</h3><p>升级前先对owncloud及其数据库进行备份。<br>首先备份owncloud文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -pr owncloud_path backup_path</div></pre></td></tr></table></figure></p>
<p>然后备份数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump --single-transaction -u root -p [db_name] &gt; backup_file.bak</div></pre></td></tr></table></figure></p>
<p>接着从本地将nextcloud上传：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp nextcloud.zip root@server_ip</div></pre></td></tr></table></figure></p>
<p>然后解压并将其用户修改为apache：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unzip nextcloud.zip</div><div class="line">chown -R apache:apache nextcloud</div></pre></td></tr></table></figure></p>
<p>后续的话参见<a href="https://nextcloud.com/migration/">这里</a>来操作就可以了。</p>
<h2 id="五-挂载阿里云oss"><a href="#五、挂载阿里云oss" class="headerlink" title="五、挂载阿里云oss"></a>五、挂载阿里云oss</h2><p><a href="http://lxl520.com/index.php/archives/82/">这里有一篇文章</a>，博主是采用的是nginx引擎的服务器，但是挂载ossfs的方法是比较类似的。这里主要说一下挂载具体ossfs的文件时的参数。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>id apache</div><div class="line"><span class="variable">$ </span>ossfs my_bucket my_folder -ourl=http(s)<span class="symbol">://oss-net-domain-name</span> -ouid=apache_uid -ogid=apache_gid -o allow_other -o umask=<span class="number">007</span></div></pre></td></tr></table></figure>
<p>umask是设置unable的位的，所以实际上等于设置权限为770</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[基于opencv的人脸识别]]></title>
      <url>http://penguin858.com/2017/06/08/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#step1配置环境-安装opencv">step1:配置环境-安装opencv</a><ul>
<li><a href="#mac-os上的安装过程">mac os上的安装过程</a><ul>
<li><a href="#1利用homebrew安装相关包">1.利用homebrew安装相关包</a></li>
<li><a href="#2设置pkg-config">2.设置pkg-config</a></li>
<li><a href="#3测试">3.测试</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#step2实验概述">step2:实验概述</a><ul>
<li><a href="#0opencv">0.OpenCV</a></li>
<li><a href="#1准备数据">1.准备数据</a></li>
<li><a href="#2特征脸法">2.特征脸法</a><ul>
<li><a href="#算法原理">算法原理:</a></li>
<li><a href="#算法内容">算法内容</a></li>
<li><a href="#理论基础">理论基础</a></li>
<li><a href="#代码实现">代码实现</a></li>
</ul>
</li>
<li><a href="#3fisherfaces">3.Fisherfaces</a><ul>
<li><a href="#算法原理">算法原理</a></li>
<li><a href="#公式推导">公式推导</a></li>
<li><a href="#代码实现-1">代码实现</a></li>
</ul>
</li>
<li><a href="#4local-binary-patterns-histograms">4.Local Binary Patterns Histograms</a><ul>
<li><a href="#算法思想">算法思想</a></li>
<li><a href="#算法改进">算法改进</a><ul>
<li><a href="#1圆形lbp算子">1.圆形LBP算子</a></li>
<li><a href="#2lbp等价模式">2.LBP等价模式</a></li>
</ul>
</li>
<li><a href="#代码框架">代码框架</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#step3得出实验结果">step3:得出实验结果</a></li>
<li><a href="#step4应用性别识别">step4:应用——性别识别</a></li>
<li><a href="#appendix附录">Appendix附录</a><ul>
<li><a href="#1数据库结构">1.数据库结构</a></li>
<li><a href="#2转换为csv采用的python脚本">2.转换为CSV采用的python脚本</a></li>
</ul>
</li>
<li><a href="#reference参考">Reference参考</a></li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<p>这是我与同学合作完成的课程大作业项目。<br><a href="https://github.com/penguin858/Face-Recognition-with-OpenCV.git">项目的github地址</a>  (目前文档还未完善)</p>
<h2 id="step1配置环境-安装opencv"><a href="#step1-配置环境-安装opencv" class="headerlink" title="step1:配置环境-安装opencv"></a>step1:配置环境-安装opencv</h2><p>按照官方网站上的指示完全没法安装 <strong>-_-!!!</strong></p>
<h3 id="mac-os上的安装过程"><a href="#mac-os上的安装过程" class="headerlink" title="mac os上的安装过程"></a>mac os上的安装过程</h3><p><a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation">linux上的安装方法可以参见这个</a><br>但是只按照官网的教程来操作并不能够直接运行，可以参看<a href="http://blog.csdn.net/qccz123456/article/details/52351831">这个博客</a>配置相应的环境变量</p>
<h4 id="1利用homebrew安装相关包"><a href="#1-利用homebrew安装相关包" class="headerlink" title="1.利用homebrew安装相关包"></a>1.利用homebrew安装相关包</h4><p>按照官网上的要求，我们需要安装<code>pkg-config</code>、<code>cmake</code>、<code>g++\gcc</code><br>在电脑上安装好<strong>homebrew</strong>的情况下，我们可以通过它来安装上述插件，比如要安装cmake时，只需要使用以下命令：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>search cmake</div></pre></td></tr></table></figure></p>
<p>根据反馈来看看有没有这个包/名字有没有写错，没有的话则可使用以下命令安装：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>cmake</div></pre></td></tr></table></figure></p>
<p>在安装好上述插件以后，就可以安装opencv了（直接使用homebrew安装比到官网上下载编译要容易）：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>tap homebrew/science</div><div class="line"><span class="keyword">brew </span>install opencv</div></pre></td></tr></table></figure></p>
<h4 id="2设置pkg-config"><a href="#2-设置pkg-config" class="headerlink" title="2.设置pkg-config"></a>2.设置pkg-config</h4><p>安装完成以后，在<code>/usr/local/Cellar</code>下就会出现一个新的文件夹<code>opencv</code>。接下来打开<code>.bash_profile</code>配置<code>pkg-config</code>的环境变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open <span class="_">-e</span> .bash_profile</div></pre></td></tr></table></figure></p>
<p>在打开的文档中加入：(具体路径要根据实际安装情况而定)<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span><span class="symbol">:/usr/local/Cellar/opencv/</span><span class="number">2.4</span>.<span class="number">13.2</span>/lib/pkgconfig</div><div class="line">export PKG_CONFIG_PATH</div><div class="line"></div><div class="line">export LD_LIBRARY_PATH=<span class="regexp">/usr/local</span><span class="regexp">/Cellar/opencv</span><span class="regexp">/2.4.13.2/bin</span><span class="symbol">:SLD_LIBRARY_PATH</span></div><div class="line">export PATH=<span class="variable">$&#123;</span>PATH&#125;<span class="symbol">:/usr/local/Cellar/opencv/</span><span class="number">2.4</span>.<span class="number">13.2</span>/lib</div></pre></td></tr></table></figure></p>
<p>保存，然后让环境变量生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure></p>
<p>然后输入以下命令：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pkg-config <span class="comment">--libs opencv</span></div><div class="line">pkg-config <span class="comment">--cflags opencv</span></div></pre></td></tr></table></figure></p>
<p>如果显示类似以下，则说明配置已经成功：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">~ apple$ pkg-config --libs opencv</div><div class="line"></div><div class="line">-L/usr/local/Cellar/opencv/<span class="number">2.4</span>.<span class="number">13.2</span>/<span class="class"><span class="keyword">lib</span> -<span class="title">lopencv_calib3d</span> -<span class="title">lopencv_contrib</span> -<span class="title">lopencv_core</span> -<span class="title">lopencv_features2d</span> -<span class="title">lopencv_flann</span> -<span class="title">lopencv_gpu</span> -<span class="title">lopencv_highgui</span> -<span class="title">lopencv_imgproc</span> -<span class="title">lopencv_legacy</span> -<span class="title">lopencv_ml</span> -<span class="title">lopencv_nonfree</span> -<span class="title">lopencv_objdetect</span> -<span class="title">lopencv_ocl</span> -<span class="title">lopencv_photo</span> -<span class="title">lopencv_stitching</span> -<span class="title">lopencv_superres</span> -<span class="title">lopencv_ts</span> -<span class="title">lopencv_video</span> -<span class="title">lopencv_videostab</span></span></div><div class="line"></div><div class="line">~ apple$ pkg-config --cflags opencv</div><div class="line"></div><div class="line">-I/usr/local/Cellar/opencv/<span class="number">2.4</span>.<span class="number">13.2</span>/<span class="keyword">include</span>/opencv -I/usr/local/Cellar/opencv/<span class="number">2.4</span>.<span class="number">13.2</span>/<span class="keyword">include</span></div></pre></td></tr></table></figure></p>
<h4 id="3测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p>以下是一个可供测试用的程序，该程序将同一文件夹内的名为<code>image.jpg</code>的文件复制并生成文件<code>image_copy.png</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;   </div><div class="line">    <span class="comment">// Load an image from file - change this based on your image name</span></div><div class="line">    Mat img = imread(<span class="string">"image.jpg"</span>, CV_LOAD_IMAGE_UNCHANGED);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(img.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to load input image\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// this is just to show, that you won't have to pre-alloc</span></div><div class="line">    <span class="comment">// result-images with c++ any more..</span></div><div class="line">    Mat gray;</div><div class="line">    cvtColor(img,gray,CV_BGR2GRAY);</div><div class="line"></div><div class="line">    <span class="comment">// Write the image to a file with a different name,</span></div><div class="line">    <span class="comment">// using a different image format -- .png instead of .jpg</span></div><div class="line">    <span class="keyword">if</span>( ! imwrite(<span class="string">"image_copy.png"</span>, img) )</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to write image file\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    imshow(<span class="string">"Display Image"</span>, img);</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// no need to release anything with c++ !   </span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>makefile文件如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">test</span>:<span class="keyword">test</span>.cpp</div><div class="line">	<span class="keyword">g</span>++ -o <span class="keyword">test</span> <span class="keyword">test</span>.cpp `pkg-config --libs opencv` `pkg-config --cflags opencv` </div><div class="line"></div><div class="line">clean:</div><div class="line">	<span class="keyword">rm</span> <span class="keyword">test</span></div></pre></td></tr></table></figure></p>
<p>make之后运行即可。</p>
<h2 id="step2实验概述"><a href="#step2-实验概述" class="headerlink" title="step2:实验概述"></a>step2:实验概述</h2><h3 id="0opencv"><a href="#0-OpenCV" class="headerlink" title="0.OpenCV"></a>0.OpenCV</h3><p>opencv(open source computer vision)是一个由intel发起的基于bsd许可开源发行的跨平台计算机视觉库。这是一个由c函数和少量c++类构成的库，由于我们的培养方案大多围绕c/c++来展开，所以使用这个库也是比较方便的。<br>opencv2.4加入的新类<code>FaceRecognizer</code>为我们实现了许多人脸识别的算法，本次project的目的就是采用不同的算法来对部分数据库中的图像进行处理，比较不同算法的性能差别，并探究背后的原理。</p>
<p>主要包括的人脸识别算法有：</p>
<ul>
<li>特征脸法(Eigenfaces）</li>
<li>Fisherfaces</li>
<li>局部二进制模式直方图(Local Binary Patterns Histograms) ——这是我自己起的名字</li>
</ul>
<p>开始我们采用的数据库是<a href="http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html">AT&amp;T Facedatabase</a></p>
<h3 id="1准备数据"><a href="#1-准备数据" class="headerlink" title="1.准备数据"></a>1.准备数据</h3><p>要运用算法来处理图像，我们需要将所有的图像文件的清单处理成一种特殊的<code>CSV</code>格式，便于读取。我们这里的表示将用每一行代表一个文件，前面是一个包含路径的文件名，后面是一个<code>;</code>作为分隔符，最后跟着一个标签（一个整数，代表所属人），例如<code>/path/to/image.ext;0</code></p>
<p>我们所采用的数据库的结构以及处理用的python脚本见附录，转换输出的结果如下：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/Users/</span>apple<span class="regexp">/Downloads/</span>orl_faces<span class="regexp">/s1/</span><span class="number">1</span>.pgm;<span class="number">0</span></div><div class="line">···</div><div class="line"><span class="regexp">/Users/</span>apple<span class="regexp">/Downloads/</span>orl_faces<span class="regexp">/s1/</span><span class="number">10</span>.pgm;<span class="number">0</span></div></pre></td></tr></table></figure></p>
<h3 id="2特征脸法"><a href="#2-特征脸法" class="headerlink" title="2.特征脸法"></a>2.特征脸法</h3><p>特征脸法(Eigenfaces)是基于主成分分析法(Principal Component Analysis，PCA)的一种人脸识别的算法。特征脸法采用整体面部识别的方法:把面部图像看作一个向量，把图像的每一个像素点看作向量的一维。一个$pxq$的图像将被表示成一个$m = pxq$维的向量， (简单地把每一个像素点按照行或者列的方式依次排列而成) 然而如此产生的向量是巨大的，事实上这些高维向量可以被一些本质的、低维的向量所表示，主成分分析法正是用来达到这一目的。 </p>
<h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理:"></a>算法原理:</h4><p>主成分分析是一种分析、简化数据集的技术，经常用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。其方法主要是通过对协方差矩阵进行特征分解，以得出数据的主成分(即特征向量)与它们的权值(即特征值)，其结果可以理解为对原数据中的方差做出解释:哪一个方向上的数据值对方差的影响最大?直观上，对方差影响越大的方向上对数据的影响越重要。</p>
<h4 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h4><p>1、获得包含M张人脸的图像集合S，按照上述方法将每一张人脸图像转化为一个N维向量:<br>$S = \lbrace \Gamma_1,\Gamma_2,\Gamma_3,…,\Gamma_M \rbrace $<br>2.计算平均图像(均值)$ψ$，并计算每张图像与平均图像的差值$Φ_i$:<br>$\Psi = \frac{1}{M}\sum\limits_{n = 1}^{M}\Gamma_n$<br>$\Phi_i = \Gamma_i - \Psi$<br>3.求解协方差矩阵C的特征值$λ_i$和单位正交特征向量$u_i$:<br>$C = \frac{1}{M}\sum\limits_{n = 1}^{M}\Phi_n\Phi_n^\mathrm{T} = AA^\mathrm{T}$<br>$A = \lbrace \Phi_1,\Phi_2,…,\Phi_n \rbrace$<br>每个特征向量也都是N维向量，转化为图像之后看上去也像是一张“脸”，因而被称为特征脸。通常上我们只取最大的前k个特征值所对应的特征向量作为抓取出的“特征”。<br>4、识别人脸。考虑待识别人脸，按照同样的方式转化为N维向量Γ，用特正脸去表征它:<br>$\omega_k = u_k^\mathrm{T}(\Gamma - \Phi)$<br>$\omega_i$表示Γ在特征脸$u_i$下的权值，M个权重可以构成一个向量:<br>$\Omega^\mathrm{T} = [\omega_1,\omega_2,…,\omega_n]$<br>Ω就是Γ在特征脸下的表征，同理S中每张脸都可以用同样的方式表征，计算二者的“差别”，<br>通常使用欧氏距离表征这个差别:<br>$\epsilon_k = \parallel\Omega - \Omega_k\parallel^2$<br>设定两个阈值ε1和ε2:若εk&lt;ε1，认为Γ和Γk同属一个人;若ε1&lt;εk&lt;ε2，认为Γ也是一张脸，但可能不属于S;若εk&gt;ε2，认为Γ不是一张人脸。 </p>
<h4 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h4><p>I、为何PCA要寻求协方差矩阵的特征向量? 我们从二维的简单情形入手。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_1.png" width="35%"><br>PCA的目的是降维，直观上，希望可以用一维来表示二维的点以降低维度。一维即使一条直线，相当于二维的点向直线上做投影。为了使变换丢失最少的信息，应该让这些点投影后彼此相隔“越远越好”，也就是彼此有区别(否则若两个点重合在一起，就无法区分这两个点，也就是丢失了”信息“)。上图中，直观上认为向u1方向投影应该是一个不错的选择，而向u2这个方向投影就会有很多店重合在一起。 为讨论方便，我们把每个点都减去均值μ，只考虑偏差的部分，这样做也使点分布在原点附近。在这里只用了五个点示意。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_2.png" width="35%"><br>我们先选取一个方向u1，并向这个方向做投影，我们发现各个点之间区别很大，如果向这个方 向降维，应该是不错的选择。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_3.png" width="35%"><br>如果我们换一个方向u2，会发现没有第一次选择效果好。<br><img src="/2017/06/08/基于opencv的人脸识别/PCA_4.png" width="35%"><br>那么如何选择向量u，才能使各个点彼此区分，也即上述“使方差最大化”呢? 每个点都可以用一个向量来表示，记为$X_i$，i = 1，2，……，m，选择的降维的方向(向量)记为u。那么$X_i$在u上的投影(原点到投影点的距离)即为$X_i^\mathrm{T}u$，求使方差最大化的方向u也即求u使得<br>$max \frac{1}{m}\sum\limits_{i=1}^{m}( X_i^\mathrm{T}u)^2 = max \frac{1}{m}\sum\limits_{i=1}^{m} u^\mathrm{T}X_i X_i^\mathrm{T}u = max$ $u^\mathrm{T}(\frac{1}{m}\sum\limits_{i=1}^{m}X_i X_i^\mathrm{T})u$</p>
<p>注意到我们预处理时令每个向量$X_i$都减去了均值μ，因而事实上<br>$S = \frac{1}{m}\sum\limits_{i=1}^{m}X_iX_i^\mathrm{T}$ 就是关于X的协方差矩阵</p>
<p>(补充线性代数知识:设实对称矩阵$A_{nxn}$的全部特征值(非负实数)按照从大到小排列为λ1 ≧ λ2 ≧ …… ≧ λn ≧ 0，对于任意的n维单位向量α，都有λn ≦ $α^\mathrm{T}A_α$ ≦ λ1。)</p>
<p>令$\parallel u \parallel$ = 1，即规定u为单位向量，则使上式达到最大值也即求关于X的协方差矩阵S的(单位)特征量u。<br>用类似的思路可以将结论拓展到多维情况。我们希望用尽量少的维度代表尽可能全部的信息，因而所选取的k个方向u1、u2、……、uk要保证没有“冗余”信息，也即它们是正交的，并选取最大的前k个特征值所对应的特征向量。 </p>
<p>II、其他一些线性代数知识<br>1、实对称矩阵一定可以对角化(有n个线性无关的特征向量)，且特征根都是非负实数。<br>2、属于不同特征值的特征向量是正交的，属于一个特征值的特征向量可以施密特正交化为正交向量。<br>3、矩阵$A_{sxn}$和$B_{nxs}$，AB和BA有相同的非零特征值，且特征值的重数相等。设α是AB属于特征值λ的一个特征向量，则Bα是BA属于特征值λ的一个特征向量:ABα = λα =&gt; B(ABα) = B(λα) =&gt; BA(Bα) = λ(Bα)。<br>利用上定理，可以简化上述第3部中的计算，当M &lt;&lt; N时，可以显著的简化运算和存储 (N x N的矩阵与M x M的矩阵)。<br>4、若选取特征向量时，只取最大的前k个特征值所对应的特征向量，分别记为u1、u2、……、uk，令W =(u1，u2，……，uk)，记$P = W^\mathrm{T}A$，其中$A =(Φ_1，Φ_2，……， Φ_M)$，记$P =(v_1，v_2，……，v_M)$，则$v_k = W^\mathrm{T}Φ_k$，可见P是A降维后的向量组，这也正是 PCA降维的体现。因为我们取的u1、u2、……、uk是单位正交矩阵，故有$WW^\mathrm{T} = I$，从而$Φ_k = Wv_k$，也即我们可以从低维的$v_k$得到高维的$Φ_k$。 </p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/contrib/contrib.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * read_csv - Read images from files and divide them into training set and test</div><div class="line"> * set according to the number of iamges of per person in the training set</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; train_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator = <span class="string">';'</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * norm_0_255 - Create and return normalized image</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src);</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</div><div class="line">&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">     * check for legal command line argument</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(argc != <span class="number">3</span>)&#123;</div><div class="line">        cout &lt;&lt; <span class="string">"usage: ./"</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">" &lt;csv.ext&gt;  &lt;number&gt;"</span> &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * get the path of CSV and the number of images of per person in</div><div class="line">     * the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> fn_csv = <span class="keyword">string</span>(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">int</span> trian_number = atoi(argv[<span class="number">2</span>]);</div><div class="line">    vector&lt;Mat&gt; trian_images, test_images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; trian_labels, test_labels;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">0</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * read in the data which can fail if no valid</div><div class="line">     */</div><div class="line">    <span class="built_in">try</span>&#123;</div><div class="line">        test_number = read_csv(fn_csv, trian_images, trian_labels,</div><div class="line">        	                   test_images, test_labels, trian_number);</div><div class="line">    &#125;<span class="built_in">catch</span> (cv::Exception&amp; e) &#123;</div><div class="line">        cerr &lt;&lt; <span class="string">"Error opening file \""</span> &lt;&lt; fn_csv &lt;&lt; <span class="string">"\". Reason: "</span></div><div class="line">             &lt;&lt; e.msg &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * note the number of images predicted correctly</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> correctcnt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>*test_number; i++)&#123;</div><div class="line">    	<span class="comment">/*</span></div><div class="line">         * select testsample from the test set</div><div class="line">         */</div><div class="line">    	Mat testSample = test_images[i];</div><div class="line">        <span class="keyword">int</span> testLabel = test_labels[i];</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * create an Eigenfaces model with the traing set</div><div class="line">         * full PCA here </div><div class="line">         */</div><div class="line">        Ptr&lt;FaceRecognizer&gt; model = createEigenFaceRecognizer();</div><div class="line">        model-&gt;train(trian_images, trian_labels);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * predicts the label of the test samplle and compare it with</div><div class="line">         * its true label</div><div class="line">         * note the confidence in the meanwhile</div><div class="line">         */</div><div class="line">        <span class="keyword">int</span> predictedLabel = model-&gt;predict(testSample);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * note and output the result</div><div class="line">         */</div><div class="line">        <span class="keyword">string</span> rst = format(<span class="string">"Predicted / Actual = %d / %d."</span>, </div><div class="line">        	predictedLabel, testLabel);</div><div class="line">        cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">        <span class="built_in">if</span>(predictedLabel == testLabel)</div><div class="line">        	correctcnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> correctrate = (<span class="keyword">double</span>)correctcnt / (<span class="number">40</span>*test_number);</div><div class="line">    <span class="keyword">string</span> rst = format(<span class="string">"Correct rate = %d / %d = %lf"</span>,</div><div class="line">    	                correctcnt, <span class="number">40</span>*test_number, correctrate);</div><div class="line">    cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">	<span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; trian_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator)</div><div class="line">&#123;</div><div class="line">	std::ifstream file(filename.c_str(), ifstream::in);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * check for legal filename</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span> (!file) &#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"No valid input file."</span>;</div><div class="line">        CV_Error(CV_StsBadArg, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * divide images into training set and test set according to the</div><div class="line">     * number of images of per person in the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> <span class="built_in">line</span>, path, classlabel;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">10</span>-trian_number;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 40 person in total</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> trian[<span class="number">40</span>];</div><div class="line">    memset(trian, <span class="number">0</span> ,<span class="keyword">sizeof</span>(trian));</div><div class="line">    <span class="built_in">while</span> (getline(file, <span class="built_in">line</span>)) &#123;</div><div class="line">        stringstream liness(<span class="built_in">line</span>);</div><div class="line">        getline(liness, path, separator);</div><div class="line">        getline(liness, classlabel);</div><div class="line">        <span class="built_in">if</span>(!path.empty() &amp;&amp; !classlabel.empty()) &#123;</div><div class="line">        	<span class="keyword">int</span> tmplabel = atoi(classlabel.c_str());</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to triang set</div><div class="line">        	 */</div><div class="line">        	<span class="built_in">if</span>(trian[tmplabel] &lt; trian_number)&#123;</div><div class="line">        		trian_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                trian_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">                trian[tmplabel]++;</div><div class="line">        	&#125;</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to test set</div><div class="line">        	 */</div><div class="line">            <span class="built_in">else</span>&#123;</div><div class="line">            	test_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                test_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> test_number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src)</div><div class="line">&#123;</div><div class="line">	Mat src = _src.getMat();</div><div class="line">    <span class="comment">/* </span></div><div class="line">     * Create and return normalized image</div><div class="line">     */</div><div class="line">    Mat dst;</div><div class="line">    <span class="built_in">switch</span>(src.channels()) &#123;</div><div class="line">    <span class="built_in">case</span> <span class="number">1</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC1);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">case</span> <span class="number">3</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC3);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">default</span>:</div><div class="line">        src.copyTo(dst);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3fisherfaces"><a href="#3-Fisherfaces" class="headerlink" title="3.Fisherfaces"></a>3.Fisherfaces</h3><p>主成分分析（PCA）是Eigenfaces方法的核心，它找到最大化数据总方差的特征的线性组合。虽然这是一种表达数据的强大方法，然而它并没有考虑到所有的情况。所以当抛出组件时，很多变化的信息可能会丢失。想象一下，数据的变化是由外部来源产生的，在这里我们假设这样的变化的来源是光，由PCA识别的组件并不需要包含任何变化信息，所以样本们会被混合到一起，且无法再进行分类。<br>线性判别分析最大化了类之间到类内部的分散，而不是最大化整体的分散。这个想法很简单：相同的类应该集中在一起，而不同的类在低维表示中尽可能远离彼此。</p>
<h4 id="算法原理"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h4><p><strong>我们先来考虑数据集中只有两类的情况</strong><br>实际上这个算法要处理的情况远不止两类，但为了简便起见，我们先从两类的情况开始讨论。<br>对于每一张图，我们用一个点在二维坐标系中的坐标来刻画这张图的性质。那么现在的数据是散布在平面上的二维数据，现在想用一维的量来刻画这些数据并将它们区分开来，那么一个合理的想法就是去寻找一个平面内合适的向量并计算出这些点在这个平面上的投影，用数学公式来表示的话就是 $y = w^\mathrm{T} x $<br><img src="/2017/06/08/基于opencv的人脸识别/FISHER_1.png" width="75%"> </p>
<p>这里借用了一位网友的图（见参考2）。该图中给出了两种可能的方案，直观上第二种方法更好，能够有效的区分开这两类数据集。为了让计算机来实现这一想法，必须要有一种确定的算法来确定这个向量$w$</p>
<p><strong>下面讨论数据集中有更多类的情况</strong><br>我们假设数据共有c类。<br>一开始我们将图像按照像素逐行逐列的处理成一个向量，这样的话一个100x100的图像得到的向量就是10000维，设其为$x$，其维数为n。<br>如果这种时候还只采用一个向量来区分的话有可能会无效，例如</p>
<p><img src="/2017/06/08/基于opencv的人脸识别/FISHER_2.png" width="50%"><br>出现了这样的某个向量恰好成为某几个点组成平面的法向量的情况。<br>这种时候一个可靠的解决方案就是采用多个向量（采用矩阵表示）</p>
<h4 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h4><p>设$W$为<br>$W = [w_1 | w_2 |…| w_K]$<br>其中$w_i$是一个n维列向量<br>那么$x$的投影就可以表示为<br>$y = w^\mathrm{T} x$<br>其中，$y$是一个k维向量。</p>
<p>这之后从类间散列度和类内散列度来考虑。</p>
<p>首先计算每类数据的均值(中心点)：<br>$\mu_i = \frac{1}{N_i}\sum\limits_{x\in\omega_i}x$<br>这里的下标i代表了这一类，$N_i$表示这一类中的元素个数。所以$\mu_i$就代表这一类的中心。</p>
<p>整个样本的中心定义为：<br>$\mu = \frac{1}{N}\sum\limits_{\forall x}x = \frac{1}{N}\sum\limits_{\forall x}N_i\mu_i$</p>
<p>变量类中散列度$S_w$定义如下：<br>$S_w = \sum\limits_{i=1}^{c}S_{wi}$<br>其中：$S_{wi} = \sum\limits_{x\in\omega_i}(x-\mu_i)(x-\mu_i)^\mathrm{T}$   代表第i类内的散列度，是一个nxn矩阵（个人理解：这个公式实际上和方差公示一样，这样做运算也是将各个维度和它们之间的相互作用放在了一个平等的位置上来看待）</p>
<p>类间散列度$S_B$定义如下:<br>$S_B = \sum\limits_{i=1}^{c}N_i(\mu_i-\mu)(\mu_i-\mu)^\mathrm{T}$<br>表示各个类别到样本中心的距离，也是一个nxn矩阵，其中的$N_i$代表一个类别中的样本数，也就是这个人的图片个数</p>
<p>以上都是投影之前的数据。下面我们来计算投影后的数据：</p>
<p>投影后第i类的样本中心：<br>$\widetilde{\mu_i} = \frac{1}{N_i}\sum\limits_{y\in\omega_i}y$</p>
<p>投影后的总样本中心<br>$\widetilde{\mu} = \frac{1}{N}\sum\limits_{\forall y}y$</p>
<p>投影后的类中散列度：<br>$\widetilde{S_w} = \sum\limits_{i=1}^{c}\sum\limits_{y\in\omega_i}(y - \widetilde{\mu_i})(y - \widetilde{\mu_i})^\mathrm{T}$</p>
<p>投影后的类间散列度：<br>$\widetilde{S_B} = \sum\limits_{i=1}^{c}N_i(\widetilde{\mu_i}-\widetilde{\mu})(\widetilde{\mu_i}-\widetilde{\mu})^\mathrm{T}$</p>
<p>根据以上公式以及线性代数知识，有：<br>$\widetilde{S_w} = W^\mathrm{T} S_w W$<br>$\widetilde{S_B} = W^\mathrm{T} S_B W$</p>
<p>如何判断W是不是最佳呢，可以从两方面考虑：1、不同的分类得到的投影点要尽量分开（$S_B$尽量大）；2、同一个分类投影后得到的点要尽量聚合（$S_w$尽量小）</p>
<p>由此我们可以定义度量用的参数<br>$J(W) = \frac{|\widetilde{S_B}|}{|\widetilde{S_w}|} = \frac{|W^\mathrm{T} S_B W|}{|W^\mathrm{T} S_B W|}$</p>
<p>上式取极大值时的W的选取是一个组合优化问题，被证明满足以下式子：<br>$S_w^{-1}S_B w_i = \lambda w_i$<br>即：$w_i$是矩阵$S_w^{-1}S_B$的特征值为$\lambda$的特征向量，这里根据需求，只选取前k大个特征值的特征向量</p>
<p>计算出这些之后，我们就可以回到之前的问题，得出了对应的投影向量，我们就可以依据它们来对向量进行分类了。得到了k个特征向量，如何匹配某人脸和数据库内人脸是否相似呢，方法是将这个人脸在k个特征向量上做投影，得到k维的列向量或者行向量，然后和已有的投影求得欧式距离，根据阈值来判断是否匹配。</p>
<p>另外还需注意：<br>由于$S_B$中的（μi-μ）秩为1，所以$S_B$的至多为C（矩阵的秩小于等于各个相加矩阵的和）。又因为知道了前C-1个μi后，最后一个μc可以用前面的μi来线性表示，因此$S_B$的秩至多为C-1，所以矩阵的特征向量个数至多为C-1。因为C是数据集的类别，所以假设有N个人的照片，那么至多可以取到N-1个特征向量来表征原数据。（存疑）</p>
<h4 id="代码实现"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/contrib/contrib.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * read_csv - Read images from files and divide them into training set and test</div><div class="line"> * set according to the number of iamges of per person in the training set</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; train_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator = <span class="string">';'</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"> * norm_0_255 - Create and return normalized image</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src);</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</div><div class="line">&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">     * check for legal command line argument</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(argc != <span class="number">3</span>)&#123;</div><div class="line">        cout &lt;&lt; <span class="string">"usage: ./"</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">" &lt;csv.ext&gt;  &lt;number&gt;"</span> &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * get the path of CSV and the number of images of per person in</div><div class="line">     * the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> fn_csv = <span class="keyword">string</span>(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">int</span> trian_number = atoi(argv[<span class="number">2</span>]);</div><div class="line">    vector&lt;Mat&gt; trian_images, test_images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; trian_labels, test_labels;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">0</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * read in the data which can fail if no valid</div><div class="line">     */</div><div class="line">    <span class="built_in">try</span>&#123;</div><div class="line">        test_number = read_csv(fn_csv, trian_images, trian_labels,</div><div class="line">        	                   test_images, test_labels, trian_number);</div><div class="line">    &#125;<span class="built_in">catch</span> (cv::Exception&amp; e) &#123;</div><div class="line">        cerr &lt;&lt; <span class="string">"Error opening file \""</span> &lt;&lt; fn_csv &lt;&lt; <span class="string">"\". Reason: "</span></div><div class="line">             &lt;&lt; e.msg &lt;&lt; endl;</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * note the number of images predicted correctly</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> correctcnt = <span class="number">0</span>;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>*test_number; i++)&#123;</div><div class="line">    	<span class="comment">/*</span></div><div class="line">         * select testsample from the test set</div><div class="line">         */</div><div class="line">    	Mat testSample = test_images[i];</div><div class="line">        <span class="keyword">int</span> testLabel = test_labels[i];</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * create an Eigenfaces model with the traing set</div><div class="line">         * full PCA here </div><div class="line">         */</div><div class="line">        Ptr&lt;FaceRecognizer&gt; model = createFisherFaceRecognizer();</div><div class="line">        model-&gt;train(trian_images, trian_labels);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * predicts the label of the test samplle and compare it with</div><div class="line">         * its true label</div><div class="line">         * note the confidence in the meanwhile</div><div class="line">         */</div><div class="line">        <span class="keyword">int</span> predictedLabel = model-&gt;predict(testSample);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * note and output the result</div><div class="line">         */</div><div class="line">        <span class="keyword">string</span> rst = format(<span class="string">"Predicted / Actual = %d / %d."</span>, </div><div class="line">        	predictedLabel, testLabel);</div><div class="line">        cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">        <span class="built_in">if</span>(predictedLabel == testLabel)</div><div class="line">        	correctcnt++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> correctrate = (<span class="keyword">double</span>)correctcnt / (<span class="number">40</span>*test_number);</div><div class="line">    <span class="keyword">string</span> rst = format(<span class="string">"Correct rate = %d / %d = %lf"</span>,</div><div class="line">    	                correctcnt, <span class="number">40</span>*test_number, correctrate);</div><div class="line">    cout &lt;&lt; rst &lt;&lt; endl;</div><div class="line">	<span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; trian_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; trian_labels, vector&lt;Mat&gt;&amp; test_images,</div><div class="line">              vector&lt;<span class="keyword">int</span>&gt;&amp; test_labels, <span class="keyword">int</span> trian_number, <span class="keyword">char</span> separator)</div><div class="line">&#123;</div><div class="line">	std::ifstream file(filename.c_str(), ifstream::in);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * check for legal filename</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span> (!file) &#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"No valid input file."</span>;</div><div class="line">        CV_Error(CV_StsBadArg, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * divide images into training set and test set according to the</div><div class="line">     * number of images of per person in the training set</div><div class="line">     */</div><div class="line">    <span class="keyword">string</span> <span class="built_in">line</span>, path, classlabel;</div><div class="line">    <span class="keyword">int</span> test_number = <span class="number">10</span>-trian_number;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 40 person in total</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> trian[<span class="number">40</span>];</div><div class="line">    memset(trian, <span class="number">0</span> ,<span class="keyword">sizeof</span>(trian));</div><div class="line">    <span class="built_in">while</span> (getline(file, <span class="built_in">line</span>)) &#123;</div><div class="line">        stringstream liness(<span class="built_in">line</span>);</div><div class="line">        getline(liness, path, separator);</div><div class="line">        getline(liness, classlabel);</div><div class="line">        <span class="built_in">if</span>(!path.empty() &amp;&amp; !classlabel.empty()) &#123;</div><div class="line">        	<span class="keyword">int</span> tmplabel = atoi(classlabel.c_str());</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to triang set</div><div class="line">        	 */</div><div class="line">        	<span class="built_in">if</span>(trian[tmplabel] &lt; trian_number)&#123;</div><div class="line">        		trian_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                trian_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">                trian[tmplabel]++;</div><div class="line">        	&#125;</div><div class="line">        	<span class="comment">/*</span></div><div class="line">        	 * add to test set</div><div class="line">        	 */</div><div class="line">            <span class="built_in">else</span>&#123;</div><div class="line">            	test_images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">                test_labels.push_back(atoi(classlabel.c_str()));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*</span></div><div class="line">        	 * else just omit it</div><div class="line">        	 */</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> test_number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> Mat norm_0_255(InputArray _src)</div><div class="line">&#123;</div><div class="line">	Mat src = _src.getMat();</div><div class="line">    <span class="comment">/* </span></div><div class="line">     * Create and return normalized image</div><div class="line">     */</div><div class="line">    Mat dst;</div><div class="line">    <span class="built_in">switch</span>(src.channels()) &#123;</div><div class="line">    <span class="built_in">case</span> <span class="number">1</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC1);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">case</span> <span class="number">3</span>:</div><div class="line">        cv::normalize(_src, dst, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, CV_8UC3);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    <span class="built_in">default</span>:</div><div class="line">        src.copyTo(dst);</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4local-binary-patterns-histograms"><a href="#4-Local-Binary-Patterns-Histograms" class="headerlink" title="4.Local Binary Patterns Histograms"></a>4.Local Binary Patterns Histograms</h3><p>与之前提到的算法不同，LBP算法是通过提取局部特征作为判断依据的。LBP方法的显著优点是对光照不敏感，但是仍然没有解决表情与姿态的问题。不过相比于特征脸方法，识别率已经有了极大的提升。<br>特征面和Fisherfaces采取了一种整体的方法来进行面部识别。算法将数据视为高维图像空间中的某个矢量。我们都知道高维度不好，所以确定了一个较低维的子空间，其中（可能）有用的信息被保留。特征面方法最大化总散射，如果方差是由外部源产生的，则可能导致问题，因为在所有类别上具有最大方差的分量不一定对分类有用。因此，为了保留一些区别用的信息，我们应用了线性判别分析（LDA），并按照Fisherfaces方法的描述进行了优化。 Fisherfaces方法至少对于我们在模型中假设的约束场景运行良好。<br>但现实生活并不完美。我们根本不能在同一个人的10种不同的图像中保证完美的光线设置。那么如果每个人只有一个图像呢？我们对子空间的协方差估计可能是非常错误的。而我们实际需要多少幅图像来获得有用的估计值？就算在AT&amp;T图像库中，对于前两种算法想要得到一个很好的识别率，我们对同一个人至少需要8张照片，并且此时Fisherfaces算法并没有什么提升。<br>后来，大部分研究集中在从图像中提取局部特征。这样的算法不是把整个图像看成一个高维向量，而只是一个对象的局部属性。可一个事物的图像表示会受到照明变化、图像的旋转等因素的影响。所以我们必须要求算法对这些东西具有一定的健壮性（robust）。算法的基本思想是通过将每个像素与其邻域进行比较来总结图像中的局部结构。以像素为中心，并对其邻居进行阈值。如果中心像素的强度大于等于其邻居，则表示为1，如果不是则为0。</p>
<h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p>最初的LBP是定义在像素3x3的邻域内的，以领域中心点的像素为阈值，将相邻的8个像素的灰度值与其进行比较，若周围像素值大于中心像素值，则该像素点的位置被标记为1，否则为0。这样，3x3邻域内的8个点经比较可产生8位二进制数（通常转换为十进制数即LBP码，共256种），即得到该邻域中心像素点的LBP值，并用这个值来反映该区域的纹理信息。如下图所示：<br><img src="/2017/06/08/基于opencv的人脸识别/LBP_1.png" width="75%"> </p>
<p>写成数学公式的话是：<br>$LBP(x_c,y_c) = \sum\limits_{p=0}^{P-1}2^ps(i_p - i_c)$<br>其中，$(x_c,y_c)$表示中心元素，$i_c$是中心元素像素值</p>
<h4 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h4><h5 id="1圆形lbp算子"><a href="#1-圆形LBP算子" class="headerlink" title="1.圆形LBP算子"></a>1.圆形LBP算子</h5><p>基本的 LBP算子的最大缺陷在于它只覆盖了一个固定半径范围内的小区域，这显然不能满足不同尺寸和频率纹理的需要。</p>
<p>为了适应不同尺度的纹理特征，并达到灰度和旋转不变性的要求，Ojala等对 LBP 算子进行了改进，将 3×3邻域扩展到任意邻域，并用圆形邻域代替了正方形邻域，改进后的 LBP 算子允许在半径为 R 的圆形邻域内有任意多个像素点。从而得到了<strong>诸如半径为R的圆形区域内含有P个采样点的LBP算子</strong>。比如下图定了一个5x5的邻域：<br><img src="/2017/06/08/基于opencv的人脸识别/LBP_2.png" width="30%"> </p>
<p>该图中的八个采样点可以使用如下公式计算：<br>$x_p = x_c + Rcos(\frac{2\pi p}{P})$<br>$y_p = y_c - Rsin(\frac{2\pi p}{P})$   (减号是因为我们通常按照顺时针来计算)</p>
<p>不过我们必须考虑到一点，如果按照这个公式计算出的值不是整数，那么这个位置所对应的像素不存在。这个时候我们必须采用某种方法得到一个最恰当的像素位置。图像处理领域常常采用一种被称为<strong>双线性插值</strong>的方式来解决这一问题。</p>
<p>$f(x,y) \approx \begin{bmatrix}1-x &amp; x\end{bmatrix} \begin{bmatrix}f(0,0) &amp; f(0,1) \ f(1,0) &amp; f(1,1) \end{bmatrix} \begin{bmatrix} 1-y \ y \end{bmatrix}$</p>
<p>注：关于双线性插值公式的含义<br>这里的f函数所表示的即是由坐标得到灰度值的函数。该公式的意思是，选取适当的坐标系，使得我们所得到的函数点的坐标周围正方形的四个点的坐标分别为$(0,0)、(0,1)、(1,0)、(1,1)$，在此坐标系下通过上式计算得到的值就可视为该点灰度值的一个估计。</p>
<h5 id="2lbp等价模式"><a href="#2-LBP等价模式" class="headerlink" title="2.LBP等价模式"></a>2.LBP等价模式</h5><p>其实最重要的部分在上面便已经介绍完了。不过这里稍微提一下一种优化形式。<br>之前的算子所能得到的LBP值与其采取的点数是指数关系。为了降低这样的复杂度，产生了一种LBP等价模式算法来对LBP算子的模式种类来进行降维。在实际图像中，绝大多数LBP模式最多只包含两次从1到0或从0到1的跳变。因此，Ojala将“等价模式”定义为：当某个LBP所对应的循环二进制数从0到1或从1到0最多有两次跳变时，该LBP所对应的二进制就称为一个等价模式类。如00000000（0次跳变），00000111（只含一次从0到1的跳变），10001111（先由1跳到0，再由0跳到1，共两次跳变）都是等价模式类。除等价模式类以外的模式都归为另一类，称为混合模式类，例如10010111（共四次跳变）。通过这样的改进，二进制模式的种类大大减少，而不会丢失任何信息。模式数量由原来的$2^p$种减少为 $P(P-1)+2$种，其中P表示邻域集内的采样点数。对于3×3邻域内8个采样点来说，二进制模式由原始的256种减少为58种，这使得特征向量的维数更少，并且可以减少高频噪声带来的影响。</p>
<h4 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/contrib/contrib.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STEP 10</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> read_csv(<span class="keyword">const</span> <span class="keyword">string</span>&amp; filename, vector&lt;Mat&gt;&amp; images, vector&lt;<span class="keyword">int</span>&gt;&amp; labels, <span class="keyword">char</span> separator = <span class="string">';'</span>) &#123;</div><div class="line">    std::ifstream file(filename.c_str(), ifstream::in);</div><div class="line">    <span class="built_in">if</span> (!file) &#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"No valid input file was given, please check the given filename."</span>;</div><div class="line">        CV_Error(CV_StsBadArg, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">string</span> <span class="built_in">line</span>, path, classlabel;</div><div class="line">    <span class="built_in">while</span> (getline(file, <span class="built_in">line</span>)) &#123;</div><div class="line">        stringstream liness(<span class="built_in">line</span>);</div><div class="line">        getline(liness, path, separator);</div><div class="line">        getline(liness, classlabel);</div><div class="line">        <span class="built_in">if</span>(!path.empty() &amp;&amp; !classlabel.empty()) &#123;</div><div class="line">            images.push_back(imread(path, <span class="number">0</span>));</div><div class="line">            labels.push_back(atoi(classlabel.c_str()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> local_binary(vector&lt;Mat&gt;&amp; read_images, vector&lt;<span class="keyword">int</span>&gt;&amp; read_labels,<span class="keyword">int</span> num);</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * ensure command line argument</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(argc &lt; <span class="number">2</span> || argc &gt; <span class="number">4</span>)&#123;</div><div class="line">        cout &lt;&lt; <span class="string">"usage: ./"</span> &lt;&lt; argv[<span class="number">0</span>]</div><div class="line">        &lt;&lt; <span class="string">" &lt;csv.ext&gt; &lt;output folder&gt; &lt;number&gt;"</span> &lt;&lt; endl;</div><div class="line">        <span class="built_in">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">string</span> path_csv = <span class="keyword">string</span>(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">string</span> out_folder = <span class="string">""</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">if</span>(argc &gt;= <span class="number">3</span>)&#123;</div><div class="line">        out_folder = <span class="keyword">string</span>(argv[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    vector&lt;Mat&gt; images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; labels;</div><div class="line">    </div><div class="line">    <span class="built_in">try</span>&#123;</div><div class="line">        read_csv(path_csv,images,labels);</div><div class="line">    &#125;<span class="built_in">catch</span>(cv::Exception &amp;e)&#123;</div><div class="line">        cerr &lt;&lt; <span class="string">"Opening file error: file\""</span> &lt;&lt; path_csv &lt;&lt;  <span class="string">"\"."</span></div><div class="line">            &lt;&lt; endl &lt;&lt; <span class="string">"Reason: "</span> &lt;&lt; e.msg &lt;&lt; endl;</div><div class="line">        <span class="built_in">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * ensure the number of images is enough</div><div class="line">     */</div><div class="line">    <span class="built_in">if</span>(images.<span class="built_in">size</span>() &lt;= <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">string</span> error_message = <span class="string">"This demo needs at least 3 images \</span></div><div class="line">            to work. Please add more images to your data set!";</div><div class="line">        CV_Error(CV_StsError, error_message);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">if</span>(argc == <span class="number">3</span>)</div><div class="line">        local_binary(images,labels,<span class="number">0</span>);</div><div class="line">    <span class="built_in">else</span></div><div class="line">        local_binary(images,labels,atoi(argv[<span class="number">3</span>]));</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * local_binary - a function to prepare for calling LBPHFaceRecognizer</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">void</span> local_binary(vector&lt;Mat&gt;&amp; read_images, vector&lt;<span class="keyword">int</span>&gt;&amp; read_labels,<span class="keyword">int</span> num)&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Get images' height from first picture ,in order to </div><div class="line">     * reshape the images to their true size</div><div class="line">     */</div><div class="line">    <span class="comment">//int height = read_images[0].rows;</span></div><div class="line">    vector&lt;Mat&gt; testImages,images;</div><div class="line">    vector&lt;<span class="keyword">int</span>&gt; testLabels,labels;</div><div class="line">    </div><div class="line">    <span class="built_in">if</span>(num == <span class="number">0</span>)&#123;   <span class="comment">// the argument of number is defaulted</span></div><div class="line">        num = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Generate the testsample and trainsample</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> n = num;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; read_images.<span class="built_in">size</span>() / STEP ; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="built_in">for</span>(j = i * STEP ; j &lt; i * STEP + num ; ++j)&#123;</div><div class="line">            testImages.push_back(read_images[j]);</div><div class="line">            testLabels.push_back(read_labels[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">for</span>(; j &lt; i * STEP + STEP ; ++j)&#123;</div><div class="line">            images.push_back(read_images[j]);</div><div class="line">            labels.push_back(read_labels[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Function createLBPHFaceRecognizer‘s prototype :</div><div class="line">     * Ptr&lt;FaceRecognizer&gt; createLBPHFaceRecognizer(int radius=1,</div><div class="line">     * int neighbors=8, int grid_x=8, int grid_y=8, double threshold=DBL_MAX);</div><div class="line">     *</div><div class="line">     * we can change the argument to create the recognizer we need</div><div class="line">     *</div><div class="line">     */</div><div class="line">    Ptr&lt;FaceRecognizer&gt; model = createLBPHFaceRecognizer(<span class="number">1</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">123.0</span>);</div><div class="line">    model-&gt;train(images, labels);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> cor_number = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> predictlabel;</div><div class="line">    cout &lt;&lt; <span class="string">"Predict begin: "</span> &lt;&lt; endl;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; testImages.<span class="built_in">size</span>() ; ++i)&#123;</div><div class="line">        predictlabel = model -&gt; predict(testImages[i]);</div><div class="line">        cout &lt;&lt; <span class="string">" Predicted class = "</span> &lt;&lt; predictlabel &lt;&lt; <span class="string">"/ Actual class = "</span></div><div class="line">        &lt;&lt; testLabels[i] &lt;&lt; <span class="string">"."</span> ;</div><div class="line">        <span class="built_in">if</span>(predictlabel == testLabels[i])&#123;</div><div class="line">            cout &lt;&lt; <span class="string">"Correct !"</span> &lt;&lt; endl;</div><div class="line">            ++cor_number;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">else</span>&#123;</div><div class="line">            cout &lt;&lt; <span class="string">"False !"</span> &lt;&lt; endl;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cout &lt;&lt; <span class="string">"Predict end. "</span> &lt;&lt; endl &lt;&lt; endl &lt;&lt; <span class="string">"Model Information :"</span> &lt;&lt; endl;</div><div class="line">    cout &lt;&lt; <span class="string">" radius: "</span> &lt;&lt; model-&gt;getInt(<span class="string">"radius"</span>) &lt;&lt; endl &lt;&lt; <span class="string">" neighbors: "</span></div><div class="line">    &lt;&lt; model-&gt;getInt(<span class="string">"neighbors"</span>) &lt;&lt; endl &lt;&lt; <span class="string">" grid_x: "</span>&lt;&lt; model-&gt;getInt(<span class="string">"grid_x"</span>)</div><div class="line">    &lt;&lt; endl &lt;&lt; <span class="string">" grid_y: "</span> &lt;&lt; model-&gt;getInt(<span class="string">"grid_y"</span>) &lt;&lt; endl &lt;&lt; <span class="string">" threshold: "</span></div><div class="line">    &lt;&lt; model-&gt;getDouble(<span class="string">"threshold"</span>) &lt;&lt; endl;</div><div class="line">    <span class="keyword">double</span> cor_rate = (<span class="keyword">double</span>)cor_number / (<span class="keyword">double</span>)testImages.<span class="built_in">size</span>();</div><div class="line">    cout &lt;&lt; <span class="string">"Result - Correct Rate: "</span> &lt;&lt; (<span class="keyword">int</span>)(cor_rate * <span class="number">100</span>) &lt;&lt; <span class="string">'%'</span></div><div class="line">    &lt;&lt; endl;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="step3得出实验结果"><a href="#step3-得出实验结果" class="headerlink" title="step3:得出实验结果"></a>step3:得出实验结果</h2><p>这里我们最初使用了前文中提到过的AT&amp;T数据库得出各个算法测试准确度的状态<br><img src="/2017/06/08/基于opencv的人脸识别/result_1.png" alt=""></p>
<p>下面是具体的正确率数值。</p>
<p><img src="/2017/06/08/基于opencv的人脸识别/result_2.png" alt=""></p>
<p>在这个数据库下，几个算法的性能存在着相对的差异，我们可以得到以下结论：</p>
<ul>
<li>性能上，Local binary pattern histogram 优于eigenfaces，eigenfaces又要优于fisherfaces(这一点是因为fisherface优化的方面并不能在这里充分的体现)</li>
<li>local binary pattern histogram能达到满的准确率，而另外两个算法没能达到（事实上，在识别条件，尤其是光照因素变化比较剧烈时，该算法的表现会远优于另外两个算法）</li>
</ul>
<h2 id="step4应用性别识别"><a href="#step4-应用——性别识别" class="headerlink" title="step4:应用——性别识别"></a>step4:应用——性别识别</h2><p>以上算法除了能够用来进行人脸的匹配外，还可以有许多其他的应用，比如用来做性别识别。实现的原理其实相当的简单。</p>
<p>性别识别无非就是把训练样本的标签变成只有两类：男性和女性。需要说明的是，EigenFace是基于PCA的，是一种非监督的模型，不太适合性别识别的任务。而正如我们前面所讨论过的一样，Fisherfaces方法除了考虑类内的关系，还考虑到了其间的相互作用。所以用来做性别识别性能是优于eigenface的。</p>
<p>这部分的代码略去（实际上可以直接复用之前的代码）</p>
<h2 id="appendix附录"><a href="#Appendix附录" class="headerlink" title="Appendix附录"></a>Appendix附录</h2><h3 id="1数据库结构"><a href="#1-数据库结构" class="headerlink" title="1.数据库结构"></a>1.数据库结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">orl_faces apple$ tree</div><div class="line">.</div><div class="line">├── README</div><div class="line">├── record<span class="selector-class">.md</span></div><div class="line">├── s1</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s10</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s11</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s12</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">···</div><div class="line">├── s19</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s2</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s20</div><div class="line">···</div><div class="line">├── s40</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s5</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s6</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s7</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">├── s8</div><div class="line">│   ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">│   ···</div><div class="line">│   └── <span class="number">10</span><span class="selector-class">.pgm</span></div><div class="line">└── s9</div><div class="line">    ├── <span class="number">1</span><span class="selector-class">.pgm</span></div><div class="line">    ···</div><div class="line">    └── <span class="number">10</span>.pgm</div></pre></td></tr></table></figure>
<h3 id="2转换为csv采用的python脚本"><a href="#2-转换为CSV采用的python脚本" class="headerlink" title="2.转换为CSV采用的python脚本"></a>2.转换为CSV采用的python脚本</h3><p>如下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python</span></div><div class="line"></div><div class="line">import sys</div><div class="line">import os.path</div><div class="line"></div><div class="line"><span class="meta"># This is a tiny script to help you creating a CSV file from a face</span></div><div class="line"><span class="meta"># database with a similar hierarchie:</span></div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#  philipp@mango:~/facerec/data/at$ tree</span></div><div class="line"><span class="meta">#  .</span></div><div class="line"><span class="meta">#  |-- README</span></div><div class="line"><span class="meta">#  |-- s1</span></div><div class="line"><span class="meta">#  |   |-- 1.pgm</span></div><div class="line"><span class="meta">#  |   |-- ...</span></div><div class="line"><span class="meta">#  |   |-- 10.pgm</span></div><div class="line"><span class="meta">#  |-- s2</span></div><div class="line"><span class="meta">#  |   |-- 1.pgm</span></div><div class="line"><span class="meta">#  |   |-- ...</span></div><div class="line"><span class="meta">#  |   |-- 10.pgm</span></div><div class="line"><span class="meta">#  ...</span></div><div class="line"><span class="meta">#  |-- s40</span></div><div class="line"><span class="meta">#  |   |-- 1.pgm</span></div><div class="line"><span class="meta">#  |   |-- ...</span></div><div class="line"><span class="meta">#  |   |-- 10.pgm</span></div><div class="line"><span class="meta">#</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</div><div class="line">        print <span class="string">"usage: create_csv &lt;base_path&gt;"</span></div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    BASE_PATH=sys.argv[<span class="number">1</span>]</div><div class="line">    SEPARATOR=<span class="string">";"</span></div><div class="line"></div><div class="line">    label = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> dirname, dirnames, filenames in os.walk(BASE_PATH):</div><div class="line">        <span class="keyword">for</span> subdirname in dirnames:</div><div class="line">            subject_path = os.path.join(dirname, subdirname)</div><div class="line">            <span class="keyword">for</span> filename in os.listdir(subject_path):</div><div class="line">                abs_path = <span class="string">"%s/%s"</span> % (subject_path, filename)</div><div class="line">                print <span class="string">"%s%s%d"</span> % (abs_path, SEPARATOR, label)</div><div class="line">            label = label + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="reference参考"><a href="#Reference参考" class="headerlink" title="Reference参考"></a>Reference参考</h2><p>1.<a href="http://docs.opencv.org/2.4/modules/contrib/doc/facerec/index.html">opencv官方文档</a><br>2.<a href="http://blog.csdn.net/smartempire/article/details/23377385">人脸识别经典算法三：Fisherface（LDA）</a><br>3.<a href="http://blog.csdn.net/smartempire/article/details/23249517">人脸识别经典算法二：LBP方法</a><br>4.<a href="http://blog.csdn.net/smartempire/article/details/21406005">人脸识别经典算法一：特征脸方法（Eigenface）</a></p>
]]></content>
      
        <categories>
            
            <category> 计算机视觉 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html记录]]></title>
      <url>http://penguin858.com/2017/05/02/html%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#一-html概述">一、html概述</a><ul>
<li><a href="#一基本概念">（一）基本概念</a><ul>
<li><a href="#1什么是html">1.什么是html</a></li>
<li><a href="#2html标签html-tag">2.html标签(html tag)</a></li>
<li><a href="#3html文档">3.html文档</a></li>
<li><a href="#4html中的大小写">4.html中的大小写</a></li>
<li><a href="#5html网页结构">5.html网页结构</a></li>
</ul>
</li>
<li><a href="#二基本的html标签">(二)基本的html标签</a><ul>
<li><a href="#0html文本与正文">0.html文本与正文</a></li>
<li><a href="#1html标题">1.html标题</a></li>
<li><a href="#2html段落">2.html段落</a></li>
<li><a href="#3html链接">3.html链接</a></li>
<li><a href="#4html图像">4.html图像</a><ul>
<li><a href="#关于如何设置图像映射">关于如何设置图像映射：</a></li>
</ul>
</li>
<li><a href="#5水平线">5.水平线</a></li>
<li><a href="#6注释">6.注释</a></li>
</ul>
</li>
<li><a href="#三html元素">(三).html元素</a><ul>
<li><a href="#1概念">1.概念</a></li>
<li><a href="#2基本语法">2.基本语法</a></li>
<li><a href="#3嵌套的html元素">3.嵌套的html元素</a></li>
<li><a href="#4空元素">4.空元素</a></li>
</ul>
</li>
<li><a href="#四属性">(四)属性</a><ul>
<li><a href="#0通用">0.通用</a></li>
<li><a href="#1style">1.style:</a></li>
</ul>
</li>
<li><a href="#五文本格式化httpwwww3schoolcomcnhtmlhtml_formattingasp">(五)<a href="http://www.w3school.com.cn/html/html_formatting.asp">文本格式化</a></a><ul>
<li><a href="#1文本格式">1.文本格式</a></li>
<li><a href="#2预格式文本">2.预格式文本</a></li>
<li><a href="#3计算机输出">3.计算机输出</a></li>
<li><a href="#4文字格式标签">4.文字格式标签</a></li>
</ul>
</li>
<li><a href="#六html结构与布局">(六)HTML结构与布局</a><ul>
<li><a href="#1表格">1.表格</a></li>
<li><a href="#2列表">2.列表</a></li>
<li><a href="#3块">3.块</a></li>
<li><a href="#4使用ltdiv为网站布局">4.使用&lt;div&gt;为网站布局</a></li>
<li><a href="#5html框架">5.HTML框架</a></li>
</ul>
</li>
<li><a href="#七html-css">(七)HTML CSS</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<a id="more"></a>
<h1 id="一-html概述"><a href="#一、html概述" class="headerlink" title="一、html概述"></a>一、html概述</h1><h2 id="一基本概念"><a href="#（一）基本概念" class="headerlink" title="（一）基本概念"></a>（一）基本概念</h2><h3 id="1什么是html"><a href="#1-什么是html" class="headerlink" title="1.什么是html"></a>1.什么是html</h3><p>html全称<strong>超文本标记语言</strong>(Hyper Text Markup language)，它不能算是一种编程语言而只是一种<strong>标记语言</strong>(Markup Language)</p>
<p>标记语言对应着一套<strong>标记标签</strong>(Markup tag)，html使用这一套标记标签来描述网页</p>
<h3 id="2html标签html-tag"><a href="#2-html标签-html-tag" class="headerlink" title="2.html标签(html tag)"></a>2.html标签(html tag)</h3><p>指的是用一对尖括号括起来的关键词，比如’\<html>‘。<br>通常成对出现，例如’\<b>‘和’\</b>‘<br>第一个称为<strong>开始标签（开放标签）</strong>，而第二个称为<strong>结束标签（闭合标签）</strong></html></p>
<h3 id="3html文档"><a href="#3-html文档" class="headerlink" title="3.html文档"></a>3.html文档</h3><p>html文档用来<strong>描述网页</strong>，并且也常被称为<strong>网页(web界面)</strong></p>
<p>html文档的后缀可以使用<strong>.html</strong>或<strong>.htm</strong>都可。</p>
<blockquote>
<p>html 与 htm的区别<br>前者是超文本标记(Hypertext Markup)<br>后者是超文本标记语言(Hypertext Markup Language)<br>可以说 htm = html<br>同时，这两种都是静态网页文件的扩展名，扩展名可以互相更换而不会引起错误（这是指打开而言，但是对于一个链接来说，如果它指向的是一个htm文件，而那个htm文件被更改为html文件，那么是找不到这个连接的）<br>那为什么出现两种文件格式呢？<br>htm 是来源于老的 8.3 文件格式，DOS 操作系统只能支持长度为三位的后缀名，所以是 htm,但在 windows 下无所谓 HTM 与 HTML，html 是为长文件名的格式命名的。所以 htm 是为了兼容过去的DOS命名格式存在的，在效果上没有区别的。以前 htm 和 html 作为不同的服务器上的超文本文件，但现在通用。<br>什么是8.3文件格式？ 这是一种在老的16位Win95或Win98文件系统的短文件名文件格式，扩展名只限于3位，文件名只限于8位。 如果要与16位系统交互，比如说，要把一个路径传给一个16位的程序，你就不能用长文件名，而必须对它进行转换。例如把”C ： /MyLongestPath/MyLongerPath/MyFilename.txt”转换成”C ： /Mylong~1/MyLong~2/Myfile~1.txt”<br>了解这个有什么用？ 在FAT磁盘格式下的DOS中只支持8.3文件格式，如果你要在这个环境下做应用，应该要注意这个文件格式问题。在NTFS下，默认可以兼容这种文件格式，同时也支持长文件名，你也可以通过调整注册表来取消对8.3文件格式也支持</p>
</blockquote>
<p>文档包含了<strong>html标签</strong>和<strong>文本</strong></p>
<p>例如下面就是一个html文档：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>first title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>first paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中：</p>
<ul>
<li><strong>\&lt;!DOCTYPE html&gt;</strong> 声明为 HTML5 文档，声明不区分大小写</li>
<li><strong>&lt;html&gt;</strong> 元素是 HTML 页面的根元素</li>
<li><strong>&lt;head&gt;</strong> 元素包含了文档的元（meta）数据</li>
<li><strong>&lt;title&gt;</strong> 元素描述了文档的标题</li>
<li><strong>&lt;body&gt;</strong> 元素包含了可见的页面内容</li>
<li><strong>&lt;h1&gt;</strong> 元素定义一个大标题</li>
<li><strong>&lt;p&gt;</strong> 元素定义一个段落</li>
<li>有些网站不支持中文显示，所以我们使用<strong>&lt;meta charset=”type_name”&gt;</strong>来声明使用的字符集</li>
</ul>
<p><strong>Web 浏览器</strong>的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容</p>
<h3 id="4html中的大小写"><a href="#4-html中的大小写" class="headerlink" title="4.html中的大小写"></a>4.html中的大小写</h3><p>html中的标签、属性字母不区分大小写，建议使用小写</p>
<h3 id="5html网页结构"><a href="#5-html网页结构" class="headerlink" title="5.html网页结构"></a>5.html网页结构</h3><p>下面是一个可视化的网页结构。<br><img src="/2017/05/02/html记录/html结构.png" alt="html网页结构"></p>
<h2 id="二基本的html标签"><a href="#二-基本的html标签" class="headerlink" title="(二)基本的html标签"></a>(二)基本的html标签</h2><h3 id="0html文本与正文"><a href="#0-html文本与正文" class="headerlink" title="0.html文本与正文"></a>0.html文本与正文</h3><p><strong>&lt;html&gt;</strong>用来声明html文档<br><strong>&lt;body&gt;</strong>之间的内容是文档的可见内容</p>
<h3 id="1html标题"><a href="#1-html标题" class="headerlink" title="1.html标题"></a>1.html标题</h3><p>html使用 <strong>&lt;h1&gt;</strong>  ~  <strong>&lt;h6&gt;</strong>来描述标题:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注</strong>：</p>
<ul>
<li>不要仅仅为了加粗或大号文字使用标题标签，搜索引擎会使用标题来为网页结构编排索引</li>
</ul>
<h3 id="2html段落"><a href="#2-html段落" class="headerlink" title="2.html段落"></a>2.html段落</h3><p>html使用 <strong>&lt;p&gt;</strong> 来描述段落</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：不能通过在html代码中添加额外的空格或换行来改变输出的效果，当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p>
<h3 id="3html链接"><a href="#3-html链接" class="headerlink" title="3.html链接"></a>3.html链接</h3><p>html使用 <strong>&lt;a&gt;</strong> 来定义一个链接，其中，href属性指定链接的地址（url）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://penguin858.github.io"</span>&gt;</span>This is my blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>默认情况下，链接将以以下形式出现在浏览器中：</p>
<ul>
<li>一个未访问过的链接显示为蓝色字体并带有下划线。</li>
<li>访问过的链接显示为紫色并带有下划线。</li>
<li>点击链接时，链接显示为红色并带有下划线。</li>
</ul>
<p>如果为这些超链接设置了CSS样式，则展示的样式根据CSS的设定显示。</p>
<p><strong>注：请始终将正斜杠添加到子文件夹。假如这样书写链接：href=”<a href="https://penguin858.github.io/archives">https://penguin858.github.io/archives</a>“ ，就会向服务器产生两次 HTTP 请求。这是因为服务器会添加正斜杠到这个地址，然后创建一个新的请求，就像这样：href=”<a href="https://penguin858.github.io/archives/">https://penguin858.github.io/archives/</a>“ 。</strong></p>
<p><strong>“链接文本” 不必一定是文本。图片或其他 HTML 元素都可以成为链接。如果把中间的文本内容用&lt;img&gt;替代的话就可以将图片作为链接使用。</strong></p>
<p><strong>属性</strong>:</p>
<ul>
<li><em>href</em>：创建指向另一个文档的链接</li>
<li><p><em>target(或id)</em>：可以定义文档显示的位置</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">定义文档在新窗口中显示：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://penguin858.github.io/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></div><div class="line">my blog.</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><em>name</em>：可以定义一个指向该位置的锚（anchor），可以看成是html页面中的书签，书签不会以任何特殊的方式显示。在之后我们可以建立直接跳转到这个位置的链接。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">命名锚的语法：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span> = <span class="string">"label_name"</span>&gt;</span>锚（显示在页面上的文本）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">在同一个页面创建指向该锚的链接：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"#label_name"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">在其他页面创建指向该锚的链接：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"url#label_name"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>什么是超文本？<br>标记语言的真正威力在于其收集能力，它可以将收集来的文档组合成一个完整的信息库，并且可以将文档库与世界上的其他文档集合链接起来。<br>这样的话，读者不仅可以完全控制文档在屏幕上的显示，还可以通过超链接来控制浏览信息的顺序。这就是 HTML 和 XHTML 中的 “HT” - 超文本（hypertext），就是它将整个 Web 网络连接起来。</p>
<p>超文本的作用<br>超文本的基本特征就是可以超链接文档；你可以指向其他位置，该位置可以在当前的文档中、局域网中的其他文档，也可以在因特网上的任何位置的文档中。这些文档组成了一个杂乱的信息网。目标文档通常与其来源有某些关联，并且丰富了来源；来源中的链接元素则将这种关系传递给浏览者。<br>超链接（hyper text），或者按照标准叫法称为锚（anchor），是使用 &lt;a&gt; 标签标记的，可以用两种方式表示。锚的一种类型是在文档中创建一个热点，当用户激活或选中（通常是使用鼠标）这个热点时，会导致浏览器进行链接。浏览器会自动加载并显示同一文档或其他文档中的某个部分，或触发某些与因特网服务相关的操作，例如发送电子邮件或下载特殊文件等。锚的另一种类型会在文档中创建一个标记，该标记可以被超链接引用。<br>还有一些与超链接相关联的鼠标相关事件。这些事件与 JavaScript 结合使用可以产生一些令人激动的效果。</p>
</blockquote>
<h3 id="4html图像"><a href="#4-html图像" class="headerlink" title="4.html图像"></a>4.html图像</h3><p>html使用 <strong>&lt;img&gt;</strong> 标签来定义图片</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"文件路径"</span> <span class="attr">width</span>=<span class="string">"104"</span> <span class="attr">height</span>=<span class="string">"142"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>src属性指定图片文件的地址，width和height属性指定图片的大小</p>
<p>**注：</p>
<ul>
<li>慎用图片：假如某个html页面包含n个图像，则为了正确显示这个页面，需要加载n+1个文件，而这会影响响应时间。</li>
<li>设置背景图片：body标签具有属性<strong> <em>background</em> </strong>指向背景图片的url**</li>
</ul>
<p><strong>属性</strong>：</p>
<ul>
<li><em>src</em>：指定图像文件的url地址</li>
<li><em>alt</em>：用来定义一串可预备替换的文本。当浏览器无法载入图像的时候，会显示这个替代性的文本（经测验，safari貌似不支持这一功能，能在chrome上显示）</li>
<li><em>width/height</em>：用来指定图片的大小，默认单位是像素</li>
</ul>
<h4 id="关于如何设置图像映射"><a href="#关于如何设置图像映射：" class="headerlink" title="关于如何设置图像映射："></a>关于如何设置图像映射：</h4><p>通过在<strong>&lt;img&gt;</strong>后添加<strong>&lt;map&gt;</strong>和<strong>&lt;area&gt;</strong>，并且将<strong>&lt;img&gt;</strong>中的 <em>usemap</em> 属性设置为<strong>&lt;map&gt;</strong>的 <em>name</em> ，一般来说，还会将&lt;img&gt;的 <em>border</em>设置为0。</p>
<p><strong>&lt;map&gt;</strong>表明映射的开始<br><strong>&lt;area&gt;</strong>表明每个区域<br>属性：</p>
<ul>
<li><em>shape</em>：必须的属性，表明区域的形状（“rect\poly(多边形)\circle\default(未定义)“）</li>
<li><p><em>coords</em>:这一部分要根据shape确定<br>rect：“a,b,c,d”表示左上角和右下角的坐标，其中，左上角的坐标是(0,0)。<br>circle:”a,b,R”表示圆心坐标和半径<br>poly:列出所有顶点的坐标。</p>
</li>
<li><p><em>href和nohref</em>：如果不设置href则应设置<strong>nohref = “nohref”</strong></p>
</li>
<li><em>target</em> ：和<strong>&lt;a&gt;</strong>一样</li>
<li><em>alt</em>：和&lt;img&gt;一样</li>
</ul>
<p>样例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pic6.huitu.com/res/20130116/84481_20130116142820494200_1.jpg"</span>  <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">height</span> = <span class="string">"474px"</span> <span class="attr">alt</span> = <span class="string">"wronganswer"</span> <span class="attr">usemap</span>=<span class="string">"#h"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"h"</span>,<span class="attr">id</span> = <span class="string">"h"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span> = <span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"538,242,581,287"</span> <span class="attr">href</span> = <span class="string">"http://penguin858.github.io"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">alt</span>=<span class="string">"down!"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="5水平线"><a href="#5-水平线" class="headerlink" title="5.水平线"></a>5.水平线</h3><p>html使用 <strong>&lt;hr&gt;</strong> 标签创建水平线，可以用于分隔内容（注意使用时应写成<strong>&lt;hr \&gt;</strong>）</p>
<h3 id="6注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h3><p>html使用标签 <strong>&lt;!—…—&gt;</strong>来表示注释<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在这里写注释 --&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>条件注释</strong>：主要用于IE浏览器，内部包括只有IE浏览器能够执行的HTML标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;</span></div><div class="line">    .... some HTML here ....</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p>其他浏览器也可以生成类似的标签。</p>
<h2 id="三html元素"><a href="#三-html元素" class="headerlink" title="(三).html元素"></a>(三).html元素</h2><h3 id="1概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>html元素的意义和html标签很接近，不过<strong>一个html元素包含了从开始标签到结束标签的所有内容</strong></p>
<h3 id="2基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h3><ul>
<li>HTML 元素<strong>以开始标签起始</strong></li>
<li>HTML 元素<strong>以结束标签终止</strong></li>
<li>元素的内容是开始标签与结束标签之间的内容</li>
<li>某些 HTML 元素具有<strong>空内容（empty content）</strong></li>
<li><strong>空元素在开始标签中进行关闭（以开始标签的结束而结束）</strong></li>
<li>大多数 HTML 元素可拥有<strong>属性</strong></li>
</ul>
<h3 id="3嵌套的html元素"><a href="#3-嵌套的html元素" class="headerlink" title="3.嵌套的html元素"></a>3.嵌套的html元素</h3><p>大多数html元素可以嵌套(包含其他的html元素)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my first paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述例子中就包含了嵌套的三个html元素</p>
<h3 id="4空元素"><a href="#4-空元素" class="headerlink" title="4.空元素"></a>4.空元素</h3><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。<br>例如<strong>&lt;br&gt;</strong>，表示换行，就是没有关闭标签的空元素。<br>在未来以及其他的一些标记语言中，空元素也需要被关闭，此时可以采用在开始标签中添加斜杠的方法，如<strong>&lt;br/&gt;</strong></p>
<h2 id="四属性"><a href="#四-属性" class="headerlink" title="(四)属性"></a>(四)属性</h2><h3 id="0通用"><a href="#0-通用" class="headerlink" title="0.通用"></a>0.通用</h3><ul>
<li>HTML 元素可以设置属性,属性可以在元素中添加附加信息</li>
<li>属性一般描述于<strong>开始标签</strong></li>
<li>属性总是以名称/值对的形式出现，比如：name=”value”。</li>
<li><strong>html属性多为引用属性值，应该始终被包括在引号内</strong></li>
</ul>
<h3 id="1style"><a href="#1-style" class="headerlink" title="1.style:"></a>1.style:</h3><p>style属性提供了一种改变所有 HTML 元素的样式的通用方法。通过 HTML 样式，能够通过使用 style 属性直接将样式添加到 HTML 元素，或者间接地在独立的样式表中（CSS 文件）进行定义。</p>
<ul>
<li><strong>background-color</strong> 属性为元素定义了背景颜色</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color:yellow"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"background-color:red"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background-color:green"</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>font-family、color</strong> 以及 <strong>font-size</strong> 属性分别定义元素中文本的字体系列、颜色和字体尺寸：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-family:verdana"</span>&gt;</span>A heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-family:arial;color:red;font-size:20px;"</span>&gt;</span>A paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>text-align</strong> 属性规定了元素中文本的水平对齐方式：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The heading above is aligned to the center of this page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="五文本格式化"><a href="#五-文本格式化" class="headerlink" title="(五)文本格式化"></a>(五)<a href="http://www.w3school.com.cn/html/html_formatting.asp">文本格式化</a></h2><h3 id="1文本格式"><a href="#1-文本格式" class="headerlink" title="1.文本格式"></a>1.文本格式</h3><ul>
<li><strong>&lt;b&gt;</strong>:加粗</li>
<li><strong>&lt;strong&gt;</strong>:加重语气</li>
<li><strong>&lt;big&gt;或&lt;small&gt;</strong>:加大或缩小</li>
<li><strong>&lt;em&gt;</strong>:强调(emphasize)</li>
<li><strong>&lt;i&gt;</strong>:斜体(italic)</li>
<li><strong>&lt;sub&gt;或&lt;sup&gt;</strong>:上标（superscript）或下标（subscript）</li>
<li><strong>&lt;ins&gt;</strong>：插入字</li>
<li><strong>&lt;del&gt;</strong>：删除字</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>&lt;b&gt;</strong></td>
<td>加粗</td>
</tr>
<tr>
<td><strong>&lt;strong&gt;</strong></td>
<td>加重语气</td>
</tr>
<tr>
<td><strong>&lt;big&gt;或=&lt;small&gt;</strong></td>
<td>加大或缩小</td>
</tr>
<tr>
<td> <strong>&lt;em&gt;</strong></td>
<td>强调（emphasize）</td>
</tr>
<tr>
<td> <strong>&lt;i&gt;</strong></td>
<td>斜体(italic)</td>
</tr>
<tr>
<td><strong>&lt;sub&gt;或&lt;sup&gt;</strong></td>
<td>上标（superscript）或下标（subscript）</td>
</tr>
<tr>
<td><strong>&lt;ins&gt;</strong></td>
<td>插入字</td>
</tr>
<tr>
<td><strong>&lt;del&gt;</strong></td>
<td>删除字</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2预格式文本"><a href="#2-预格式文本" class="headerlink" title="2.预格式文本"></a>2.预格式文本</h3><p>可以使用<strong>&lt;pre&gt;</strong>标签来表示提前处理好格式的文本，保留换行和空格</p>
<h3 id="3计算机输出"><a href="#3-计算机输出" class="headerlink" title="3.计算机输出"></a>3.计算机输出</h3><div class="table-container">
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>&lt;code&gt;</strong></td>
<td>定义计算机代码</td>
</tr>
<tr>
<td><strong>&lt;kbd&gt;</strong></td>
<td>表示键盘输入</td>
</tr>
<tr>
<td><strong>&lt;samp&gt;</strong></td>
<td>定义计算机代码样本</td>
</tr>
<tr>
<td><strong>&lt;var&gt;</strong></td>
<td>定义变量</td>
</tr>
<tr>
<td><strong>&lt;pre&gt;</strong></td>
<td>定义预格式文本</td>
</tr>
</tbody>
</table>
</div>
<p>例程：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>Computer code<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Keyboard input<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>Teletype text<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>Sample text<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>Computer variable<span class="tag">&lt;/<span class="name">var</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>注释：<span class="tag">&lt;/<span class="name">p</span>&gt;</span>这些标签常用于显示计算机/编程代码。</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4文字格式标签"><a href="#4-文字格式标签" class="headerlink" title="4.文字格式标签"></a>4.文字格式标签</h3><div class="table-container">
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>&lt;abbr&gt;</strong></td>
<td>定义缩写（有些浏览器在将光标移到缩写上时会显示完整拼写<br>，对缩写进行标记能够为浏览器、翻译系统和搜索引擎提供信息。</td>
</tr>
<tr>
<td><strong>&lt;address&gt;</strong></td>
<td>定义地址（用于联系信息，常渲染为斜体）</td>
</tr>
<tr>
<td><strong>&lt;bdo&gt;</strong></td>
<td>定义文字方向（把参数dir设置为“rlt”可从右到左输出）</td>
</tr>
<tr>
<td><strong>&lt;blockquote&gt;</strong></td>
<td>定义长的引用（常进行缩进处理）</td>
</tr>
<tr>
<td><strong>&lt;q&gt;</strong></td>
<td>定义短的引用语（浏览器常为其包围引号）</td>
</tr>
<tr>
<td><strong>&lt;cite&gt;</strong></td>
<td>定义著作的标题（常显示为斜体）</td>
</tr>
<tr>
<td><strong>&lt;dfn&gt;</strong></td>
<td>定义一个项目。</td>
</tr>
</tbody>
</table>
</div>
<p>例程：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">1.<span class="tag">&lt;<span class="name">abbr</span>&gt;</span>:</div><div class="line">------</div><div class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"etcetera"</span>&gt;</span>etc.<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line">2.<span class="tag">&lt;<span class="name">address</span>&gt;</span>:</div><div class="line">------</div><div class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></div><div class="line">Written by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://penguin858.github.io"</span>&gt;</span>Xu Zeping<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>&gt;</span> </div><div class="line">Visit me at:<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">xuzeping858@gmail.com<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">Peking University<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line">3.<span class="tag">&lt;<span class="name">bdo</span>&gt;</span></div><div class="line">------</div><div class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span></div><div class="line">test</div><div class="line"><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line">4.<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> / <span class="tag">&lt;<span class="name">q</span>&gt;</span></div><div class="line">------</div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">This is long quote.</div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span></div><div class="line">This is short quote.</div><div class="line"><span class="tag">&lt;/<span class="name">q</span>&gt;</span></div><div class="line">------</div><div class="line"></div><div class="line">5.<span class="tag">&lt;<span class="name">bdo</span>&gt;</span></div><div class="line">------</div><div class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span></div><div class="line">Here is some test text.</div><div class="line"><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></div><div class="line">------</div></pre></td></tr></table></figure></p>
<h2 id="六html结构与布局"><a href="#六-HTML结构与布局" class="headerlink" title="(六)HTML结构与布局"></a>(六)HTML结构与布局</h2><h3 id="1表格"><a href="#1-表格" class="headerlink" title="1.表格"></a>1.表格</h3><p>表格由标签<strong>&lt;table&gt;</strong>定义，每个表格均有若干行(行由标签<strong>&lt;tr&gt;</strong>定义)，每个单元格由<strong>&lt;td&gt;</strong>生成</p>
<p>表头可以通过<strong>&lt;th&gt;</strong>生成（多数情况下会渲染成加粗居中的样式）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Another Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果不定义 <em>border</em>属性，表格将不显示边框</p>
<p>效果：<br><img src="/2017/05/02/html记录/表格效果图.png" alt="表格效果图"></p>
<p><strong>注</strong>：</p>
<ul>
<li>如果希望使用横跨两列／两行的单元格，可以使用<strong>&lt;th&gt;</strong>标签的 <em>colspan</em> 和 <em>rowspan</em> 属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>横跨两列的单元格：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>横跨两行的单元格：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>有些浏览器对空单元格的显示效果不好，这时我们可以通过添加一个空格占位符<strong>&amp;nbsp ;</strong>来解决这一问题</li>
</ul>
<p><a href="http://www.w3school.com.cn/html/html_tables.asp">更多实例</a></p>
<h3 id="2列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><p>列表分为<strong>无序列表、有序列表、定义列表</strong></p>
<p>无序列表的项目使用一个小黑点进行标记。<br>无序列表使用<strong>&lt;ul&gt;</strong>(unordered list)标签声明，每个列表项采用<strong>&lt;li&gt;</strong>声明。（类似于markdown的<strong>‘-‘</strong>的效果）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>penguin<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>elephant<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有序列表的项目使用数字进行标记。<br>有序列表使用<strong>&lt;ol&gt;</strong>(ordered list)标签声明，每个列表项采用<strong>&lt;li&gt;</strong>（和无序列表一样）声明。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>penguin<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>elephant<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定义列表是项目和注解的组合。<br>定义列表使用<strong>&lt;dl&gt;</strong>(definition list)标签声明，每个自定义列表项以<strong>&amp;dt&gt;</strong>声明，列表项的定义以<strong>&lt;dd&gt;</strong>声明</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>penguin<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>sea birds<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>elephant<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>long teeth and nose<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>具体效果：</strong><br><img src="/2017/05/02/html记录/列表效果图.png" alt="列表效果图"></p>
<p>附上实现上图的html代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> 无序列表 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> 有序列表 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> 定义列表 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> penguin <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> elephant <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> penguin <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span> elephant <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span> penguin <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span> sea birds <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span> elephant <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span> long teeth and nose <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="3块"><a href="#3-块" class="headerlink" title="3.块"></a>3.块</h3><p>大多数html元素分属于 <em>块级元素</em> 与 <em>内连元素</em> 之一。</p>
<p>块级元素在显示的时候通常会以新行开始和结束。</p>
<p><strong>&lt;div&gt;</strong>标签是块级元素，可用于组合其他html元素。如果和CSS一同使用，可用于对大的内容块设置样式属性。还可用于文档布局。</p>
<p><strong>&lt;span&gt;</strong>标签是内连元素，可用于组合行内元素对其设置属性。</p>
<h3 id="4使用ltdivgt为网站布局"><a href="#4-使用-lt-div-gt-为网站布局" class="headerlink" title="4.使用&lt;div&gt;为网站布局"></a>4.使用&lt;div&gt;为网站布局</h3><p>例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"container"</span> <span class="attr">style</span> = <span class="string">"width:800px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"header"</span> <span class="attr">style</span> = <span class="string">"background-color:bisque;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"https://penguin858.github.io"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到我的网站！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"menu"</span> <span class="attr">style</span> = <span class="string">"background-color:darkseagreen;height:474px;width:200px;float:left;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>内容：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        html<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        MIPS<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        hexo</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"content"</span> <span class="attr">style</span> = <span class="string">"width:600px;height:474px;float:left;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pic6.huitu.com/res/20130116/84481_20130116142820494200_1.jpg"</span> </span></div><div class="line">        <span class="attr">width</span>=<span class="string">"600px"</span> <span class="attr">height</span> = <span class="string">"474px"</span> <span class="attr">alt</span> = <span class="string">"wronganswer"</span> <span class="attr">usemap</span>=<span class="string">"#h"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"h"</span>,<span class="attr">id</span> = <span class="string">"h"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span> = <span class="string">"rect"</span> <span class="attr">coords</span> = <span class="string">"0,0,50,50"</span> <span class="attr">href</span> = <span class="string">"ImageDemo.html"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span> = <span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"538,242,581,287"</span> <span class="attr">href</span> = <span class="string">"http://penguin858.github.io"</span> </span></div><div class="line">            <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">alt</span>=<span class="string">"down!"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"footer"</span> <span class="attr">style</span> = <span class="string">"background-color:thistle;clear:both;text-align:center;"</span>&gt;</span></div><div class="line">        Copyright @ penguin858</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="/2017/05/02/html记录/布局效果图.png" alt="布局效果图"></p>
<p><strong>注：</strong><br>使用 CSS 最大的好处是，如果把 CSS 代码存放到外部样式表中，那么站点会更易于维护。通过编辑单一的文件，就可以改变所有页面的布局。</p>
<h3 id="5html框架"><a href="#5-HTML框架" class="headerlink" title="5.HTML框架"></a>5.HTML框架</h3><p>通过使用html框架，可以在一个浏览器窗口显示不止一个界面。每一份html文档都是一个框架，并且每一个框架都独立于其他的框架。</p>
<p>使用框架的坏处：</p>
<ul>
<li>开发人员必须同时跟踪多个不同的html文档</li>
<li>很难打印整个页面。</li>
</ul>
<h2 id="七html-css"><a href="#七-HTML-CSS" class="headerlink" title="(七)HTML CSS"></a>(七)HTML CSS</h2><p>待补充。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MIPS汇编语言程序设计]]></title>
      <url>http://penguin858.com/2017/03/26/MIPS%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#零-写在前面">零、写在前面</a></li>
<li><a href="#一-用系统功能调用实现简单输入输出">一、用系统功能调用实现简单输入输出</a><ul>
<li><a href="#题目">题目：</a></li>
<li><a href="#预备知识">预备知识：</a><ul>
<li><a href="#一系统调用">（一）系统调用</a></li>
<li><a href="#二汇编指令">（二）汇编指令</a></li>
</ul>
</li>
<li><a href="#问题代码">问题代码</a></li>
</ul>
</li>
<li><a href="#二-字符串查找比较">二、字符串查找比较</a><ul>
<li><a href="#题目-1">题目：</a></li>
<li><a href="#问题代码-1">问题代码</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2 id="零-写在前面"><a href="#零、写在前面" class="headerlink" title="零、写在前面"></a>零、写在前面</h2><p>作为RISC指令系统的代表之一，MIPS以其简洁、规整，极适合作为教学语言使用。我们以MARS集成开发环境作为工具，系统地学习汇编语言程序设计，并了解可执行文件的文件结构。<br><a href="http://courses.missouristate.edu/KenVollmar/Mars/index.htm">MARS开发环境下载地址</a>(只需要在操作系统上安装JDK即可使用)</p>
<a id="more"></a>
<h2 id="一-用系统功能调用实现简单输入输出"><a href="#一、用系统功能调用实现简单输入输出" class="headerlink" title="一、用系统功能调用实现简单输入输出"></a>一、用系统功能调用实现简单输入输出</h2><h3 id="题目"><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><blockquote>
<p>利用系统功能调用从键盘输入，转换后在屏幕上显示，具体要求如下：<br>(1) 如果输入的是字母（A~Z，区分大小写）或数字（0~9），则将其转换成对应的英文单词后在屏幕上显示，对应关系见下表<br>(2) 若输入的不是字母或数字，则在屏幕上输出字符“*”，<br>(3) 每输入一个字符，即时转换并在屏幕上显示，<br>(4) 支持反复输入，直到按“?”键结束程序。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alpha</td>
<td>Bravo</td>
<td>China</td>
<td>Delta</td>
<td>Echo</td>
<td>Foxtrot</td>
<td>Golf</td>
<td></td>
</tr>
<tr>
<td>H</td>
<td>I</td>
<td>J</td>
<td>K</td>
<td>L</td>
<td>M</td>
<td>N</td>
<td></td>
</tr>
<tr>
<td>Hotel</td>
<td>India</td>
<td>Juliet</td>
<td>Kilo</td>
<td>Lima</td>
<td>Mary</td>
<td>November</td>
<td></td>
</tr>
<tr>
<td>O</td>
<td>P</td>
<td>Q</td>
<td>R</td>
<td>S</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Oscar</td>
<td>Paper</td>
<td>Quebec</td>
<td>Research</td>
<td>Sierra</td>
<td>Tango</td>
<td></td>
</tr>
<tr>
<td>U</td>
<td>V</td>
<td>W</td>
<td>X</td>
<td>Y</td>
<td>Z</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Uniform</td>
<td>Victor</td>
<td>Whisky</td>
<td>X-ray</td>
<td>Yankee</td>
<td>Zulu</td>
<td></td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>b</td>
<td>c</td>
<td>d</td>
<td>e</td>
<td>f</td>
<td>g</td>
<td></td>
</tr>
<tr>
<td>alpha</td>
<td>bravo</td>
<td>china</td>
<td>delta</td>
<td>echo</td>
<td>foxtrot</td>
<td>golf</td>
<td></td>
</tr>
<tr>
<td>h</td>
<td>i</td>
<td>j</td>
<td>k</td>
<td>l</td>
<td>m</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>hotel</td>
<td>india</td>
<td>juliet</td>
<td>kilo</td>
<td>lima</td>
<td>mary</td>
<td>november</td>
<td></td>
</tr>
<tr>
<td>o</td>
<td>p</td>
<td>q</td>
<td>r</td>
<td>s</td>
<td>t</td>
<td></td>
</tr>
<tr>
<td>oscar</td>
<td>paper</td>
<td>quebec</td>
<td>research</td>
<td>sierra</td>
<td>tango</td>
<td></td>
</tr>
<tr>
<td>u</td>
<td>v</td>
<td>w</td>
<td>x</td>
<td>y</td>
<td>z</td>
<td></td>
<td></td>
</tr>
<tr>
<td>uniform</td>
<td>victor</td>
<td>whisky</td>
<td>x-ray</td>
<td>yankee</td>
<td>zulu</td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>First</td>
<td>Second</td>
<td>Third</td>
<td>Fourth</td>
<td>Fifth</td>
<td>Sixth</td>
<td>Seventh</td>
<td>Eighth</td>
<td>Ninth</td>
<td>zero</td>
<td></td>
</tr>
</tbody>
</table>
</div>
</blockquote>
<h3 id="预备知识"><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h3><h4 id="一系统调用"><a href="#（一）系统调用" class="headerlink" title="（一）系统调用"></a>（一）系统调用</h4><p>系统调用是操作系统提供给程序员的一套服务。MARS集成开发环境中搭载了SPIM软件仿真器。<br>SPIM通过系统调用(syscall)指令提供了一小组类似操作系统的服务，其通用的模式是加载系统调用代码到寄存器$v0，然后调用syscall指令执行相应的系统调用。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">li</span> <span class="variable">$v0</span>, 10 # system call code <span class="keyword">for</span> <span class="keyword">exit</span></div><div class="line">syscall</div></pre></td></tr></table></figure></p>
<h4 id="二汇编指令"><a href="#（二）汇编指令" class="headerlink" title="（二）汇编指令"></a>（二）汇编指令</h4><p>SPIM中可以通过<code>.data</code>和<code>.text</code>分别声明数据段和代码段，还有一系列的声明指令，十分方便</p>
<h3 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h3><p>本题主要考察利用转移指令形成条件判断。<br>这一问题的代码如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第一题：用系统功能调用实现简单输入输出</span></div><div class="line"><span class="comment"># 利用系统功能调用从键盘输入，转换后在屏幕上显示</span></div><div class="line"></div><div class="line">                <span class="meta">.data</span></div><div class="line"><span class="symbol">                </span></div><div class="line">up_char:        .asciiz</div><div class="line">                <span class="string">"Alpha "</span>,<span class="string">"Bravo "</span>,<span class="string">"China "</span>,<span class="string">"Delta "</span>,<span class="string">"Echo "</span>,<span class="string">"Foxtrot "</span>,</div><div class="line">                <span class="string">"Golf "</span>,<span class="string">"Hotel "</span>,<span class="string">"India "</span>,<span class="string">"Juliet "</span>,<span class="string">"Kilo "</span>,<span class="string">"Lima "</span>,</div><div class="line">                <span class="string">"Mary "</span>,<span class="string">"November "</span>,<span class="string">"Oscar "</span>,<span class="string">"Paper "</span>,<span class="string">"Quebec "</span>,<span class="string">"Research "</span>,</div><div class="line">                <span class="string">"Sierra "</span>,<span class="string">"Tango "</span>,<span class="string">"Uniform "</span>,<span class="string">"Victor "</span>,<span class="string">"Whisky "</span>,<span class="string">"X-ray "</span>,</div><div class="line">                <span class="string">"Yankee "</span>,<span class="string">"Zulu "</span></div><div class="line"><span class="symbol">low_char:</span>       .asciiz</div><div class="line">                <span class="string">"alpha "</span>,<span class="string">"bravo "</span>,<span class="string">"china "</span>,<span class="string">"delta "</span>,<span class="string">"echo "</span>,<span class="string">"foxtrot "</span>,</div><div class="line">                <span class="string">"golf "</span>,<span class="string">"hotel "</span>,<span class="string">"india "</span>,<span class="string">"juliet "</span>,<span class="string">"kilo "</span>,<span class="string">"lima "</span>,</div><div class="line">                <span class="string">"mary "</span>,<span class="string">"november "</span>,<span class="string">"oscar "</span>,<span class="string">"paper "</span>,<span class="string">"quebec "</span>,<span class="string">"research "</span>,</div><div class="line">                <span class="string">"sierra "</span>,<span class="string">"tango "</span>,<span class="string">"uniform "</span>,<span class="string">"victor "</span>,<span class="string">"whisky "</span>,<span class="string">"x-ray "</span>,</div><div class="line">                <span class="string">"yankee "</span>,<span class="string">"zulu "</span></div><div class="line"><span class="symbol">number:</span> .asciiz</div><div class="line">                <span class="string">"zero "</span>, <span class="string">"First "</span>, <span class="string">"Second "</span>, <span class="string">"Third "</span>, <span class="string">"Fourth "</span>,</div><div class="line">                <span class="string">"Fifth "</span>, <span class="string">"Sixth "</span>, <span class="string">"Seventh "</span>,<span class="string">"Eighth "</span>,<span class="string">"Ninth "</span></div><div class="line"><span class="symbol">c_off:</span>          <span class="meta">.word</span></div><div class="line">                <span class="number">0</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">34</span>,<span class="number">43</span>,<span class="number">49</span>,<span class="number">56</span>,<span class="number">63</span>,<span class="number">71</span>,</div><div class="line">                <span class="number">77</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">106</span>,<span class="number">113</span>,<span class="number">121</span>,<span class="number">131</span>,</div><div class="line">                <span class="number">139</span>,<span class="number">146</span>,<span class="number">155</span>,<span class="number">163</span>,<span class="number">171</span>,<span class="number">178</span>,<span class="number">186</span></div><div class="line"><span class="symbol">n_off:</span>          <span class="meta">.word</span></div><div class="line">                <span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">43</span>,<span class="number">50</span>,<span class="number">59</span>,<span class="number">67</span></div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="meta">.text</span></div><div class="line">                </div><div class="line">                .globl main</div><div class="line"><span class="symbol">main:</span>           li $<span class="built_in">v0</span> <span class="number">12</span></div><div class="line">                <span class="keyword">syscall </span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">63</span> <span class="comment">#'?'</span></div><div class="line">                <span class="keyword">beqz </span>$<span class="built_in">t0</span>, exit</div><div class="line">                </div><div class="line">                <span class="comment"># other?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">48</span> <span class="comment"># '0'</span></div><div class="line">                <span class="keyword">blez </span>$<span class="built_in">t0</span>, other</div><div class="line">                </div><div class="line">                <span class="comment"># number?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t1</span>, $<span class="built_in">v0</span>, <span class="number">57</span> <span class="comment"># '9'</span></div><div class="line">                <span class="keyword">blez </span>$<span class="built_in">t1</span>, num</div><div class="line">                </div><div class="line">                <span class="comment"># low?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">122</span> <span class="comment"># 'z'</span></div><div class="line">                <span class="keyword">bgtz </span>$<span class="built_in">t0</span>, other</div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">97</span> <span class="comment"># 'a'</span></div><div class="line">                <span class="keyword">bgez </span>$<span class="built_in">t0</span>, l_char</div><div class="line">                </div><div class="line">                <span class="comment"># up?</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">90</span> <span class="comment"># 'Z'</span></div><div class="line">                <span class="keyword">bgtz </span>$<span class="built_in">t0</span>, other</div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">65</span> <span class="comment"># 'A'</span></div><div class="line">                <span class="keyword">bgez </span>$<span class="built_in">t0</span>, u_char</div><div class="line">                </div><div class="line">                <span class="keyword">j </span>other</div><div class="line"><span class="symbol"></span></div><div class="line">u_char:         la $<span class="built_in">a0</span>, c_off</div><div class="line">                <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">2</span></div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                <span class="keyword">lw </span>$<span class="built_in">a0</span>, ($<span class="built_in">a0</span>)</div><div class="line">                la $<span class="built_in">t0</span>, up_char</div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span>main</div><div class="line"><span class="symbol">                                                                                                </span></div><div class="line">l_char:         la $<span class="built_in">a0</span>, c_off</div><div class="line">                <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">2</span></div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                <span class="keyword">lw </span>$<span class="built_in">a0</span>, ($<span class="built_in">a0</span>)</div><div class="line">                la $<span class="built_in">t0</span>, low_char</div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span>main                                                                                          </div><div class="line"><span class="symbol">                                                                                                                                                                                                </span></div><div class="line">num:            la $<span class="built_in">a0</span>, n_off</div><div class="line">                <span class="keyword">sll </span>$<span class="built_in">t0</span>, $<span class="built_in">t0</span>, <span class="number">2</span></div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                <span class="keyword">lw </span>$<span class="built_in">a0</span>, ($<span class="built_in">a0</span>)</div><div class="line">                la $<span class="built_in">t0</span>, number</div><div class="line">                <span class="keyword">add </span>$<span class="built_in">a0</span>, $<span class="built_in">a0</span>, $<span class="built_in">t0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span>main</div><div class="line"><span class="symbol"></span></div><div class="line">                </div><div class="line">other:          li $<span class="built_in">a0</span>, <span class="number">42</span> <span class="comment"># *</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">11</span></div><div class="line">                <span class="keyword">syscall </span>        </div><div class="line">                <span class="keyword">j </span>main</div><div class="line"><span class="symbol">                </span></div><div class="line">exit:           li $<span class="built_in">v0</span> <span class="number">10</span></div><div class="line">                <span class="keyword">syscall</span></div></pre></td></tr></table></figure>
<h2 id="二-字符串查找比较"><a href="#二、字符串查找比较" class="headerlink" title="二、字符串查找比较"></a>二、字符串查找比较</h2><h3 id="题目"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h3><blockquote>
<p>利用系统功能调用从键盘输入一个字符串，然后输入单个字符，查找该字符串中是否有该字符（区分大小写）。具体要求如下：<br>(1) 如果找到，则在屏幕上显示：<br>Success! Location: X<br>其中，X为该字符在字符串中第一次出现的位置<br>(2) 如果没找到，则在屏幕上显示：<br>Fail!<br>(3) 输入一个字符串后，可以反复输入希望查询的字符，直到按“?”键结束程序<br>(4) 每个输入字符独占一行，输出查找结果独占一行，位置编码从1开始。<br>提示：为避免歧义，字符串内不包含”?”符号<br>格式示例如下：<br>abcdefgh<br>a<br>Success! Location: 1<br>x<br>Fail!</p>
</blockquote>
<h3 id="问题代码"><a href="#问题代码-1" class="headerlink" title="问题代码"></a>问题代码</h3><p>本体主要考察通过转移指令形成循环。<br>代码如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第二题：字符串查找比较</span></div><div class="line"><span class="comment"># 利用系统功能调用从键盘输入，转换后在屏幕上显示</span></div><div class="line"></div><div class="line">                <span class="meta">.data</span></div><div class="line"><span class="symbol">                </span></div><div class="line">succ:           .asciiz <span class="string">"\r\nSuccess!Location:"</span></div><div class="line"><span class="symbol">newline:</span>        .asciiz <span class="string">"\r\n"</span></div><div class="line"><span class="symbol">fall:</span>           .asciiz <span class="string">"\r\nFail!\r\n"</span></div><div class="line"><span class="symbol">str:</span>            <span class="meta">.space</span> <span class="number">4004</span></div><div class="line"></div><div class="line">                <span class="meta">.text</span></div><div class="line">                </div><div class="line">                .globl main</div><div class="line"><span class="symbol">main:</span>           la $<span class="built_in">a0</span>, str</div><div class="line">                li $<span class="built_in">a1</span>, <span class="number">4003</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">8</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line"><span class="symbol"></span></div><div class="line">judge:          li $<span class="built_in">v0</span>, <span class="number">12</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t0</span>, $<span class="built_in">v0</span>, <span class="number">63</span> <span class="comment"># '?'</span></div><div class="line">                <span class="keyword">beqz </span>$<span class="built_in">t0</span>, exit</div><div class="line">                la $<span class="built_in">t1</span>, str</div><div class="line"><span class="symbol">                </span></div><div class="line">body:           <span class="keyword">lb </span>$<span class="built_in">t2</span>, ($<span class="built_in">t1</span>)</div><div class="line">                <span class="keyword">beqz </span>$<span class="built_in">t2</span>, fail</div><div class="line">                <span class="keyword">beq </span>$<span class="built_in">t2</span>, $<span class="built_in">v0</span>, suc</div><div class="line">                <span class="keyword">addi </span>$<span class="built_in">t1</span>, $<span class="built_in">t1</span>, <span class="number">1</span></div><div class="line">                <span class="keyword">j </span><span class="keyword">body</span></div><div class="line"><span class="symbol">                </span></div><div class="line">fail:           la $<span class="built_in">a0</span>, fall</div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span><span class="keyword">judge</span></div><div class="line"><span class="symbol"></span></div><div class="line">suc:            la $<span class="built_in">t3</span>, str</div><div class="line">                <span class="keyword">sub </span>$<span class="built_in">t3</span>, $<span class="built_in">t1</span>, $<span class="built_in">t3</span></div><div class="line">                <span class="keyword">addi </span>$<span class="built_in">t3</span>, $<span class="built_in">t3</span>, <span class="number">1</span></div><div class="line">                la $<span class="built_in">a0</span>, succ</div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">addi </span>$<span class="built_in">a0</span>, $<span class="built_in">t3</span>, <span class="number">0</span></div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">1</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                la $<span class="built_in">a0</span>, newline</div><div class="line">                li $<span class="built_in">v0</span>, <span class="number">4</span></div><div class="line">                <span class="keyword">syscall</span></div><div class="line">                <span class="keyword">j </span><span class="keyword">judge</span></div><div class="line"><span class="symbol"></span></div><div class="line"></div><div class="line">exit:           li $<span class="built_in">v0</span>, <span class="number">10</span></div><div class="line">                <span class="keyword">syscall</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> RISC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> MIPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用hexo在github上搭建自己的博客]]></title>
      <url>http://penguin858.com/2017/03/01/%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#零-说在前面">零、说在前面</a></li>
<li><a href="#一-注册github">一、注册github</a></li>
<li><a href="#二-环境配置">二、环境配置</a></li>
<li><a href="#三-生成ssh密钥">三、生成ssh密钥</a></li>
<li><a href="#四-本地配置">四、本地配置</a></li>
<li><a href="#五-将博客部署到github上">五、将博客部署到github上</a></li>
<li><a href="#六-一些其他命令">六、一些其他命令：</a></li>
</ul>
<!-- tocstop -->
<h3 id="零-说在前面"><a href="#零、说在前面" class="headerlink" title="零、说在前面"></a>零、说在前面</h3><p>最近开始学习一些东西，正好在学习这些东西的过程中产生了一些疑问与体会需要整理，便想着应该有一个自己的博客了，而正好github对个人自己搭建博客提供了免费的支持，所以今天便用了一些时间搭建了一个自己的博客，将过程和其中产生的一些问题放在这里，希望能对大家产生帮助</p>
<ul>
<li>搭建平台：Mac OS X</li>
<li>Windows的可以参看这篇文章：<a href="https://zhuanlan.zhihu.com/p/25471760?utm_source=qq&amp;utm_medium=social">教你免费搭建个人博客，Hexo&amp;Github</a>（不过实际上两个平台相差不大）</li>
<li>使用工具：Hexo <a href="https://hexo.io">这里是官方文档</a></li>
</ul>
<a id="more"></a>
<h3 id="一-注册github"><a href="#一、注册github" class="headerlink" title="一、注册github"></a>一、注册github</h3><p><a href="https://github.com">这里</a>是github的官网，注册。<br>然后再个人页面创建一个新的repository，名字命名为<code>yourname.github.io</code>，yourname是自己的用户名。<br><img src="http://upload-images.jianshu.io/upload_images/291600-7cec7b9f28359ea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建"><br>这里创不创建README没有什么影响。</p>
<h3 id="二-环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h3><p>要使用Hexo需要先安装好<br><a href="https://nodejs.org/en/">Node.js</a><br><a href="https://github.com/waylau/git-for-win">Git(这里是一个国外的镜像，方便下载)</a><br>由于我个人在创建之前已经安装好了git，所以跳过初始配置部分，第一次使用的可以参看<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/">廖雪峰的教程</a></p>
<p>然后就可以输入命令安装Hexo了<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>输入命令后会产生如下信息，可能需要等待一会</p>
<p><img src="https://raw.githubusercontent.com/penguin858/temp_picture/master/Screen%20Shot%202017-03-01%20at%2010.32.44%20AM.png" style="zoom:40%"></p>
<p>到这里我们的环境就已经安装完毕了。</p>
<h3 id="三-生成ssh密钥"><a href="#三、生成ssh密钥" class="headerlink" title="三、生成ssh密钥"></a>三、生成ssh密钥</h3><p>在终端处输入以下命令：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"Github的注册邮箱地址"</span></div></pre></td></tr></table></figure></p>
<p>可以直接不停的敲回车，直到：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Your <span class="keyword">public</span> key <span class="keyword">has</span> been saved <span class="keyword">in</span> &lt;path&gt;.</div></pre></td></tr></table></figure></p>
<p>输入之后就会在本机的某个（我这里是～目录）目录下创建一个隐藏文件夹<code>.ssh</code>，将它打开，其中存有三个文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">id_rsa		id_rsa<span class="selector-class">.pub</span>	known_hosts</div></pre></td></tr></table></figure></p>
<p>打开其中的id_rsa.pub(我机器上的vim是不能解析这个文件的，如果没有打开工具可以使用<a href="https://www.sublimetext.com/3">Sublime Text</a>)，将所有内容复制，然后打开<a href="https://github.com/settings/keys">Settings</a><br>然后：<br>New SSH key ——Title：随便起 —— Key：输入刚才复制的内容—— Add SSH key</p>
<h3 id="四-本地配置"><a href="#四、本地配置" class="headerlink" title="四、本地配置"></a>四、本地配置</h3><p>输入以下命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init <span class="symbol">&lt;folder&gt;</span></div><div class="line"><span class="keyword">cd</span> <span class="symbol">&lt;folder&gt;</span></div></pre></td></tr></table></figure></p>
<p>便会在指定的文件夹创建存放博客的文件。<br>这样初始化好的文件夹自带一个helloworld文件，所以可以直接输入以下命令：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">generate</span> #这里可简写为g</div><div class="line">$ hexo server #启动本地服务器，之后在浏览器处输入http:<span class="comment">//localhost:4000/ 就可以看到网页的样子了。</span></div></pre></td></tr></table></figure>
<h3 id="五-将博客部署到github上"><a href="#五、将博客部署到github上" class="headerlink" title="五、将博客部署到github上"></a>五、将博客部署到github上</h3><p>用Sublime打开文件夹中的<code>_config.yml</code>文件，进行修改：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span>  <span class="comment">#标题</span></div><div class="line"><span class="attr">subtitle:</span>  <span class="comment">#副标题</span></div><div class="line"><span class="attr">description:</span>   <span class="comment">#站点描述，给搜索引擎看的</span></div><div class="line"><span class="attr">author:</span>  <span class="comment">#作者</span></div><div class="line"><span class="attr">language:</span>  <span class="comment">#语言</span></div><div class="line"><span class="attr">timezone:</span> </div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span>  <span class="comment">#网址</span></div><div class="line"><span class="attr">root:</span> / <span class="comment">#根目录</span></div><div class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/ <span class="comment">#文章的链接格式</span></div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="comment"># Directory</span></div><div class="line"><span class="attr">source_dir:</span> source <span class="comment">#源文件目录</span></div><div class="line"><span class="attr">public_dir:</span> public <span class="comment">#生成的网页文件目录</span></div><div class="line"><span class="attr">tag_dir:</span> tags <span class="comment">#标签目录</span></div><div class="line"><span class="attr">archive_dir:</span> archives <span class="comment">#存档目录</span></div><div class="line"><span class="attr">category_dir:</span> categories <span class="comment">#分类目录</span></div><div class="line"><span class="attr">code_dir:</span> downloads/code</div><div class="line"><span class="attr">i18n_dir:</span> :lang</div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="comment"># Writing</span></div><div class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> post</div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span> <span class="comment">#语法高亮</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  tab_replace:</span></div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag</span></div><div class="line"><span class="attr">default_category:</span> uncategorized</div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Server #本地服务器</span></div><div class="line"><span class="attr">port:</span> <span class="number">4000</span> <span class="comment">#端口号</span></div><div class="line"><span class="attr">server_ip:</span> localhost <span class="comment">#IP 地址</span></div><div class="line"><span class="attr">logger:</span> <span class="literal">false</span></div><div class="line"><span class="attr">logger_format:</span> dev</div><div class="line"></div><div class="line"><span class="comment"># Date / Time format</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attr">date_format:</span> YYYY-MM-DD</div><div class="line"><span class="attr">time_format:</span> HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页文章数，设置成 0 禁用分页</span></div><div class="line"><span class="attr">pagination_dir:</span> page</div><div class="line"></div><div class="line"><span class="comment"># Extensions #拓展插件</span></div><div class="line"><span class="attr">theme:</span> landscape</div><div class="line"></div><div class="line"><span class="comment"># Deployment </span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> <span class="comment">#repo的URL</span></div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure></p>
<p>其中，repo的地址可以在这里找到：<br><img src="https://raw.githubusercontent.com/penguin858/temp_picture/master/Screen%20Shot%202017-03-01%20at%201.42.51%20PM.png" alt=""></p>
<p>我自己的参数是这么设置的：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">title</span>: *** </div><div class="line"><span class="attribute">subtitle</span>:  </div><div class="line"><span class="attribute">description</span>:  Try </div><div class="line"><span class="attribute">author</span>: *** </div><div class="line"><span class="attribute">language</span>: zh-CN </div><div class="line"><span class="attribute">timezone</span>: Asia/Shanghai</div><div class="line"></div><div class="line"><span class="less"><span class="attribute">deploy</span>:</span></div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/***/***.github.io.git</span></div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure></p>
<p>然后可以输入以下命令来将网站发布到github：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo deploy <span class="comment">#可简写为d</span></div></pre></td></tr></table></figure></p>
<p>但是我在这一步碰到了问题，我在提交的时候出现了如下错误：<br><img src="https://raw.githubusercontent.com/penguin858/temp_picture/master/Screen%20Shot%202017-03-01%20at%2011.19.21%20AM.png" alt=""></p>
<p>这时可以通过输入以下命令解决：(为什么？)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>然后提交还是出错：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">remote: Anonymous access to ***/***.github.io.git denied.</span></div></pre></td></tr></table></figure></p>
<p>估计应该是ssh密钥没能匹配上，后来我重新设置了一下user.name和user.email就好了。</p>
<h3 id="六-一些其他命令"><a href="#六、一些其他命令：" class="headerlink" title="六、一些其他命令："></a>六、一些其他命令：</h3><p>可以使用new创建新文章：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">new</span> <span class="string">"新文章的名字"</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello!]]></title>
      <url>http://penguin858.com/2017/03/01/Hello!/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>您好，欢迎来到我的博客！</p>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[Hello!]]></title>
      <url>http://penguin858.com/Hello!%20copy.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><html>
<body>

<h1 id="my-first-heading">My First Heading</h1>

<p>My first paragraph.</p>

</body>
</html>


]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[web安全]]></title>
      <url>http://penguin858.com/web%E5%AE%89%E5%85%A8.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><!-- toc -->
<ul>
<li><a href="#一-安全">一、安全</a><ul>
<li><a href="#一安全三要素cia">（一）安全三要素：CIA</a></li>
<li><a href="#二安全评估">（二）安全评估</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2 id="一-安全"><a href="#一、安全" class="headerlink" title="一、安全"></a>一、安全</h2><h3 id="一安全三要素cia"><a href="#（一）安全三要素：CIA" class="headerlink" title="（一）安全三要素：CIA"></a>（一）安全三要素：CIA</h3><ul>
<li>Confidentially：机密性：内容不能泄露，常用加密方法实现</li>
<li>Integrity：完整性：内容完整、没有被篡改</li>
<li>Availability：可用性：保护资源易得</li>
</ul>
<h3 id="二安全评估"><a href="#（二）安全评估" class="headerlink" title="（二）安全评估"></a>（二）安全评估</h3><ol>
<li>资产等级划分<br>互联网安全的核心问题，是数据安全的问题——对数据划分信任域和信任边界<br>2.威胁分析<br><strong>STRIDE模型</strong>：</li>
</ol>
<ul>
<li>Spoofing：伪装—-冒充他人身份</li>
<li>Tampering：篡改—-修改数据或代码</li>
<li>Repudiation：抵赖—-否认做过的事情</li>
<li>Information Disclosure：信息泄露</li>
<li>Denial of Service：拒绝服务</li>
<li>Elevation of Privilege：提升权限—-未经授权取得许可</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linuxTCP/IP协议栈]]></title>
      <url>http://penguin858.com/linuxTCP:IP%E5%8D%8F%E8%AE%AE%E6%A0%88.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="linuxtcpip协议栈"><a href="#linuxTCP-IP协议栈" class="headerlink" title="linuxTCP/IP协议栈"></a>linuxTCP/IP协议栈</h1><h2 id="一-基本的linux数据结构和术语"><a href="#一、基本的linux数据结构和术语" class="headerlink" title="一、基本的linux数据结构和术语"></a>一、基本的linux数据结构和术语</h2><h3 id="一链表结构"><a href="#（一）链表结构" class="headerlink" title="（一）链表结构"></a>（一）链表结构</h3><p>linux中的链表结构定义在<code>include/linux/list.h</code>中：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> list_head &#123;</div><div class="line">	<span class="keyword">struct</span> list_head *next, *prev;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>要注意的是，这个链表数据结构 <em>没有数据域</em> 。开发者在需要将某种数据结构组织成链表的时候就会包含一个<code>struct list_head</code>成员。</p>
<p>有一系列的宏被设计用来访问这个链表，最常用的<code>list_entry</code>：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> list_entry(prt,type,member) container_of(ptr,type,member)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr,type,member) (&#123; \</span></div><div class="line">	const typeof( ((type *) 0) -&gt;member) *__mptr = (ptr); \</div><div class="line">	(type *) ((char *) __mptr - offsetof(type,member) );&#125;)</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> offsetof(TYPE,MENBER) ((size_t) &amp; ((TYPE *) 0) -&gt; MENBER)</span></div></pre></td></tr></table></figure>
<p><code>typeof</code>是GCC支持的运算，作用是获取变量的类型。 </p>
<p>而另一种数据结构<code>hlist</code>是 <em>hash list</em> 的简称：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> hlist_head &#123;</div><div class="line">	<span class="keyword">struct</span> hlist_node *first;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> hlist_node &#123;</div><div class="line">	<span class="keyword">struct</span> hlist_node *next, **pprev;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="二linux系统初始化"><a href="#（二）linux系统初始化" class="headerlink" title="（二）linux系统初始化"></a>（二）linux系统初始化</h3><p>linux系统初始化最重要的代码为以下部分：</p>
<ul>
<li>4个汇编程序：<code>bootsect.S</code> <code>setup.S</code> <code>head.S</code> <code>entry.S</code></li>
<li><code>init</code>目录下的<code>main.c</code></li>
</ul>
<p><code>main.c</code>中最重要的函数应当是<code>start_kernel</code>和<code>rest_init</code>函数了，但是要在其中找出网络协议栈的初始化，需要先了解其他知识</p>
<h3 id="三elf文件格式"><a href="#（三）ELF文件格式" class="headerlink" title="（三）ELF文件格式"></a>（三）ELF文件格式</h3><p>elf是*NIX系统上可执行文件的标准格式，有三种形式：</p>
<ul>
<li>Relocatable: 由编译器和汇编器生成，由linker处理</li>
<li>Executable: 即可执行文件格式</li>
<li>Shared Object: 包含了linker需要的符号信息和运行时刻所需的代码</li>
</ul>
<p>ELF文件有很多section，</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《政府论》]]></title>
      <url>http://penguin858.com/%E3%80%8A%E6%94%BF%E5%BA%9C%E8%AE%BA%E3%80%8B.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://penguin858.com/categories/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://penguin858.com/about/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>北京某野鸡大学计算机专业大二学生，目前致力于数据库方面研究。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=836330&auto=1&height=66"></iframe>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[contact]]></title>
      <url>http://penguin858.com/contact/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Name: Xu Zeping<br><a href="https://github.com/penguin858">This is my github address</a></p>
<p>Gmail: xuzeping858@gmail.com<br>QQ Email: 1363380773@qq.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://penguin858.com/tags/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
  
</search>
